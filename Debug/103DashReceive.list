
103DashReceive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08008f90  08008f90  00018f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093fc  080093fc  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  080093fc  080093fc  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093fc  080093fc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08009404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000210  08009614  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08009614  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109d1  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259a  00000000  00000000  00030c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  000331a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00034288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c23  00000000  00000000  00035258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001246e  00000000  00000000  0004ee7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093dd1  00000000  00000000  000612e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f50ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  000f510c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f78 	.word	0x08008f78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	08008f78 	.word	0x08008f78

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <updateTempsMin>:
 *      Author: nraym
 */

#include "lcd_app.h"

void updateTempsMin(I2C_HandleTypeDef *handle, float tempmin) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	HD44780_SetCursor(0, 0);
 800107a:	2100      	movs	r1, #0
 800107c:	2000      	movs	r0, #0
 800107e:	f000 f9e7 	bl	8001450 <HD44780_SetCursor>
	char str[6];
	snprintf(str, sizeof(str), "%.1f", (float) tempmin);
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f7ff f9d0 	bl	8000428 <__aeabi_f2d>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	f107 0008 	add.w	r0, r7, #8
 8001090:	e9cd 2300 	strd	r2, r3, [sp]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <updateTempsMin+0x44>)
 8001096:	2106      	movs	r1, #6
 8001098:	f005 fce2 	bl	8006a60 <sniprintf>
	HD44780_PrintStr(str);
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fa46 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 80010a6:	f000 fa05 	bl	80014b4 <HD44780_Display>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08008f90 	.word	0x08008f90

080010b8 <updateTempsMax>:

void updateTempsMax(I2C_HandleTypeDef *handle, float tempmax) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	HD44780_SetCursor(0, 1);
 80010c2:	2101      	movs	r1, #1
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f9c3 	bl	8001450 <HD44780_SetCursor>
	char str[6];
	snprintf(str, sizeof(str), "%.1f", (float) tempmax);
 80010ca:	6838      	ldr	r0, [r7, #0]
 80010cc:	f7ff f9ac 	bl	8000428 <__aeabi_f2d>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	f107 0008 	add.w	r0, r7, #8
 80010d8:	e9cd 2300 	strd	r2, r3, [sp]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <updateTempsMax+0x44>)
 80010de:	2106      	movs	r1, #6
 80010e0:	f005 fcbe 	bl	8006a60 <sniprintf>
	HD44780_PrintStr(str);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fa22 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 80010ee:	f000 f9e1 	bl	80014b4 <HD44780_Display>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08008f90 	.word	0x08008f90

08001100 <updateHighVoltage>:
void updateHighVoltage(I2C_HandleTypeDef *handle, float highvol) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af02      	add	r7, sp, #8
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	HD44780_SetCursor(16, 0);
 800110a:	2100      	movs	r1, #0
 800110c:	2010      	movs	r0, #16
 800110e:	f000 f99f 	bl	8001450 <HD44780_SetCursor>
	char str[6];
	snprintf(str, sizeof(str), "%.2f", (float) highvol);
 8001112:	6838      	ldr	r0, [r7, #0]
 8001114:	f7ff f988 	bl	8000428 <__aeabi_f2d>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	f107 0008 	add.w	r0, r7, #8
 8001120:	e9cd 2300 	strd	r2, r3, [sp]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <updateHighVoltage+0x44>)
 8001126:	2106      	movs	r1, #6
 8001128:	f005 fc9a 	bl	8006a60 <sniprintf>
	HD44780_PrintStr(str);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f9fe 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 8001136:	f000 f9bd 	bl	80014b4 <HD44780_Display>

}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08008f98 	.word	0x08008f98

08001148 <updateLowVoltage>:

void updateLowVoltage(I2C_HandleTypeDef *handle, float lowvol) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	HD44780_SetCursor(16, 1);
 8001152:	2101      	movs	r1, #1
 8001154:	2010      	movs	r0, #16
 8001156:	f000 f97b 	bl	8001450 <HD44780_SetCursor>
	char str[6];
	snprintf(str, sizeof(str), "%.2f", (float) lowvol);
 800115a:	6838      	ldr	r0, [r7, #0]
 800115c:	f7ff f964 	bl	8000428 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	f107 0008 	add.w	r0, r7, #8
 8001168:	e9cd 2300 	strd	r2, r3, [sp]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <updateLowVoltage+0x44>)
 800116e:	2106      	movs	r1, #6
 8001170:	f005 fc76 	bl	8006a60 <sniprintf>
	HD44780_PrintStr(str);
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f9da 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 800117e:	f000 f999 	bl	80014b4 <HD44780_Display>

}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	08008f98 	.word	0x08008f98

08001190 <updateSpeed>:

void updateSpeed(I2C_HandleTypeDef *handle, float spd) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	HD44780_SetCursor(10, 0);
 800119a:	2100      	movs	r1, #0
 800119c:	200a      	movs	r0, #10
 800119e:	f000 f957 	bl	8001450 <HD44780_SetCursor>
	char str[6];
	snprintf(str, sizeof(str), "%3.0f", (float) spd * 3.6);
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f7ff f940 	bl	8000428 <__aeabi_f2d>
 80011a8:	a30d      	add	r3, pc, #52	; (adr r3, 80011e0 <updateSpeed+0x50>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff f993 	bl	80004d8 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	f107 0008 	add.w	r0, r7, #8
 80011ba:	e9cd 2300 	strd	r2, r3, [sp]
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <updateSpeed+0x58>)
 80011c0:	2106      	movs	r1, #6
 80011c2:	f005 fc4d 	bl	8006a60 <sniprintf>
	HD44780_PrintStr(str);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f9b1 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 80011d0:	f000 f970 	bl	80014b4 <HD44780_Display>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	f3af 8000 	nop.w
 80011e0:	cccccccd 	.word	0xcccccccd
 80011e4:	400ccccc 	.word	0x400ccccc
 80011e8:	08008fa0 	.word	0x08008fa0

080011ec <updateSOC>:

void updateSOC(I2C_HandleTypeDef *handle, uint8_t soc) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
	HD44780_SetCursor(10, 1);
 80011f8:	2101      	movs	r1, #1
 80011fa:	200a      	movs	r0, #10
 80011fc:	f000 f928 	bl	8001450 <HD44780_SetCursor>
	char str[4];
	snprintf(str, sizeof(str), "%d", (uint8_t) soc);
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	f107 000c 	add.w	r0, r7, #12
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <updateSOC+0x38>)
 8001208:	2104      	movs	r1, #4
 800120a:	f005 fc29 	bl	8006a60 <sniprintf>
	HD44780_PrintStr(str);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f98d 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 8001218:	f000 f94c 	bl	80014b4 <HD44780_Display>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08008fa8 	.word	0x08008fa8

08001228 <updateAvgPower>:

void updateAvgPower(I2C_HandleTypeDef *handle, int avgpow) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	HD44780_SetCursor(0, 2);
 8001232:	2102      	movs	r1, #2
 8001234:	2000      	movs	r0, #0
 8001236:	f000 f90b 	bl	8001450 <HD44780_SetCursor>
	char str[5];
	snprintf(str, sizeof(str), "%d", (int) avgpow);
 800123a:	f107 0008 	add.w	r0, r7, #8
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <updateAvgPower+0x38>)
 8001242:	2105      	movs	r1, #5
 8001244:	f005 fc0c 	bl	8006a60 <sniprintf>
	HD44780_PrintStr(str);
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f970 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 8001252:	f000 f92f 	bl	80014b4 <HD44780_Display>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	08008fa8 	.word	0x08008fa8

08001264 <updateInstPower>:

void updateInstPower(I2C_HandleTypeDef *handle, int instpow) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	HD44780_SetCursor(17, 2);
 800126e:	2102      	movs	r1, #2
 8001270:	2011      	movs	r0, #17
 8001272:	f000 f8ed 	bl	8001450 <HD44780_SetCursor>
	char str[5];
	snprintf(str, sizeof(str), "%d", (int) instpow);
 8001276:	f107 0008 	add.w	r0, r7, #8
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <updateInstPower+0x38>)
 800127e:	2105      	movs	r1, #5
 8001280:	f005 fbee 	bl	8006a60 <sniprintf>
	HD44780_PrintStr(str);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f952 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 800128e:	f000 f911 	bl	80014b4 <HD44780_Display>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	08008fa8 	.word	0x08008fa8

080012a0 <updateMessage>:

void updateMessage(char *message) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	HD44780_SetCursor(0, 3);
 80012a8:	2103      	movs	r1, #3
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f8d0 	bl	8001450 <HD44780_SetCursor>
	HD44780_PrintStr(message);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f93e 	bl	8001532 <HD44780_PrintStr>
	HD44780_Display();
 80012b6:	f000 f8fd 	bl	80014b4 <HD44780_Display>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <SetUpDisplay>:

void SetUpDisplay(I2C_HandleTypeDef *handle) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	HAL_I2C_IsDeviceReady(handle, DEVICE_ADDR, 2, 10);
 80012cc:	230a      	movs	r3, #10
 80012ce:	2202      	movs	r2, #2
 80012d0:	214e      	movs	r1, #78	; 0x4e
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f003 fa30 	bl	8004738 <HAL_I2C_IsDeviceReady>

	HD44780_SetCursor(5, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	2005      	movs	r0, #5
 80012dc:	f000 f8b8 	bl	8001450 <HD44780_SetCursor>
	HD44780_PrintStr("|V:      |");
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <SetUpDisplay+0x4c>)
 80012e2:	f000 f926 	bl	8001532 <HD44780_PrintStr>

	HD44780_SetCursor(5, 1);
 80012e6:	2101      	movs	r1, #1
 80012e8:	2005      	movs	r0, #5
 80012ea:	f000 f8b1 	bl	8001450 <HD44780_SetCursor>
	HD44780_PrintStr("|%:      |");
 80012ee:	4809      	ldr	r0, [pc, #36]	; (8001314 <SetUpDisplay+0x50>)
 80012f0:	f000 f91f 	bl	8001532 <HD44780_PrintStr>

	HD44780_SetCursor(5, 2);
 80012f4:	2102      	movs	r1, #2
 80012f6:	2005      	movs	r0, #5
 80012f8:	f000 f8aa 	bl	8001450 <HD44780_SetCursor>
	HD44780_PrintStr("|        |");
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <SetUpDisplay+0x54>)
 80012fe:	f000 f918 	bl	8001532 <HD44780_PrintStr>

	HD44780_Display();
 8001302:	f000 f8d7 	bl	80014b4 <HD44780_Display>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	08008fac 	.word	0x08008fac
 8001314:	08008fb8 	.word	0x08008fb8
 8001318:	08008fc4 	.word	0x08008fc4

0800131c <HD44780_Init>:
		0b10011, 0b00000 };

uint8_t special2[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01001,
		0b00110, 0b00000 };

void HD44780_Init(uint8_t rows) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 8001326:	4a38      	ldr	r2, [pc, #224]	; (8001408 <HD44780_Init+0xec>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_NOBACKLIGHT;
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HD44780_Init+0xf0>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HD44780_Init+0xf4>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 8001338:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HD44780_Init+0xec>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d907      	bls.n	8001350 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HD44780_Init+0xf4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <HD44780_Init+0xf4>)
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e006      	b.n	800135e <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HD44780_Init+0xf4>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HD44780_Init+0xf4>)
 800135c:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 800135e:	f000 f985 	bl	800166c <DelayInit>
	HAL_Delay(50);
 8001362:	2032      	movs	r0, #50	; 0x32
 8001364:	f001 fa40 	bl	80027e8 <HAL_Delay>

	ExpanderWrite(dpBacklight);
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <HD44780_Init+0xf0>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f943 	bl	80015f8 <ExpanderWrite>
	HAL_Delay(1000);
 8001372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001376:	f001 fa37 	bl	80027e8 <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 800137a:	2030      	movs	r0, #48	; 0x30
 800137c:	f000 f92b 	bl	80015d6 <Write4Bits>
	DelayUS(4500);
 8001380:	f241 1094 	movw	r0, #4500	; 0x1194
 8001384:	f000 f99a 	bl	80016bc <DelayUS>

	Write4Bits(0x03 << 4);
 8001388:	2030      	movs	r0, #48	; 0x30
 800138a:	f000 f924 	bl	80015d6 <Write4Bits>
	DelayUS(4500);
 800138e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001392:	f000 f993 	bl	80016bc <DelayUS>

	Write4Bits(0x03 << 4);
 8001396:	2030      	movs	r0, #48	; 0x30
 8001398:	f000 f91d 	bl	80015d6 <Write4Bits>
	DelayUS(4500);
 800139c:	f241 1094 	movw	r0, #4500	; 0x1194
 80013a0:	f000 f98c 	bl	80016bc <DelayUS>

	Write4Bits(0x02 << 4);
 80013a4:	2020      	movs	r0, #32
 80013a6:	f000 f916 	bl	80015d6 <Write4Bits>
	DelayUS(100);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f000 f986 	bl	80016bc <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HD44780_Init+0xf4>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f8ce 	bl	800155c <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HD44780_Init+0xf8>)
 80013c2:	2204      	movs	r2, #4
 80013c4:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 80013c6:	f000 f875 	bl	80014b4 <HD44780_Display>
	HD44780_Clear();
 80013ca:	f000 f82b 	bl	8001424 <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HD44780_Init+0xfc>)
 80013d0:	2202      	movs	r2, #2
 80013d2:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HD44780_Init+0xfc>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f8bc 	bl	800155c <SendCommand>
	DelayUS(4500);
 80013e4:	f241 1094 	movw	r0, #4500	; 0x1194
 80013e8:	f000 f968 	bl	80016bc <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 80013ec:	490b      	ldr	r1, [pc, #44]	; (800141c <HD44780_Init+0x100>)
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f876 	bl	80014e0 <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 80013f4:	490a      	ldr	r1, [pc, #40]	; (8001420 <HD44780_Init+0x104>)
 80013f6:	2001      	movs	r0, #1
 80013f8:	f000 f872 	bl	80014e0 <HD44780_CreateSpecialChar>

	HD44780_Home();
 80013fc:	f000 f81d 	bl	800143a <HD44780_Home>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000022f 	.word	0x2000022f
 800140c:	20000230 	.word	0x20000230
 8001410:	2000022c 	.word	0x2000022c
 8001414:	2000022d 	.word	0x2000022d
 8001418:	2000022e 	.word	0x2000022e
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008

08001424 <HD44780_Clear>:

void HD44780_Clear() {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 8001428:	2001      	movs	r0, #1
 800142a:	f000 f897 	bl	800155c <SendCommand>
	DelayUS(2000);
 800142e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001432:	f000 f943 	bl	80016bc <DelayUS>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}

0800143a <HD44780_Home>:

void HD44780_Home() {
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 800143e:	2002      	movs	r0, #2
 8001440:	f000 f88c 	bl	800155c <SendCommand>
	DelayUS(2000);
 8001444:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001448:	f000 f938 	bl	80016bc <DelayUS>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	460a      	mov	r2, r1
 800145a:	71fb      	strb	r3, [r7, #7]
 800145c:	4613      	mov	r3, r2
 800145e:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HD44780_SetCursor+0x5c>)
 8001462:	f107 0408 	add.w	r4, r7, #8
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HD44780_SetCursor+0x60>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	79ba      	ldrb	r2, [r7, #6]
 8001472:	429a      	cmp	r2, r3
 8001474:	d303      	bcc.n	800147e <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HD44780_SetCursor+0x60>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3b01      	subs	r3, #1
 800147c:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3318      	adds	r3, #24
 8001484:	443b      	add	r3, r7
 8001486:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4413      	add	r3, r2
 8001490:	b2db      	uxtb	r3, r3
 8001492:	b25b      	sxtb	r3, r3
 8001494:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001498:	b25b      	sxtb	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f85d 	bl	800155c <SendCommand>
}
 80014a2:	bf00      	nop
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	08008fd0 	.word	0x08008fd0
 80014b0:	2000022f 	.word	0x2000022f

080014b4 <HD44780_Display>:
void HD44780_NoDisplay() {
	dpControl &= ~LCD_DISPLAYON;
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HD44780_Display+0x28>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HD44780_Display+0x28>)
 80014c4:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HD44780_Display+0x28>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f843 	bl	800155c <SendCommand>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000022d 	.word	0x2000022d

080014e0 <HD44780_CreateSpecialChar>:
void HD44780_NoAutoScroll(void) {
	dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
	SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f82a 	bl	800155c <SendCommand>
	for (int i = 0; i < 8; i++) {
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e009      	b.n	8001522 <HD44780_CreateSpecialChar+0x42>
		SendChar(charmap[i]);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f82e 	bl	8001578 <SendChar>
	for (int i = 0; i < 8; i++) {
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b07      	cmp	r3, #7
 8001526:	ddf2      	ble.n	800150e <HD44780_CreateSpecialChar+0x2e>
	}
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HD44780_PrintStr>:

void HD44780_LoadCustomCharacter(uint8_t char_num, uint8_t *rows) {
	HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[]) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	while (*c)
 800153a:	e006      	b.n	800154a <HD44780_PrintStr+0x18>
		SendChar(*c++);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f817 	bl	8001578 <SendChar>
	while (*c)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f4      	bne.n	800153c <HD44780_PrintStr+0xa>
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <SendCommand>:
void HD44780_Backlight(void) {
	dpBacklight = LCD_BACKLIGHT;
	ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f812 	bl	8001594 <Send>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <SendChar>:

static void SendChar(uint8_t ch) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2101      	movs	r1, #1
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f804 	bl	8001594 <Send>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <Send>:

static void Send(uint8_t value, uint8_t mode) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	460a      	mov	r2, r1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f023 030f 	bic.w	r3, r3, #15
 80015aa:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	79bb      	ldrb	r3, [r7, #6]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f80b 	bl	80015d6 <Write4Bits>
	Write4Bits((lownib) | mode);
 80015c0:	7bba      	ldrb	r2, [r7, #14]
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f804 	bl	80015d6 <Write4Bits>
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <Write4Bits>:

static void Write4Bits(uint8_t value) {
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f808 	bl	80015f8 <ExpanderWrite>
	PulseEnable(value);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f820 	bl	8001630 <PulseEnable>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <ExpanderWrite+0x30>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4313      	orrs	r3, r2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 800160e:	f107 020f 	add.w	r2, r7, #15
 8001612:	230a      	movs	r3, #10
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	214e      	movs	r1, #78	; 0x4e
 800161a:	4804      	ldr	r0, [pc, #16]	; (800162c <ExpanderWrite+0x34>)
 800161c:	f002 ff8e 	bl	800453c <HAL_I2C_Master_Transmit>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000230 	.word	0x20000230
 800162c:	2000028c 	.word	0x2000028c

08001630 <PulseEnable>:

static void PulseEnable(uint8_t _data) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ffd8 	bl	80015f8 <ExpanderWrite>
	DelayUS(20);
 8001648:	2014      	movs	r0, #20
 800164a:	f000 f837 	bl	80016bc <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ffce 	bl	80015f8 <ExpanderWrite>
	DelayUS(20);
 800165c:	2014      	movs	r0, #20
 800165e:	f000 f82d 	bl	80016bc <DelayUS>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <DelayInit>:

static void DelayInit(void) {
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <DelayInit+0x48>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <DelayInit+0x48>)
 8001676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167a:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <DelayInit+0x48>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <DelayInit+0x48>)
 8001682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001686:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <DelayInit+0x4c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <DelayInit+0x4c>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <DelayInit+0x4c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <DelayInit+0x4c>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <DelayInit+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80016a6:	bf00      	nop
	__ASM volatile ("NOP");
 80016a8:	bf00      	nop
	__ASM volatile ("NOP");
 80016aa:	bf00      	nop
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	e000edf0 	.word	0xe000edf0
 80016b8:	e0001000 	.word	0xe0001000

080016bc <DelayUS>:

static void DelayUS(uint32_t us) {
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <DelayUS+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <DelayUS+0x44>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0c9a      	lsrs	r2, r3, #18
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <DelayUS+0x48>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <DelayUS+0x48>)
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f6      	bhi.n	80016de <DelayUS+0x22>
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000034 	.word	0x20000034
 8001700:	431bde83 	.word	0x431bde83
 8001704:	e0001000 	.word	0xe0001000

08001708 <CAN_Transmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CAN_Transmit(uint32_t id, uint8_t *data, uint8_t len) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	71fb      	strb	r3, [r7, #7]
	/*uint32_t mailbox;
	 CAN_TxHeaderTypeDef txHeader;*/

	txHeader.StdId = id;
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <CAN_Transmit+0x50>)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6013      	str	r3, [r2, #0]
	txHeader.ExtId = 0x00;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <CAN_Transmit+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	605a      	str	r2, [r3, #4]
	txHeader.RTR = CAN_RTR_DATA;
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <CAN_Transmit+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
	txHeader.IDE = CAN_ID_STD;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <CAN_Transmit+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
	txHeader.DLC = len;
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	4a09      	ldr	r2, [pc, #36]	; (8001758 <CAN_Transmit+0x50>)
 8001732:	6113      	str	r3, [r2, #16]
	txHeader.TransmitGlobalTime = DISABLE;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <CAN_Transmit+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &mailbox) != HAL_OK) {
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <CAN_Transmit+0x54>)
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	4906      	ldr	r1, [pc, #24]	; (8001758 <CAN_Transmit+0x50>)
 8001740:	4807      	ldr	r0, [pc, #28]	; (8001760 <CAN_Transmit+0x58>)
 8001742:	f001 fed4 	bl	80034ee <HAL_CAN_AddTxMessage>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <CAN_Transmit+0x48>
		Error_Handler();
 800174c:	f000 fd6e 	bl	800222c <Error_Handler>
	}
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000388 	.word	0x20000388
 800175c:	20000384 	.word	0x20000384
 8001760:	20000264 	.word	0x20000264

08001764 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	countCAN++;
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001776:	801a      	strh	r2, [r3, #0]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800177c:	2100      	movs	r1, #0
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f001 ff84 	bl	800368c <HAL_CAN_GetRxMessage>
	uint32_t canID = RxHeader.StdId;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
	switch (canID) {
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f240 4203 	movw	r2, #1027	; 0x403
 8001790:	4293      	cmp	r3, r2
 8001792:	d003      	beq.n	800179c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001798:	4293      	cmp	r3, r2
				+ ((uint32_t) RxData[1] << 8) + ((uint32_t) RxData[0]);
		break;
		// Temperatures
	case 0x18B428F4: //Electric cart temps id
		//countCANf++;
		break;
 800179a:	e020      	b.n	80017de <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		veh_spd = ((uint32_t) RxData[7] << 24) + ((uint32_t) RxData[6] << 16)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800179e:	79db      	ldrb	r3, [r3, #7]
 80017a0:	061a      	lsls	r2, r3, #24
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017a4:	799b      	ldrb	r3, [r3, #6]
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	441a      	add	r2, r3
				+ ((uint32_t) RxData[5] << 8) + ((uint32_t) RxData[4]);
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017ac:	795b      	ldrb	r3, [r3, #5]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4413      	add	r3, r2
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017b4:	7912      	ldrb	r2, [r2, #4]
 80017b6:	4413      	add	r3, r2
		veh_spd = ((uint32_t) RxData[7] << 24) + ((uint32_t) RxData[6] << 16)
 80017b8:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80017ba:	6013      	str	r3, [r2, #0]
		mot_spd = ((uint32_t) RxData[3] << 24) + ((uint32_t) RxData[2] << 16)
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017be:	78db      	ldrb	r3, [r3, #3]
 80017c0:	061a      	lsls	r2, r3, #24
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017c4:	789b      	ldrb	r3, [r3, #2]
 80017c6:	041b      	lsls	r3, r3, #16
 80017c8:	441a      	add	r2, r3
				+ ((uint32_t) RxData[1] << 8) + ((uint32_t) RxData[0]);
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	4413      	add	r3, r2
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	4413      	add	r3, r2
		mot_spd = ((uint32_t) RxData[3] << 24) + ((uint32_t) RxData[2] << 16)
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80017da:	6013      	str	r3, [r2, #0]
		break;
 80017dc:	bf00      	nop
	}
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200003c4 	.word	0x200003c4
 80017ec:	200003bc 	.word	0x200003bc
 80017f0:	200003a0 	.word	0x200003a0
 80017f4:	18b428f4 	.word	0x18b428f4
 80017f8:	200003f4 	.word	0x200003f4
 80017fc:	200003f8 	.word	0x200003f8

08001800 <HAL_TIM_PeriodElapsedCallback>:

//Timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	//100ms
	if (htim == &htim3) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4aa5      	ldr	r2, [pc, #660]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	f040 81bb 	bne.w	8001b88 <HAL_TIM_PeriodElapsedCallback+0x388>
		count++;
 8001812:	4ba4      	ldr	r3, [pc, #656]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4ba2      	ldr	r3, [pc, #648]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800181c:	701a      	strb	r2, [r3, #0]
		//next = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
		//Auxiliary
		head = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)
 800181e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001822:	48a1      	ldr	r0, [pc, #644]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001824:	f002 fd2e 	bl	8004284 <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
				|| HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800182a:	2b00      	cmp	r3, #0
 800182c:	d107      	bne.n	800183e <HAL_TIM_PeriodElapsedCallback+0x3e>
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	489d      	ldr	r0, [pc, #628]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001834:	f002 fd26 	bl	8004284 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x42>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x44>
 8001842:	2300      	movs	r3, #0
		head = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b99      	ldr	r3, [pc, #612]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001848:	701a      	strb	r2, [r3, #0]
		cam = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 800184a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184e:	4898      	ldr	r0, [pc, #608]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001850:	f002 fd18 	bl	8004284 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	4b96      	ldr	r3, [pc, #600]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800185a:	701a      	strb	r2, [r3, #0]
		tail = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)
 800185c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001860:	4891      	ldr	r0, [pc, #580]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001862:	f002 fd0f 	bl	8004284 <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
				|| HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_TIM_PeriodElapsedCallback+0x7c>
 800186c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001870:	488d      	ldr	r0, [pc, #564]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001872:	f002 fd07 	bl	8004284 <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x80>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x82>
 8001880:	2300      	movs	r3, #0
		tail = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b8c      	ldr	r3, [pc, #560]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001886:	701a      	strb	r2, [r3, #0]
		horn = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8001888:	2108      	movs	r1, #8
 800188a:	4887      	ldr	r0, [pc, #540]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800188c:	f002 fcfa 	bl	8004284 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b89      	ldr	r3, [pc, #548]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001896:	701a      	strb	r2, [r3, #0]
		breakl = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); //check pedal !!!!!!!
 8001898:	2102      	movs	r1, #2
 800189a:	4883      	ldr	r0, [pc, #524]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800189c:	f002 fcf2 	bl	8004284 <HAL_GPIO_ReadPin>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b86      	ldr	r3, [pc, #536]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80018a6:	701a      	strb	r2, [r3, #0]
		fan = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80018a8:	2110      	movs	r1, #16
 80018aa:	487f      	ldr	r0, [pc, #508]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018ac:	f002 fcea 	bl	8004284 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80018b6:	701a      	strb	r2, [r3, #0]
		blink_r = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80018b8:	2120      	movs	r1, #32
 80018ba:	487b      	ldr	r0, [pc, #492]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018bc:	f002 fce2 	bl	8004284 <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b80      	ldr	r3, [pc, #512]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018c6:	701a      	strb	r2, [r3, #0]
		blink_l = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80018c8:	2140      	movs	r1, #64	; 0x40
 80018ca:	4877      	ldr	r0, [pc, #476]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018cc:	f002 fcda 	bl	8004284 <HAL_GPIO_ReadPin>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b7d      	ldr	r3, [pc, #500]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018d6:	701a      	strb	r2, [r3, #0]

		Aux_State = (head << 7) | (cam << 6) | (tail << 5) | (horn << 4)
 80018d8:	4b74      	ldr	r3, [pc, #464]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	01db      	lsls	r3, r3, #7
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	4b74      	ldr	r3, [pc, #464]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b25a      	sxtb	r2, r3
 80018ec:	4b72      	ldr	r3, [pc, #456]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	015b      	lsls	r3, r3, #5
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b25a      	sxtb	r2, r3
 80018f8:	4b70      	ldr	r3, [pc, #448]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b25a      	sxtb	r2, r3
				| (breakl << 3) | (fan << 2) | (blink_r << 1) | (blink_l << 0);
 8001904:	4b6e      	ldr	r3, [pc, #440]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	b25b      	sxtb	r3, r3
 800190c:	4313      	orrs	r3, r2
 800190e:	b25a      	sxtb	r2, r3
 8001910:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b25a      	sxtb	r2, r3
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	b25b      	sxtb	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b25a      	sxtb	r2, r3
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b25b      	sxtb	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b25b      	sxtb	r3, r3
 8001932:	b2da      	uxtb	r2, r3
		Aux_State = (head << 7) | (cam << 6) | (tail << 5) | (horn << 4)
 8001934:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001936:	701a      	strb	r2, [r3, #0]

		CAN_Transmit(0x701, &Aux_State, 1);
 8001938:	2201      	movs	r2, #1
 800193a:	4965      	ldr	r1, [pc, #404]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800193c:	f240 7001 	movw	r0, #1793	; 0x701
 8001940:	f7ff fee2 	bl	8001708 <CAN_Transmit>

		//Inv
		power_on = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001948:	4862      	ldr	r0, [pc, #392]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800194a:	f002 fc9b 	bl	8004284 <HAL_GPIO_ReadPin>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001954:	701a      	strb	r2, [r3, #0]
		forward = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8001956:	2101      	movs	r1, #1
 8001958:	4855      	ldr	r0, [pc, #340]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800195a:	f002 fc93 	bl	8004284 <HAL_GPIO_ReadPin>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001964:	701a      	strb	r2, [r3, #0]
		reverse = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001966:	2102      	movs	r1, #2
 8001968:	4851      	ldr	r0, [pc, #324]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800196a:	f002 fc8b 	bl	8004284 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001974:	701a      	strb	r2, [r3, #0]
		//////////////mech_brake_pedal_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);

		// Cruise control
		brake_swap = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8001976:	2180      	movs	r1, #128	; 0x80
 8001978:	484d      	ldr	r0, [pc, #308]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800197a:	f002 fc83 	bl	8004284 <HAL_GPIO_ReadPin>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001984:	701a      	strb	r2, [r3, #0]
		mech_brake_pedal_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8001986:	2110      	movs	r1, #16
 8001988:	4852      	ldr	r0, [pc, #328]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800198a:	f002 fc7b 	bl	8004284 <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001994:	701a      	strb	r2, [r3, #0]

		//Start ADC conversion
		HAL_ADC_Start(&hadc1);
 8001996:	4855      	ldr	r0, [pc, #340]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001998:	f001 f822 	bl	80029e0 <HAL_ADC_Start>
		// Wait for ADC conversion to complete
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	4852      	ldr	r0, [pc, #328]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019a2:	f001 f8f7 	bl	8002b94 <HAL_ADC_PollForConversion>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d106      	bne.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x1ba>
			adcValue = HAL_ADC_GetValue(&hadc1);
 80019ac:	484f      	ldr	r0, [pc, #316]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019ae:	f001 f9f7 	bl	8002da0 <HAL_ADC_GetValue>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b4e      	ldr	r3, [pc, #312]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019b8:	801a      	strh	r2, [r3, #0]
		}
		//Stop ADC conversion
		HAL_ADC_Stop(&hadc1);
 80019ba:	484c      	ldr	r0, [pc, #304]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019bc:	f001 f8be 	bl	8002b3c <HAL_ADC_Stop>

		// MinMax value
		adcValue = MIN(adcValue, 3530);
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	f640 52ca 	movw	r2, #3530	; 0xdca
 80019c8:	4293      	cmp	r3, r2
 80019ca:	bf28      	it	cs
 80019cc:	4613      	movcs	r3, r2
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019d2:	801a      	strh	r2, [r3, #0]
		adcValue = MAX(adcValue, 200);
 80019d4:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	2bc8      	cmp	r3, #200	; 0xc8
 80019da:	bf38      	it	cc
 80019dc:	23c8      	movcc	r3, #200	; 0xc8
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019e2:	801a      	strh	r2, [r3, #0]

		//Getting out of the cruise control on user input
		if (mech_brake_pedal_state || brake_swap) //||adcValue>250
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d103      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 80019ec:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x1fa>
				{
			cruise_on = 0;
 80019f4:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
		}
		//delay the turning off of the cruise from pressing the pedal with two secs so
		//after initially engaging it, it wont turn off immidiately while the driver
		//lifts off the foot.
		if (cruise_on && adcValue > 250) {
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d013      	beq.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x22a>
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	2bfa      	cmp	r3, #250	; 0xfa
 8001a08:	d90f      	bls.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x22a>
			pedal_count++;
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a14:	701a      	strb	r2, [r3, #0]
			if (pedal_count == 10) {
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b0a      	cmp	r3, #10
 8001a1c:	d105      	bne.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x22a>
				cruise_on = 0;
 8001a1e:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
				pedal_count = 0;
 8001a24:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
			}
		}

		//deciding the rpm and current reference
		if (power_on) {
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d074      	beq.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x31c>
			current_ref = (float) (adcValue - 200) / 3530.0f / 10;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	3bc8      	subs	r3, #200	; 0xc8
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f8df 	bl	8000bfc <__aeabi_i2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	492e      	ldr	r1, [pc, #184]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f9e2 	bl	8000e0c <__aeabi_fdiv>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	492d      	ldr	r1, [pc, #180]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9dd 	bl	8000e0c <__aeabi_fdiv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001a58:	601a      	str	r2, [r3, #0]
			if (forward) {
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d012      	beq.n	8001a88 <HAL_TIM_PeriodElapsedCallback+0x288>
				if (cruise_on) {
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_TIM_PeriodElapsedCallback+0x282>
					//add min-max values!!!!!!!!!!!!!!!!!!!!!!!!!!!! 30-130 for example
					rpm_ref = cruise_speed;
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f8c0 	bl	8000bf4 <__aeabi_ui2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a25      	ldr	r2, [pc, #148]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001a78:	6013      	str	r3, [r2, #0]
					current_ref = 0.05;
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001a7c:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e002      	b.n	8001a88 <HAL_TIM_PeriodElapsedCallback+0x288>
				} else {
					rpm_ref = 2000;
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001a84:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001a86:	601a      	str	r2, [r3, #0]
				}
			}
			if (reverse) {
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d049      	beq.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x324>
				cruise_on = 0;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
				rpm_ref = -2000;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e042      	b.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x324>
 8001a9e:	bf00      	nop
 8001aa0:	200002e0 	.word	0x200002e0
 8001aa4:	200003d1 	.word	0x200003d1
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	200003c9 	.word	0x200003c9
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	200003ca 	.word	0x200003ca
 8001ab8:	200003cb 	.word	0x200003cb
 8001abc:	200003cc 	.word	0x200003cc
 8001ac0:	200003cd 	.word	0x200003cd
 8001ac4:	200003ce 	.word	0x200003ce
 8001ac8:	200003cf 	.word	0x200003cf
 8001acc:	200003d0 	.word	0x200003d0
 8001ad0:	200003c8 	.word	0x200003c8
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	200003d2 	.word	0x200003d2
 8001adc:	200003d3 	.word	0x200003d3
 8001ae0:	200003d4 	.word	0x200003d4
 8001ae4:	200003d5 	.word	0x200003d5
 8001ae8:	200003e1 	.word	0x200003e1
 8001aec:	20000234 	.word	0x20000234
 8001af0:	200003c6 	.word	0x200003c6
 8001af4:	200003d9 	.word	0x200003d9
 8001af8:	200003e0 	.word	0x200003e0
 8001afc:	455ca000 	.word	0x455ca000
 8001b00:	41200000 	.word	0x41200000
 8001b04:	200003e4 	.word	0x200003e4
 8001b08:	200003dc 	.word	0x200003dc
 8001b0c:	200003e8 	.word	0x200003e8
 8001b10:	3d4ccccd 	.word	0x3d4ccccd
 8001b14:	44fa0000 	.word	0x44fa0000
 8001b18:	c4fa0000 	.word	0xc4fa0000
			}

		} else // if (power_on==0)
		{
			current_ref = 0;
 8001b1c:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
		}

		//send current and rpm refrence to the inverter
		// Copy 'current' bytes in specified order
		uint32_t current_bits = *((uint32_t*) &current_ref);
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
		message[4] = (current_bits >> 0) & 0xFF;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b4f      	ldr	r3, [pc, #316]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b30:	711a      	strb	r2, [r3, #4]
		message[5] = (current_bits >> 8) & 0xFF;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b3a:	715a      	strb	r2, [r3, #5]
		message[6] = (current_bits >> 16) & 0xFF;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b44:	719a      	strb	r2, [r3, #6]
		message[7] = (current_bits >> 24) & 0xFF;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	0e1b      	lsrs	r3, r3, #24
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b4e:	71da      	strb	r2, [r3, #7]

		// Copy 'rpm' bytes in specified order
		uint32_t rpm_bits = *((uint32_t*) &rpm_ref);
 8001b50:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60bb      	str	r3, [r7, #8]
		message[0] = (rpm_bits >> 0) & 0xFF;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b5c:	701a      	strb	r2, [r3, #0]
		message[1] = (rpm_bits >> 8) & 0xFF;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b66:	705a      	strb	r2, [r3, #1]
		message[2] = (rpm_bits >> 16) & 0xFF;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	0c1b      	lsrs	r3, r3, #16
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b70:	709a      	strb	r2, [r3, #2]
		message[3] = (rpm_bits >> 24) & 0xFF;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	0e1b      	lsrs	r3, r3, #24
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b7a:	70da      	strb	r2, [r3, #3]

		CAN_Transmit(0x501, message, 8);
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	493b      	ldr	r1, [pc, #236]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001b80:	f240 5001 	movw	r0, #1281	; 0x501
 8001b84:	f7ff fdc0 	bl	8001708 <CAN_Transmit>
	}
	//1sec
	if (htim == &htim4) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3a      	ldr	r2, [pc, #232]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d166      	bne.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x45e>
		//1 sec is better for the cruise_on becouse of the debouncing.
		cruise_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8001b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b94:	4838      	ldr	r0, [pc, #224]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001b96:	f002 fb75 	bl	8004284 <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001ba0:	701a      	strb	r2, [r3, #0]
		if (cruise_button_state == 1) {
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0x3bc>
			cruise_speed = *p_mot_spd;
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fa3d 	bl	8001030 <__aeabi_f2uiz>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001bba:	6013      	str	r3, [r2, #0]
		}
		//Deciding if the cruise control should be on or off
		if (cruise_button_state) {
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d018      	beq.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
			if (cruise_on) {
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_TIM_PeriodElapsedCallback+0x3d4>
				cruise_on = 0;
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e010      	b.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
			} else if (!cruise_on&&*p_mot_spd>200) {//////not final value
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10c      	bne.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	492a      	ldr	r1, [pc, #168]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fa19 	bl	800101c <__aeabi_fcmpgt>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
				cruise_on = 1;
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
			}
		}
		cruise_down = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	481f      	ldr	r0, [pc, #124]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001bfa:	f002 fb43 	bl	8004284 <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001c04:	701a      	strb	r2, [r3, #0]
		cruise_up = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8001c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0a:	481b      	ldr	r0, [pc, #108]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001c0c:	f002 fb3a 	bl	8004284 <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8001c16:	701a      	strb	r2, [r3, #0]
		/////!!!!!!!!!!!!!!!!!!!!!!!!!not final step(the 10 value)
		if (cruise_on && cruise_up && cruise_speed < 700) {
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00d      	beq.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x43c>
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x43c>
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001c30:	d204      	bcs.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x43c>
			cruise_speed += 10;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	330a      	adds	r3, #10
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001c3a:	6013      	str	r3, [r2, #0]
		}
		if (cruise_on && cruise_down && cruise_speed > 200) {
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x45e>
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x45e>
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2bc8      	cmp	r3, #200	; 0xc8
 8001c52:	d904      	bls.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x45e>
			cruise_speed -= 10;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3b0a      	subs	r3, #10
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8001c5c:	6013      	str	r3, [r2, #0]
		}

	}
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200003e4 	.word	0x200003e4
 8001c6c:	200003ec 	.word	0x200003ec
 8001c70:	200003e8 	.word	0x200003e8
 8001c74:	20000328 	.word	0x20000328
 8001c78:	40010800 	.word	0x40010800
 8001c7c:	200003d8 	.word	0x200003d8
 8001c80:	20000030 	.word	0x20000030
 8001c84:	200003dc 	.word	0x200003dc
 8001c88:	200003d9 	.word	0x200003d9
 8001c8c:	43480000 	.word	0x43480000
 8001c90:	200003d7 	.word	0x200003d7
 8001c94:	200003d6 	.word	0x200003d6

08001c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	countCAN = 0;
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <main+0xfc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
	message[0] = 0;
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <main+0x100>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
	adcValue = 0;
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <main+0x104>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	801a      	strh	r2, [r3, #0]
	Aux_State = 0;
 8001cae:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <main+0x108>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
	cruise_speed = 0;
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <main+0x10c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
	count++;
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <main+0x110>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <main+0x110>)
 8001cc4:	701a      	strb	r2, [r3, #0]
	current_ref = 0;
 8001cc6:	4b39      	ldr	r3, [pc, #228]	; (8001dac <main+0x114>)
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cce:	f000 fd29 	bl	8002724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd2:	f000 f887 	bl	8001de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd6:	f000 fa3b 	bl	8002150 <MX_GPIO_Init>
  MX_CAN_Init();
 8001cda:	f000 f91d 	bl	8001f18 <MX_CAN_Init>
  MX_ADC1_Init();
 8001cde:	f000 f8dd 	bl	8001e9c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001ce2:	f000 f999 	bl	8002018 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001ce6:	f000 f969 	bl	8001fbc <MX_I2C1_Init>
  MX_TIM4_Init();
 8001cea:	f000 f9e3 	bl	80020b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim3);
 8001cee:	4830      	ldr	r0, [pc, #192]	; (8001db0 <main+0x118>)
 8001cf0:	f003 fe76 	bl	80059e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001cf4:	482f      	ldr	r0, [pc, #188]	; (8001db4 <main+0x11c>)
 8001cf6:	f003 fe73 	bl	80059e0 <HAL_TIM_Base_Start_IT>

	HAL_CAN_Start(&hcan);
 8001cfa:	482f      	ldr	r0, [pc, #188]	; (8001db8 <main+0x120>)
 8001cfc:	f001 fbb3 	bl	8003466 <HAL_CAN_Start>
	HAL_Delay(50);
 8001d00:	2032      	movs	r0, #50	; 0x32
 8001d02:	f000 fd71 	bl	80027e8 <HAL_Delay>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001d06:	2102      	movs	r1, #2
 8001d08:	482b      	ldr	r0, [pc, #172]	; (8001db8 <main+0x120>)
 8001d0a:	f001 fde0 	bl	80038ce <HAL_CAN_ActivateNotification>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <main+0x80>
			!= HAL_OK) {
		Error_Handler();
 8001d14:	f000 fa8a 	bl	800222c <Error_Handler>
	}

	/* Initialize */
	HD44780_Init(4);
 8001d18:	2004      	movs	r0, #4
 8001d1a:	f7ff faff 	bl	800131c <HD44780_Init>

	/* Clear buffer */
	HD44780_Clear();
 8001d1e:	f7ff fb81 	bl	8001424 <HD44780_Clear>

	SetUpDisplay(&hi2c1);
 8001d22:	4826      	ldr	r0, [pc, #152]	; (8001dbc <main+0x124>)
 8001d24:	f7ff face 	bl	80012c4 <SetUpDisplay>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		updateTempsMin(&hi2c1, tempmin);
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <main+0x128>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4823      	ldr	r0, [pc, #140]	; (8001dbc <main+0x124>)
 8001d30:	f7ff f99e 	bl	8001070 <updateTempsMin>
		updateTempsMax(&hi2c1, tempmax);
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <main+0x12c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4820      	ldr	r0, [pc, #128]	; (8001dbc <main+0x124>)
 8001d3c:	f7ff f9bc 	bl	80010b8 <updateTempsMax>
		updateHighVoltage(&hi2c1, highvol);
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <main+0x130>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	481d      	ldr	r0, [pc, #116]	; (8001dbc <main+0x124>)
 8001d48:	f7ff f9da 	bl	8001100 <updateHighVoltage>
		updateLowVoltage(&hi2c1, lowvol);
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <main+0x134>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	481a      	ldr	r0, [pc, #104]	; (8001dbc <main+0x124>)
 8001d54:	f7ff f9f8 	bl	8001148 <updateLowVoltage>
		updateSpeed(&hi2c1, *p_veh_spd);
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <main+0x138>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4816      	ldr	r0, [pc, #88]	; (8001dbc <main+0x124>)
 8001d62:	f7ff fa15 	bl	8001190 <updateSpeed>
		updateSOC(&hi2c1, soc);
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <main+0x13c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4813      	ldr	r0, [pc, #76]	; (8001dbc <main+0x124>)
 8001d6e:	f7ff fa3d 	bl	80011ec <updateSOC>
		updateAvgPower(&hi2c1, avgpow);
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <main+0x140>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4810      	ldr	r0, [pc, #64]	; (8001dbc <main+0x124>)
 8001d7a:	f7ff fa55 	bl	8001228 <updateAvgPower>
		updateInstPower(&hi2c1, instpow);
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <main+0x144>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <main+0x124>)
 8001d86:	f7ff fa6d 	bl	8001264 <updateInstPower>
		updateMessage((char*) &msg);
 8001d8a:	4815      	ldr	r0, [pc, #84]	; (8001de0 <main+0x148>)
 8001d8c:	f7ff fa88 	bl	80012a0 <updateMessage>
		updateTempsMin(&hi2c1, tempmin);
 8001d90:	e7ca      	b.n	8001d28 <main+0x90>
 8001d92:	bf00      	nop
 8001d94:	200003c4 	.word	0x200003c4
 8001d98:	200003ec 	.word	0x200003ec
 8001d9c:	200003c6 	.word	0x200003c6
 8001da0:	200003c8 	.word	0x200003c8
 8001da4:	200003dc 	.word	0x200003dc
 8001da8:	200003d1 	.word	0x200003d1
 8001dac:	200003e4 	.word	0x200003e4
 8001db0:	200002e0 	.word	0x200002e0
 8001db4:	20000328 	.word	0x20000328
 8001db8:	20000264 	.word	0x20000264
 8001dbc:	2000028c 	.word	0x2000028c
 8001dc0:	20000010 	.word	0x20000010
 8001dc4:	20000014 	.word	0x20000014
 8001dc8:	20000024 	.word	0x20000024
 8001dcc:	20000028 	.word	0x20000028
 8001dd0:	2000002c 	.word	0x2000002c
 8001dd4:	20000018 	.word	0x20000018
 8001dd8:	2000001c 	.word	0x2000001c
 8001ddc:	20000020 	.word	0x20000020
 8001de0:	20000370 	.word	0x20000370

08001de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b094      	sub	sp, #80	; 0x50
 8001de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	2228      	movs	r2, #40	; 0x28
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 f9cc 	bl	8006190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e14:	2301      	movs	r3, #1
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e22:	2301      	movs	r3, #1
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e26:	2302      	movs	r3, #2
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 f804 	bl	8004e48 <HAL_RCC_OscConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e46:	f000 f9f1 	bl	800222c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2102      	movs	r1, #2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fa70 	bl	800534c <HAL_RCC_ClockConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e72:	f000 f9db 	bl	800222c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e76:	2302      	movs	r3, #2
 8001e78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 fbf0 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001e8e:	f000 f9cd 	bl	800222c <Error_Handler>
  }
}
 8001e92:	bf00      	nop
 8001e94:	3750      	adds	r7, #80	; 0x50
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001eae:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <MX_ADC1_Init+0x78>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001ec6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001eca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001eda:	f000 fca9 	bl	8002830 <HAL_ADC_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ee4:	f000 f9a2 	bl	800222c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <MX_ADC1_Init+0x74>)
 8001efa:	f000 ff5d 	bl	8002db8 <HAL_ADC_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001f04:	f000 f992 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000234 	.word	0x20000234
 8001f14:	40012400 	.word	0x40012400

08001f18 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f20:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <MX_CAN_Init+0xa0>)
 8001f22:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f26:	2208      	movs	r2, #8
 8001f28:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f38:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f3c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f44:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001f6c:	f001 f8b7 	bl	80030de <HAL_CAN_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001f76:	f000 f959 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;
 8001f7e:	230a      	movs	r3, #10
 8001f80:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0; //this tells what to compare the incoming data to
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0; //this tells which bits to compare
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <MX_CAN_Init+0x9c>)
 8001fa8:	f001 f994 	bl	80032d4 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000264 	.word	0x20000264
 8001fb8:	40006400 	.word	0x40006400

08001fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_I2C1_Init+0x50>)
 8001fc2:	4a13      	ldr	r2, [pc, #76]	; (8002010 <MX_I2C1_Init+0x54>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_I2C1_Init+0x50>)
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_I2C1_Init+0x58>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <MX_I2C1_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_I2C1_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_I2C1_Init+0x50>)
 8001fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <MX_I2C1_Init+0x50>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_I2C1_Init+0x50>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <MX_I2C1_Init+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_I2C1_Init+0x50>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <MX_I2C1_Init+0x50>)
 8001ffa:	f002 f95b 	bl	80042b4 <HAL_I2C_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002004:	f000 f912 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000028c 	.word	0x2000028c
 8002010:	40005400 	.word	0x40005400
 8002014:	000186a0 	.word	0x000186a0

08002018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	463b      	mov	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <MX_TIM3_Init+0x94>)
 8002036:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <MX_TIM3_Init+0x98>)
 8002038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <MX_TIM3_Init+0x94>)
 800203c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002040:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_TIM3_Init+0x94>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <MX_TIM3_Init+0x94>)
 800204a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800204e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <MX_TIM3_Init+0x94>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_TIM3_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800205c:	4813      	ldr	r0, [pc, #76]	; (80020ac <MX_TIM3_Init+0x94>)
 800205e:	f003 fc6f 	bl	8005940 <HAL_TIM_Base_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002068:	f000 f8e0 	bl	800222c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002070:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	4619      	mov	r1, r3
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <MX_TIM3_Init+0x94>)
 800207a:	f003 fe0b 	bl	8005c94 <HAL_TIM_ConfigClockSource>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002084:	f000 f8d2 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002090:	463b      	mov	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_TIM3_Init+0x94>)
 8002096:	f003 ffe1 	bl	800605c <HAL_TIMEx_MasterConfigSynchronization>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020a0:	f000 f8c4 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200002e0 	.word	0x200002e0
 80020b0:	40000400 	.word	0x40000400

080020b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c8:	463b      	mov	r3, r7
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <MX_TIM4_Init+0x94>)
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <MX_TIM4_Init+0x98>)
 80020d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_TIM4_Init+0x94>)
 80020d8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80020dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <MX_TIM4_Init+0x94>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <MX_TIM4_Init+0x94>)
 80020e6:	f241 3287 	movw	r2, #4999	; 0x1387
 80020ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <MX_TIM4_Init+0x94>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <MX_TIM4_Init+0x94>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020f8:	4813      	ldr	r0, [pc, #76]	; (8002148 <MX_TIM4_Init+0x94>)
 80020fa:	f003 fc21 	bl	8005940 <HAL_TIM_Base_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002104:	f000 f892 	bl	800222c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	4619      	mov	r1, r3
 8002114:	480c      	ldr	r0, [pc, #48]	; (8002148 <MX_TIM4_Init+0x94>)
 8002116:	f003 fdbd 	bl	8005c94 <HAL_TIM_ConfigClockSource>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002120:	f000 f884 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_TIM4_Init+0x94>)
 8002132:	f003 ff93 	bl	800605c <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800213c:	f000 f876 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000328 	.word	0x20000328
 800214c:	40000800 	.word	0x40000800

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <MX_GPIO_Init+0xcc>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a2c      	ldr	r2, [pc, #176]	; (800221c <MX_GPIO_Init+0xcc>)
 800216a:	f043 0320 	orr.w	r3, r3, #32
 800216e:	6193      	str	r3, [r2, #24]
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <MX_GPIO_Init+0xcc>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <MX_GPIO_Init+0xcc>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <MX_GPIO_Init+0xcc>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <MX_GPIO_Init+0xcc>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <MX_GPIO_Init+0xcc>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a20      	ldr	r2, [pc, #128]	; (800221c <MX_GPIO_Init+0xcc>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <MX_GPIO_Init+0xcc>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <MX_GPIO_Init+0xcc>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a1a      	ldr	r2, [pc, #104]	; (800221c <MX_GPIO_Init+0xcc>)
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <MX_GPIO_Init+0xcc>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC0 PC1 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8
 80021c4:	f240 3383 	movw	r3, #899	; 0x383
 80021c8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	4619      	mov	r1, r3
 80021d8:	4811      	ldr	r0, [pc, #68]	; (8002220 <MX_GPIO_Init+0xd0>)
 80021da:	f001 fecf 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 PA8 PA9
                           PA10 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80021de:	f242 7390 	movw	r3, #10128	; 0x2790
 80021e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	4619      	mov	r1, r3
 80021f2:	480c      	ldr	r0, [pc, #48]	; (8002224 <MX_GPIO_Init+0xd4>)
 80021f4:	f001 fec2 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80021f8:	f24e 037a 	movw	r3, #57466	; 0xe07a
 80021fc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4619      	mov	r1, r3
 800220c:	4806      	ldr	r0, [pc, #24]	; (8002228 <MX_GPIO_Init+0xd8>)
 800220e:	f001 feb5 	bl	8003f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002212:	bf00      	nop
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40011000 	.word	0x40011000
 8002224:	40010800 	.word	0x40010800
 8002228:	40010c00 	.word	0x40010c00

0800222c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002230:	b672      	cpsid	i
}
 8002232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002234:	e7fe      	b.n	8002234 <Error_Handler+0x8>
	...

08002238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_MspInit+0x40>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	4a0d      	ldr	r2, [pc, #52]	; (8002278 <HAL_MspInit+0x40>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6193      	str	r3, [r2, #24]
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_MspInit+0x40>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_MspInit+0x40>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <HAL_MspInit+0x40>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_MspInit+0x40>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_ADC_MspInit+0x6c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d121      	bne.n	80022e0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_ADC_MspInit+0x70>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_ADC_MspInit+0x70>)
 80022a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_ADC_MspInit+0x70>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_ADC_MspInit+0x70>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <HAL_ADC_MspInit+0x70>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_ADC_MspInit+0x70>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022cc:	2301      	movs	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d0:	2303      	movs	r3, #3
 80022d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	4619      	mov	r1, r3
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <HAL_ADC_MspInit+0x74>)
 80022dc:	f001 fe4e 	bl	8003f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022e0:	bf00      	nop
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40012400 	.word	0x40012400
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010800 	.word	0x40010800

080022f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_CAN_MspInit+0x9c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d139      	bne.n	8002388 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_CAN_MspInit+0xa0>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_CAN_MspInit+0xa0>)
 800231a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800231e:	61d3      	str	r3, [r2, #28]
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_CAN_MspInit+0xa0>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_CAN_MspInit+0xa0>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_CAN_MspInit+0xa0>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_CAN_MspInit+0xa0>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800234e:	2301      	movs	r3, #1
 8002350:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	4619      	mov	r1, r3
 8002358:	480f      	ldr	r0, [pc, #60]	; (8002398 <HAL_CAN_MspInit+0xa4>)
 800235a:	f001 fe0f 	bl	8003f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800235e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4619      	mov	r1, r3
 8002372:	4809      	ldr	r0, [pc, #36]	; (8002398 <HAL_CAN_MspInit+0xa4>)
 8002374:	f001 fe02 	bl	8003f7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2014      	movs	r0, #20
 800237e:	f001 fdc6 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002382:	2014      	movs	r0, #20
 8002384:	f001 fddf 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40006400 	.word	0x40006400
 8002394:	40021000 	.word	0x40021000
 8002398:	40010800 	.word	0x40010800

0800239c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_I2C_MspInit+0x90>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d132      	bne.n	8002422 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <HAL_I2C_MspInit+0x94>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_I2C_MspInit+0x94>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_I2C_MspInit+0x94>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023da:	2312      	movs	r3, #18
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	4812      	ldr	r0, [pc, #72]	; (8002434 <HAL_I2C_MspInit+0x98>)
 80023ea:	f001 fdc7 	bl	8003f7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_I2C_MspInit+0x9c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <HAL_I2C_MspInit+0x9c>)
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_I2C_MspInit+0x94>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_I2C_MspInit+0x94>)
 8002410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_I2C_MspInit+0x94>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	3728      	adds	r7, #40	; 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40005400 	.word	0x40005400
 8002430:	40021000 	.word	0x40021000
 8002434:	40010c00 	.word	0x40010c00
 8002438:	40010000 	.word	0x40010000

0800243c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_TIM_Base_MspInit+0x78>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d114      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_TIM_Base_MspInit+0x7c>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	201d      	movs	r0, #29
 800246c:	f001 fd4f 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002470:	201d      	movs	r0, #29
 8002472:	f001 fd68 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002476:	e018      	b.n	80024aa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_TIM_Base_MspInit+0x80>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d113      	bne.n	80024aa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_TIM_Base_MspInit+0x7c>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	201e      	movs	r0, #30
 80024a0:	f001 fd35 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024a4:	201e      	movs	r0, #30
 80024a6:	f001 fd4e 	bl	8003f46 <HAL_NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40000800 	.word	0x40000800

080024c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80024c4:	e7fe      	b.n	80024c4 <NMI_Handler+0x4>

080024c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <HardFault_Handler+0x4>

080024cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <MemManage_Handler+0x4>

080024d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <UsageFault_Handler+0x4>

080024de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002506:	f000 f953 	bl	80027b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002516:	f001 f9ff 	bl	8003918 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000264 	.word	0x20000264

08002524 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <TIM3_IRQHandler+0x10>)
 800252a:	f003 faab 	bl	8005a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200002e0 	.word	0x200002e0

08002538 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <TIM4_IRQHandler+0x10>)
 800253e:	f003 faa1 	bl	8005a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000328 	.word	0x20000328

0800254c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
	return 1;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <_kill>:

int _kill(int pid, int sig) {
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8002564:	f003 fdea 	bl	800613c <__errno>
 8002568:	4603      	mov	r3, r0
 800256a:	2216      	movs	r2, #22
 800256c:	601a      	str	r2, [r3, #0]
	return -1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <_exit>:

void _exit(int status) {
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002582:	f04f 31ff 	mov.w	r1, #4294967295
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffe7 	bl	800255a <_kill>
	while (1) {
 800258c:	e7fe      	b.n	800258c <_exit+0x12>

0800258e <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e00a      	b.n	80025b6 <_read+0x28>
		*ptr++ = __io_getchar();
 80025a0:	f3af 8000 	nop.w
 80025a4:	4601      	mov	r1, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	60ba      	str	r2, [r7, #8]
 80025ac:	b2ca      	uxtb	r2, r1
 80025ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3301      	adds	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	dbf0      	blt.n	80025a0 <_read+0x12>
	}

	return len;
 80025be:	687b      	ldr	r3, [r7, #4]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e009      	b.n	80025ee <_write+0x26>
		__io_putchar(*ptr++);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	60ba      	str	r2, [r7, #8]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	dbf1      	blt.n	80025da <_write+0x12>
	}
	return len;
 80025f6:	687b      	ldr	r3, [r7, #4]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_close>:

int _close(int file) {
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002626:	605a      	str	r2, [r3, #4]
	return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <_isatty>:

int _isatty(int file) {
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800263c:	2301      	movs	r3, #1
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <_sbrk+0x64>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <_sbrk+0x68>)
 8002680:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d207      	bcs.n	80026a0 <_sbrk+0x40>
		errno = ENOMEM;
 8002690:	f003 fd54 	bl	800613c <__errno>
 8002694:	4603      	mov	r3, r0
 8002696:	220c      	movs	r2, #12
 8002698:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	e009      	b.n	80026b4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <_sbrk+0x64>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <_sbrk+0x64>)
 80026b0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80026b2:	68fb      	ldr	r3, [r7, #12]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20005000 	.word	0x20005000
 80026c0:	00000400 	.word	0x00000400
 80026c4:	200003fc 	.word	0x200003fc
 80026c8:	20000418 	.word	0x20000418

080026cc <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026d8:	f7ff fff8 	bl	80026cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026de:	490c      	ldr	r1, [pc, #48]	; (8002710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026e0:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e4:	e002      	b.n	80026ec <LoopCopyDataInit>

080026e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ea:	3304      	adds	r3, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f0:	d3f9      	bcc.n	80026e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026f4:	4c09      	ldr	r4, [pc, #36]	; (800271c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f8:	e001      	b.n	80026fe <LoopFillZerobss>

080026fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026fc:	3204      	adds	r2, #4

080026fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002700:	d3fb      	bcc.n	80026fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002702:	f003 fd21 	bl	8006148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002706:	f7ff fac7 	bl	8001c98 <main>
  bx lr
 800270a:	4770      	bx	lr
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002714:	08009404 	.word	0x08009404
  ldr r2, =_sbss
 8002718:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800271c:	20000414 	.word	0x20000414

08002720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC1_2_IRQHandler>
	...

08002724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_Init+0x28>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_Init+0x28>)
 800272e:	f043 0310 	orr.w	r3, r3, #16
 8002732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002734:	2003      	movs	r0, #3
 8002736:	f001 fbdf 	bl	8003ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273a:	200f      	movs	r0, #15
 800273c:	f000 f808 	bl	8002750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002740:	f7ff fd7a 	bl	8002238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40022000 	.word	0x40022000

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x54>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_InitTick+0x58>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002766:	fbb3 f3f1 	udiv	r3, r3, r1
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f001 fbf7 	bl	8003f62 <HAL_SYSTICK_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00e      	b.n	800279c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d80a      	bhi.n	800279a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002784:	2200      	movs	r2, #0
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f001 fbbf 	bl	8003f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002790:	4a06      	ldr	r2, [pc, #24]	; (80027ac <HAL_InitTick+0x5c>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000034 	.word	0x20000034
 80027a8:	2000003c 	.word	0x2000003c
 80027ac:	20000038 	.word	0x20000038

080027b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_IncTick+0x1c>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_IncTick+0x20>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <HAL_IncTick+0x20>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	2000003c 	.word	0x2000003c
 80027d0:	20000400 	.word	0x20000400

080027d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <HAL_GetTick+0x10>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	20000400 	.word	0x20000400

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff fff0 	bl	80027d4 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffe0 	bl	80027d4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000003c 	.word	0x2000003c

08002830 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0be      	b.n	80029d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d109      	bne.n	8002874 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fd04 	bl	800227c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fbf1 	bl	800305c <ADC_ConversionStop_Disable>
 800287a:	4603      	mov	r3, r0
 800287c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8099 	bne.w	80029be <HAL_ADC_Init+0x18e>
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8095 	bne.w	80029be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800289c:	f023 0302 	bic.w	r3, r3, #2
 80028a0:	f043 0202 	orr.w	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7b1b      	ldrb	r3, [r3, #12]
 80028b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c8:	d003      	beq.n	80028d2 <HAL_ADC_Init+0xa2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_ADC_Init+0xa8>
 80028d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d6:	e000      	b.n	80028da <HAL_ADC_Init+0xaa>
 80028d8:	2300      	movs	r3, #0
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7d1b      	ldrb	r3, [r3, #20]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d119      	bne.n	800291c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7b1b      	ldrb	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	035a      	lsls	r2, r3, #13
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e00b      	b.n	800291c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	430a      	orrs	r2, r1
 800292e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_ADC_Init+0x1a8>)
 8002938:	4013      	ands	r3, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	430b      	orrs	r3, r1
 8002942:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294c:	d003      	beq.n	8002956 <HAL_ADC_Init+0x126>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d104      	bne.n	8002960 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	3b01      	subs	r3, #1
 800295c:	051b      	lsls	r3, r3, #20
 800295e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	430a      	orrs	r2, r1
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_ADC_Init+0x1ac>)
 800297c:	4013      	ands	r3, r2
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d10b      	bne.n	800299c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	f023 0303 	bic.w	r3, r3, #3
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800299a:	e018      	b.n	80029ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	f023 0312 	bic.w	r3, r3, #18
 80029a4:	f043 0210 	orr.w	r2, r3, #16
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029bc:	e007      	b.n	80029ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	ffe1f7fd 	.word	0xffe1f7fd
 80029dc:	ff1f0efe 	.word	0xff1f0efe

080029e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_Start+0x1a>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e098      	b.n	8002b2c <HAL_ADC_Start+0x14c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fad0 	bl	8002fa8 <ADC_Enable>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 8087 	bne.w	8002b22 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a41      	ldr	r2, [pc, #260]	; (8002b34 <HAL_ADC_Start+0x154>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d105      	bne.n	8002a3e <HAL_ADC_Start+0x5e>
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_ADC_Start+0x158>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d026      	beq.n	8002aa6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a68:	e01d      	b.n	8002aa6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2f      	ldr	r2, [pc, #188]	; (8002b38 <HAL_ADC_Start+0x158>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADC_Start+0xaa>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2b      	ldr	r2, [pc, #172]	; (8002b34 <HAL_ADC_Start+0x154>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10d      	bne.n	8002aa6 <HAL_ADC_Start+0xc6>
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_ADC_Start+0x158>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f023 0206 	bic.w	r2, r3, #6
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002abe:	e002      	b.n	8002ac6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f06f 0202 	mvn.w	r2, #2
 8002ad6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ae2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ae6:	d113      	bne.n	8002b10 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002aec:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <HAL_ADC_Start+0x154>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d105      	bne.n	8002afe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_ADC_Start+0x158>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	e00c      	b.n	8002b2a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40012800 	.word	0x40012800
 8002b38:	40012400 	.word	0x40012400

08002b3c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_Stop+0x1a>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e01a      	b.n	8002b8c <HAL_ADC_Stop+0x50>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa7c 	bl	800305c <ADC_ConversionStop_Disable>
 8002b64:	4603      	mov	r3, r0
 8002b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002baa:	f7ff fe13 	bl	80027d4 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0d3      	b.n	8002d7e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d131      	bne.n	8002c48 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12a      	bne.n	8002c48 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bf2:	e021      	b.n	8002c38 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d01d      	beq.n	8002c38 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_ADC_PollForConversion+0x7e>
 8002c02:	f7ff fde7 	bl	80027d4 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d212      	bcs.n	8002c38 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0a2      	b.n	8002d7e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0d6      	beq.n	8002bf4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c46:	e070      	b.n	8002d2a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c48:	4b4f      	ldr	r3, [pc, #316]	; (8002d88 <HAL_ADC_PollForConversion+0x1f4>)
 8002c4a:	681c      	ldr	r4, [r3, #0]
 8002c4c:	2002      	movs	r0, #2
 8002c4e:	f002 fdc1 	bl	80057d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c52:	4603      	mov	r3, r0
 8002c54:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	4b4b      	ldr	r3, [pc, #300]	; (8002d8c <HAL_ADC_PollForConversion+0x1f8>)
 8002c60:	400b      	ands	r3, r1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_ADC_PollForConversion+0x104>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68d9      	ldr	r1, [r3, #12]
 8002c6c:	4b48      	ldr	r3, [pc, #288]	; (8002d90 <HAL_ADC_PollForConversion+0x1fc>)
 8002c6e:	400b      	ands	r3, r1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d111      	bne.n	8002c98 <HAL_ADC_PollForConversion+0x104>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6919      	ldr	r1, [r3, #16]
 8002c7a:	4b46      	ldr	r3, [pc, #280]	; (8002d94 <HAL_ADC_PollForConversion+0x200>)
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <HAL_ADC_PollForConversion+0x100>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68d9      	ldr	r1, [r3, #12]
 8002c88:	4b43      	ldr	r3, [pc, #268]	; (8002d98 <HAL_ADC_PollForConversion+0x204>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_PollForConversion+0x100>
 8002c90:	2314      	movs	r3, #20
 8002c92:	e020      	b.n	8002cd6 <HAL_ADC_PollForConversion+0x142>
 8002c94:	2329      	movs	r3, #41	; 0x29
 8002c96:	e01e      	b.n	8002cd6 <HAL_ADC_PollForConversion+0x142>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6919      	ldr	r1, [r3, #16]
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_ADC_PollForConversion+0x200>)
 8002ca0:	400b      	ands	r3, r1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_ADC_PollForConversion+0x120>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68d9      	ldr	r1, [r3, #12]
 8002cac:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <HAL_ADC_PollForConversion+0x204>)
 8002cae:	400b      	ands	r3, r1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_ADC_PollForConversion+0x13c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6919      	ldr	r1, [r3, #16]
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <HAL_ADC_PollForConversion+0x208>)
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d108      	bne.n	8002cd4 <HAL_ADC_PollForConversion+0x140>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68d9      	ldr	r1, [r3, #12]
 8002cc8:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_ADC_PollForConversion+0x208>)
 8002cca:	400b      	ands	r3, r1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_PollForConversion+0x140>
 8002cd0:	2354      	movs	r3, #84	; 0x54
 8002cd2:	e000      	b.n	8002cd6 <HAL_ADC_PollForConversion+0x142>
 8002cd4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cdc:	e021      	b.n	8002d22 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d01a      	beq.n	8002d1c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_ADC_PollForConversion+0x168>
 8002cec:	f7ff fd72 	bl	80027d4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d20f      	bcs.n	8002d1c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d90b      	bls.n	8002d1c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	f043 0204 	orr.w	r2, r3, #4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e030      	b.n	8002d7e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d8d9      	bhi.n	8002cde <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0212 	mvn.w	r2, #18
 8002d32:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d4e:	d115      	bne.n	8002d7c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d111      	bne.n	8002d7c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000034 	.word	0x20000034
 8002d8c:	24924924 	.word	0x24924924
 8002d90:	00924924 	.word	0x00924924
 8002d94:	12492492 	.word	0x12492492
 8002d98:	00492492 	.word	0x00492492
 8002d9c:	00249249 	.word	0x00249249

08002da0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x20>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e0dc      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x1da>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d81c      	bhi.n	8002e22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	3b05      	subs	r3, #5
 8002dfa:	221f      	movs	r2, #31
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4019      	ands	r1, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b05      	subs	r3, #5
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e20:	e03c      	b.n	8002e9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d81c      	bhi.n	8002e64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b23      	subs	r3, #35	; 0x23
 8002e3c:	221f      	movs	r2, #31
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	4019      	ands	r1, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	3b23      	subs	r3, #35	; 0x23
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
 8002e62:	e01b      	b.n	8002e9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b41      	subs	r3, #65	; 0x41
 8002e76:	221f      	movs	r2, #31
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	4019      	ands	r1, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3b41      	subs	r3, #65	; 0x41
 8002e90:	fa00 f203 	lsl.w	r2, r0, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b09      	cmp	r3, #9
 8002ea2:	d91c      	bls.n	8002ede <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68d9      	ldr	r1, [r3, #12]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b1e      	subs	r3, #30
 8002eb6:	2207      	movs	r2, #7
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4019      	ands	r1, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6898      	ldr	r0, [r3, #8]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b1e      	subs	r3, #30
 8002ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	e019      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6919      	ldr	r1, [r3, #16]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	2207      	movs	r2, #7
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	4019      	ands	r1, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6898      	ldr	r0, [r3, #8]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d003      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f1e:	2b11      	cmp	r3, #17
 8002f20:	d132      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_ADC_ConfigChannel+0x1e4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d125      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d126      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d11a      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	0c9a      	lsrs	r2, r3, #18
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f9      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x1b2>
 8002f76:	e007      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40012400 	.word	0x40012400
 8002fa0:	20000034 	.word	0x20000034
 8002fa4:	431bde83 	.word	0x431bde83

08002fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d040      	beq.n	8003048 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <ADC_Enable+0xac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <ADC_Enable+0xb0>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0c9b      	lsrs	r3, r3, #18
 8002fe2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fe4:	e002      	b.n	8002fec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f9      	bne.n	8002fe6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ff2:	f7ff fbef 	bl	80027d4 <HAL_GetTick>
 8002ff6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ff8:	e01f      	b.n	800303a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ffa:	f7ff fbeb 	bl	80027d4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d918      	bls.n	800303a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d011      	beq.n	800303a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	f043 0210 	orr.w	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e007      	b.n	800304a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d1d8      	bne.n	8002ffa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000034 	.word	0x20000034
 8003058:	431bde83 	.word	0x431bde83

0800305c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d12e      	bne.n	80030d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003086:	f7ff fba5 	bl	80027d4 <HAL_GetTick>
 800308a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800308c:	e01b      	b.n	80030c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800308e:	f7ff fba1 	bl	80027d4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d914      	bls.n	80030c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d10d      	bne.n	80030c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e007      	b.n	80030d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d0dc      	beq.n	800308e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0ed      	b.n	80032cc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff f8f9 	bl	80022f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003112:	f7ff fb5f 	bl	80027d4 <HAL_GetTick>
 8003116:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003118:	e012      	b.n	8003140 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800311a:	f7ff fb5b 	bl	80027d4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b0a      	cmp	r3, #10
 8003126:	d90b      	bls.n	8003140 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2205      	movs	r2, #5
 8003138:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0c5      	b.n	80032cc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0e5      	beq.n	800311a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0202 	bic.w	r2, r2, #2
 800315c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800315e:	f7ff fb39 	bl	80027d4 <HAL_GetTick>
 8003162:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003164:	e012      	b.n	800318c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003166:	f7ff fb35 	bl	80027d4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d90b      	bls.n	800318c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2205      	movs	r2, #5
 8003184:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e09f      	b.n	80032cc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e5      	bne.n	8003166 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7e1b      	ldrb	r3, [r3, #24]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d108      	bne.n	80031b4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e007      	b.n	80031c4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e5b      	ldrb	r3, [r3, #25]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d108      	bne.n	80031de <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e007      	b.n	80031ee <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7e9b      	ldrb	r3, [r3, #26]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d108      	bne.n	8003208 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0220 	orr.w	r2, r2, #32
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e007      	b.n	8003218 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0220 	bic.w	r2, r2, #32
 8003216:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	7edb      	ldrb	r3, [r3, #27]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d108      	bne.n	8003232 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0210 	bic.w	r2, r2, #16
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e007      	b.n	8003242 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0210 	orr.w	r2, r2, #16
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7f1b      	ldrb	r3, [r3, #28]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d108      	bne.n	800325c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0208 	orr.w	r2, r2, #8
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e007      	b.n	800326c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0208 	bic.w	r2, r2, #8
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7f5b      	ldrb	r3, [r3, #29]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d108      	bne.n	8003286 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0204 	orr.w	r2, r2, #4
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e007      	b.n	8003296 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0204 	bic.w	r2, r2, #4
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	ea42 0103 	orr.w	r1, r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d003      	beq.n	80032fa <HAL_CAN_ConfigFilter+0x26>
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f040 80aa 	bne.w	800344e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003300:	f043 0201 	orr.w	r2, r3, #1
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2201      	movs	r2, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	43db      	mvns	r3, r3
 8003324:	401a      	ands	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d123      	bne.n	800337c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43db      	mvns	r3, r3
 800333e:	401a      	ands	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003356:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3248      	adds	r2, #72	; 0x48
 800335c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003370:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	3348      	adds	r3, #72	; 0x48
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d122      	bne.n	80033ca <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	431a      	orrs	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3248      	adds	r2, #72	; 0x48
 80033aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033c0:	6979      	ldr	r1, [r7, #20]
 80033c2:	3348      	adds	r3, #72	; 0x48
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	401a      	ands	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033e4:	e007      	b.n	80033f6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43db      	mvns	r3, r3
 8003408:	401a      	ands	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003410:	e007      	b.n	8003422 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	431a      	orrs	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	431a      	orrs	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003440:	f023 0201 	bic.w	r2, r3, #1
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e006      	b.n	800345c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d12e      	bne.n	80034d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003492:	f7ff f99f 	bl	80027d4 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003498:	e012      	b.n	80034c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800349a:	f7ff f99b 	bl	80027d4 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b0a      	cmp	r3, #10
 80034a6:	d90b      	bls.n	80034c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2205      	movs	r2, #5
 80034b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e012      	b.n	80034e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1e5      	bne.n	800349a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e006      	b.n	80034e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b089      	sub	sp, #36	; 0x24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003502:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800350c:	7ffb      	ldrb	r3, [r7, #31]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d003      	beq.n	800351a <HAL_CAN_AddTxMessage+0x2c>
 8003512:	7ffb      	ldrb	r3, [r7, #31]
 8003514:	2b02      	cmp	r3, #2
 8003516:	f040 80ad 	bne.w	8003674 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8095 	beq.w	8003664 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	0e1b      	lsrs	r3, r3, #24
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003544:	2201      	movs	r2, #1
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	409a      	lsls	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	6809      	ldr	r1, [r1, #0]
 8003564:	431a      	orrs	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3318      	adds	r3, #24
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	440b      	add	r3, r1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e00f      	b.n	8003592 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800357c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003586:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3318      	adds	r3, #24
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	440b      	add	r3, r1
 8003590:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3318      	adds	r3, #24
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	440b      	add	r3, r1
 80035a2:	3304      	adds	r3, #4
 80035a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	7d1b      	ldrb	r3, [r3, #20]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d111      	bne.n	80035d2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	3318      	adds	r3, #24
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4413      	add	r3, r2
 80035ba:	3304      	adds	r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	6811      	ldr	r1, [r2, #0]
 80035c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3318      	adds	r3, #24
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	440b      	add	r3, r1
 80035ce:	3304      	adds	r3, #4
 80035d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3307      	adds	r3, #7
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	061a      	lsls	r2, r3, #24
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3306      	adds	r3, #6
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3305      	adds	r3, #5
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	4313      	orrs	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	3204      	adds	r2, #4
 80035f2:	7812      	ldrb	r2, [r2, #0]
 80035f4:	4610      	mov	r0, r2
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	6811      	ldr	r1, [r2, #0]
 80035fa:	ea43 0200 	orr.w	r2, r3, r0
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	440b      	add	r3, r1
 8003604:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003608:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3303      	adds	r3, #3
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	061a      	lsls	r2, r3, #24
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3302      	adds	r3, #2
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3301      	adds	r3, #1
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	4313      	orrs	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	4610      	mov	r0, r2
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	6811      	ldr	r1, [r2, #0]
 8003630:	ea43 0200 	orr.w	r2, r3, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	440b      	add	r3, r1
 800363a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800363e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3318      	adds	r3, #24
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	4413      	add	r3, r2
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	6811      	ldr	r1, [r2, #0]
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3318      	adds	r3, #24
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	440b      	add	r3, r1
 800365e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e00e      	b.n	8003682 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e006      	b.n	8003682 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d003      	beq.n	80036b0 <HAL_CAN_GetRxMessage+0x24>
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	f040 8103 	bne.w	80038b6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10e      	bne.n	80036d4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0f7      	b.n	80038c4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0e8      	b.n	80038c4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	331b      	adds	r3, #27
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	4413      	add	r3, r2
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0204 	and.w	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10c      	bne.n	800372a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	331b      	adds	r3, #27
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	4413      	add	r3, r2
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0d5b      	lsrs	r3, r3, #21
 8003720:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e00b      	b.n	8003742 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	331b      	adds	r3, #27
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4413      	add	r3, r2
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	08db      	lsrs	r3, r3, #3
 800373a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	331b      	adds	r3, #27
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	4413      	add	r3, r2
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0202 	and.w	r2, r3, #2
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	331b      	adds	r3, #27
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2208      	movs	r2, #8
 8003774:	611a      	str	r2, [r3, #16]
 8003776:	e00b      	b.n	8003790 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	331b      	adds	r3, #27
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4413      	add	r3, r2
 8003784:	3304      	adds	r3, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	331b      	adds	r3, #27
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	4413      	add	r3, r2
 800379c:	3304      	adds	r3, #4
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	331b      	adds	r3, #27
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	4413      	add	r3, r2
 80037b4:	3304      	adds	r3, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	4413      	add	r3, r2
 80037e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	0a1a      	lsrs	r2, r3, #8
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0c1a      	lsrs	r2, r3, #16
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	3302      	adds	r3, #2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4413      	add	r3, r2
 8003814:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	0e1a      	lsrs	r2, r3, #24
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	3303      	adds	r3, #3
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	4413      	add	r3, r2
 800382e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	3304      	adds	r3, #4
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4413      	add	r3, r2
 8003846:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0a1a      	lsrs	r2, r3, #8
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	3305      	adds	r3, #5
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0c1a      	lsrs	r2, r3, #16
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	3306      	adds	r3, #6
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4413      	add	r3, r2
 800387a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e1a      	lsrs	r2, r3, #24
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	3307      	adds	r3, #7
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d108      	bne.n	80038a2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0220 	orr.w	r2, r2, #32
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e007      	b.n	80038b2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0220 	orr.w	r2, r2, #32
 80038b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e006      	b.n	80038c4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d002      	beq.n	80038ec <HAL_CAN_ActivateNotification+0x1e>
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d109      	bne.n	8003900 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6959      	ldr	r1, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e006      	b.n	800390e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d07c      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d023      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f983 	bl	8003c86 <HAL_CAN_TxMailbox0CompleteCallback>
 8003980:	e016      	b.n	80039b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	e00c      	b.n	80039b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	e002      	b.n	80039b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f986 	bl	8003cbc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d024      	beq.n	8003a04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f962 	bl	8003c98 <HAL_CAN_TxMailbox1CompleteCallback>
 80039d4:	e016      	b.n	8003a04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e00c      	b.n	8003a04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	e002      	b.n	8003a04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f965 	bl	8003cce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d024      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f941 	bl	8003caa <HAL_CAN_TxMailbox2CompleteCallback>
 8003a28:	e016      	b.n	8003a58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e00c      	b.n	8003a58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	e002      	b.n	8003a58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f944 	bl	8003ce0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00c      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2210      	movs	r2, #16
 8003a7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2208      	movs	r2, #8
 8003a96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f92a 	bl	8003cf2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fe54 	bl	8001764 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2210      	movs	r2, #16
 8003ade:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2208      	movs	r2, #8
 8003afa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f90a 	bl	8003d16 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d009      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8f2 	bl	8003d04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f8f3 	bl	8003d28 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d006      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8eb 	bl	8003d3a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d07b      	beq.n	8003c66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d072      	beq.n	8003c5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	f043 0304 	orr.w	r3, r3, #4
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d043      	beq.n	8003c5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d03e      	beq.n	8003c5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003be6:	2b60      	cmp	r3, #96	; 0x60
 8003be8:	d02b      	beq.n	8003c42 <HAL_CAN_IRQHandler+0x32a>
 8003bea:	2b60      	cmp	r3, #96	; 0x60
 8003bec:	d82e      	bhi.n	8003c4c <HAL_CAN_IRQHandler+0x334>
 8003bee:	2b50      	cmp	r3, #80	; 0x50
 8003bf0:	d022      	beq.n	8003c38 <HAL_CAN_IRQHandler+0x320>
 8003bf2:	2b50      	cmp	r3, #80	; 0x50
 8003bf4:	d82a      	bhi.n	8003c4c <HAL_CAN_IRQHandler+0x334>
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d019      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x316>
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d826      	bhi.n	8003c4c <HAL_CAN_IRQHandler+0x334>
 8003bfe:	2b30      	cmp	r3, #48	; 0x30
 8003c00:	d010      	beq.n	8003c24 <HAL_CAN_IRQHandler+0x30c>
 8003c02:	2b30      	cmp	r3, #48	; 0x30
 8003c04:	d822      	bhi.n	8003c4c <HAL_CAN_IRQHandler+0x334>
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d002      	beq.n	8003c10 <HAL_CAN_IRQHandler+0x2f8>
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d005      	beq.n	8003c1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c0e:	e01d      	b.n	8003c4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f043 0308 	orr.w	r3, r3, #8
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c18:	e019      	b.n	8003c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	f043 0310 	orr.w	r3, r3, #16
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c22:	e014      	b.n	8003c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	f043 0320 	orr.w	r3, r3, #32
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c2c:	e00f      	b.n	8003c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c36:	e00a      	b.n	8003c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c40:	e005      	b.n	8003c4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c4a:	e000      	b.n	8003c4e <HAL_CAN_IRQHandler+0x336>
            break;
 8003c4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2204      	movs	r2, #4
 8003c64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f867 	bl	8003d4c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3728      	adds	r7, #40	; 0x28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr

08003d16 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
	...

08003d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d92:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	60d3      	str	r3, [r2, #12]
}
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 0307 	and.w	r3, r3, #7
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db0b      	blt.n	8003dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	f003 021f 	and.w	r2, r3, #31
 8003ddc:	4906      	ldr	r1, [pc, #24]	; (8003df8 <__NVIC_EnableIRQ+0x34>)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2001      	movs	r0, #1
 8003de6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	e000e100 	.word	0xe000e100

08003dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	6039      	str	r1, [r7, #0]
 8003e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	db0a      	blt.n	8003e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	490c      	ldr	r1, [pc, #48]	; (8003e48 <__NVIC_SetPriority+0x4c>)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	0112      	lsls	r2, r2, #4
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	440b      	add	r3, r1
 8003e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e24:	e00a      	b.n	8003e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4908      	ldr	r1, [pc, #32]	; (8003e4c <__NVIC_SetPriority+0x50>)
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	3b04      	subs	r3, #4
 8003e34:	0112      	lsls	r2, r2, #4
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	440b      	add	r3, r1
 8003e3a:	761a      	strb	r2, [r3, #24]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000e100 	.word	0xe000e100
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f1c3 0307 	rsb	r3, r3, #7
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	bf28      	it	cs
 8003e6e:	2304      	movcs	r3, #4
 8003e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3304      	adds	r3, #4
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d902      	bls.n	8003e80 <NVIC_EncodePriority+0x30>
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3b03      	subs	r3, #3
 8003e7e:	e000      	b.n	8003e82 <NVIC_EncodePriority+0x32>
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e84:	f04f 32ff 	mov.w	r2, #4294967295
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	401a      	ands	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e98:	f04f 31ff 	mov.w	r1, #4294967295
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	43d9      	mvns	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	4313      	orrs	r3, r2
         );
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3724      	adds	r7, #36	; 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec4:	d301      	bcc.n	8003eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e00f      	b.n	8003eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <SysTick_Config+0x40>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed2:	210f      	movs	r1, #15
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	f7ff ff90 	bl	8003dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <SysTick_Config+0x40>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <SysTick_Config+0x40>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff2d 	bl	8003d60 <__NVIC_SetPriorityGrouping>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	4603      	mov	r3, r0
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f20:	f7ff ff42 	bl	8003da8 <__NVIC_GetPriorityGrouping>
 8003f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7ff ff90 	bl	8003e50 <NVIC_EncodePriority>
 8003f30:	4602      	mov	r2, r0
 8003f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff5f 	bl	8003dfc <__NVIC_SetPriority>
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff35 	bl	8003dc4 <__NVIC_EnableIRQ>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ffa2 	bl	8003eb4 <SysTick_Config>
 8003f70:	4603      	mov	r3, r0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b08b      	sub	sp, #44	; 0x2c
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8e:	e169      	b.n	8004264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f90:	2201      	movs	r2, #1
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	f040 8158 	bne.w	800425e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4a9a      	ldr	r2, [pc, #616]	; (800421c <HAL_GPIO_Init+0x2a0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d05e      	beq.n	8004076 <HAL_GPIO_Init+0xfa>
 8003fb8:	4a98      	ldr	r2, [pc, #608]	; (800421c <HAL_GPIO_Init+0x2a0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d875      	bhi.n	80040aa <HAL_GPIO_Init+0x12e>
 8003fbe:	4a98      	ldr	r2, [pc, #608]	; (8004220 <HAL_GPIO_Init+0x2a4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d058      	beq.n	8004076 <HAL_GPIO_Init+0xfa>
 8003fc4:	4a96      	ldr	r2, [pc, #600]	; (8004220 <HAL_GPIO_Init+0x2a4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d86f      	bhi.n	80040aa <HAL_GPIO_Init+0x12e>
 8003fca:	4a96      	ldr	r2, [pc, #600]	; (8004224 <HAL_GPIO_Init+0x2a8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d052      	beq.n	8004076 <HAL_GPIO_Init+0xfa>
 8003fd0:	4a94      	ldr	r2, [pc, #592]	; (8004224 <HAL_GPIO_Init+0x2a8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d869      	bhi.n	80040aa <HAL_GPIO_Init+0x12e>
 8003fd6:	4a94      	ldr	r2, [pc, #592]	; (8004228 <HAL_GPIO_Init+0x2ac>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d04c      	beq.n	8004076 <HAL_GPIO_Init+0xfa>
 8003fdc:	4a92      	ldr	r2, [pc, #584]	; (8004228 <HAL_GPIO_Init+0x2ac>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d863      	bhi.n	80040aa <HAL_GPIO_Init+0x12e>
 8003fe2:	4a92      	ldr	r2, [pc, #584]	; (800422c <HAL_GPIO_Init+0x2b0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d046      	beq.n	8004076 <HAL_GPIO_Init+0xfa>
 8003fe8:	4a90      	ldr	r2, [pc, #576]	; (800422c <HAL_GPIO_Init+0x2b0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d85d      	bhi.n	80040aa <HAL_GPIO_Init+0x12e>
 8003fee:	2b12      	cmp	r3, #18
 8003ff0:	d82a      	bhi.n	8004048 <HAL_GPIO_Init+0xcc>
 8003ff2:	2b12      	cmp	r3, #18
 8003ff4:	d859      	bhi.n	80040aa <HAL_GPIO_Init+0x12e>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <HAL_GPIO_Init+0x80>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004077 	.word	0x08004077
 8004000:	08004051 	.word	0x08004051
 8004004:	08004063 	.word	0x08004063
 8004008:	080040a5 	.word	0x080040a5
 800400c:	080040ab 	.word	0x080040ab
 8004010:	080040ab 	.word	0x080040ab
 8004014:	080040ab 	.word	0x080040ab
 8004018:	080040ab 	.word	0x080040ab
 800401c:	080040ab 	.word	0x080040ab
 8004020:	080040ab 	.word	0x080040ab
 8004024:	080040ab 	.word	0x080040ab
 8004028:	080040ab 	.word	0x080040ab
 800402c:	080040ab 	.word	0x080040ab
 8004030:	080040ab 	.word	0x080040ab
 8004034:	080040ab 	.word	0x080040ab
 8004038:	080040ab 	.word	0x080040ab
 800403c:	080040ab 	.word	0x080040ab
 8004040:	08004059 	.word	0x08004059
 8004044:	0800406d 	.word	0x0800406d
 8004048:	4a79      	ldr	r2, [pc, #484]	; (8004230 <HAL_GPIO_Init+0x2b4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800404e:	e02c      	b.n	80040aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	623b      	str	r3, [r7, #32]
          break;
 8004056:	e029      	b.n	80040ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	3304      	adds	r3, #4
 800405e:	623b      	str	r3, [r7, #32]
          break;
 8004060:	e024      	b.n	80040ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	3308      	adds	r3, #8
 8004068:	623b      	str	r3, [r7, #32]
          break;
 800406a:	e01f      	b.n	80040ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	330c      	adds	r3, #12
 8004072:	623b      	str	r3, [r7, #32]
          break;
 8004074:	e01a      	b.n	80040ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800407e:	2304      	movs	r3, #4
 8004080:	623b      	str	r3, [r7, #32]
          break;
 8004082:	e013      	b.n	80040ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800408c:	2308      	movs	r3, #8
 800408e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	611a      	str	r2, [r3, #16]
          break;
 8004096:	e009      	b.n	80040ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004098:	2308      	movs	r3, #8
 800409a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	615a      	str	r2, [r3, #20]
          break;
 80040a2:	e003      	b.n	80040ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040a4:	2300      	movs	r3, #0
 80040a6:	623b      	str	r3, [r7, #32]
          break;
 80040a8:	e000      	b.n	80040ac <HAL_GPIO_Init+0x130>
          break;
 80040aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2bff      	cmp	r3, #255	; 0xff
 80040b0:	d801      	bhi.n	80040b6 <HAL_GPIO_Init+0x13a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	e001      	b.n	80040ba <HAL_GPIO_Init+0x13e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2bff      	cmp	r3, #255	; 0xff
 80040c0:	d802      	bhi.n	80040c8 <HAL_GPIO_Init+0x14c>
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	e002      	b.n	80040ce <HAL_GPIO_Init+0x152>
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	3b08      	subs	r3, #8
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	210f      	movs	r1, #15
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	401a      	ands	r2, r3
 80040e0:	6a39      	ldr	r1, [r7, #32]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	431a      	orrs	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80b1 	beq.w	800425e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040fc:	4b4d      	ldr	r3, [pc, #308]	; (8004234 <HAL_GPIO_Init+0x2b8>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4a4c      	ldr	r2, [pc, #304]	; (8004234 <HAL_GPIO_Init+0x2b8>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6193      	str	r3, [r2, #24]
 8004108:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <HAL_GPIO_Init+0x2b8>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004114:	4a48      	ldr	r2, [pc, #288]	; (8004238 <HAL_GPIO_Init+0x2bc>)
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	3302      	adds	r3, #2
 800411c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004120:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	220f      	movs	r2, #15
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a40      	ldr	r2, [pc, #256]	; (800423c <HAL_GPIO_Init+0x2c0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <HAL_GPIO_Init+0x1ec>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a3f      	ldr	r2, [pc, #252]	; (8004240 <HAL_GPIO_Init+0x2c4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00d      	beq.n	8004164 <HAL_GPIO_Init+0x1e8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a3e      	ldr	r2, [pc, #248]	; (8004244 <HAL_GPIO_Init+0x2c8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d007      	beq.n	8004160 <HAL_GPIO_Init+0x1e4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3d      	ldr	r2, [pc, #244]	; (8004248 <HAL_GPIO_Init+0x2cc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <HAL_GPIO_Init+0x1e0>
 8004158:	2303      	movs	r3, #3
 800415a:	e006      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 800415c:	2304      	movs	r3, #4
 800415e:	e004      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 8004160:	2302      	movs	r3, #2
 8004162:	e002      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_GPIO_Init+0x1ee>
 8004168:	2300      	movs	r3, #0
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	f002 0203 	and.w	r2, r2, #3
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	4093      	lsls	r3, r2
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800417a:	492f      	ldr	r1, [pc, #188]	; (8004238 <HAL_GPIO_Init+0x2bc>)
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3302      	adds	r3, #2
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d006      	beq.n	80041a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004194:	4b2d      	ldr	r3, [pc, #180]	; (800424c <HAL_GPIO_Init+0x2d0>)
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	492c      	ldr	r1, [pc, #176]	; (800424c <HAL_GPIO_Init+0x2d0>)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]
 80041a0:	e006      	b.n	80041b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041a2:	4b2a      	ldr	r3, [pc, #168]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	4928      	ldr	r1, [pc, #160]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d006      	beq.n	80041ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	4922      	ldr	r1, [pc, #136]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60cb      	str	r3, [r1, #12]
 80041c8:	e006      	b.n	80041d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	491e      	ldr	r1, [pc, #120]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4918      	ldr	r1, [pc, #96]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
 80041f0:	e006      	b.n	8004200 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	4914      	ldr	r1, [pc, #80]	; (800424c <HAL_GPIO_Init+0x2d0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d021      	beq.n	8004250 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_GPIO_Init+0x2d0>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	490e      	ldr	r1, [pc, #56]	; (800424c <HAL_GPIO_Init+0x2d0>)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	e021      	b.n	800425e <HAL_GPIO_Init+0x2e2>
 800421a:	bf00      	nop
 800421c:	10320000 	.word	0x10320000
 8004220:	10310000 	.word	0x10310000
 8004224:	10220000 	.word	0x10220000
 8004228:	10210000 	.word	0x10210000
 800422c:	10120000 	.word	0x10120000
 8004230:	10110000 	.word	0x10110000
 8004234:	40021000 	.word	0x40021000
 8004238:	40010000 	.word	0x40010000
 800423c:	40010800 	.word	0x40010800
 8004240:	40010c00 	.word	0x40010c00
 8004244:	40011000 	.word	0x40011000
 8004248:	40011400 	.word	0x40011400
 800424c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_GPIO_Init+0x304>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	43db      	mvns	r3, r3
 8004258:	4909      	ldr	r1, [pc, #36]	; (8004280 <HAL_GPIO_Init+0x304>)
 800425a:	4013      	ands	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	3301      	adds	r3, #1
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	f47f ae8e 	bne.w	8003f90 <HAL_GPIO_Init+0x14>
  }
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	372c      	adds	r7, #44	; 0x2c
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40010400 	.word	0x40010400

08004284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	887b      	ldrh	r3, [r7, #2]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
 80042a0:	e001      	b.n	80042a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e12b      	b.n	800451e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fe f85e 	bl	800239c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2224      	movs	r2, #36	; 0x24
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004318:	f001 f960 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 800431c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a81      	ldr	r2, [pc, #516]	; (8004528 <HAL_I2C_Init+0x274>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d807      	bhi.n	8004338 <HAL_I2C_Init+0x84>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a80      	ldr	r2, [pc, #512]	; (800452c <HAL_I2C_Init+0x278>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e006      	b.n	8004346 <HAL_I2C_Init+0x92>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a7d      	ldr	r2, [pc, #500]	; (8004530 <HAL_I2C_Init+0x27c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	bf94      	ite	ls
 8004340:	2301      	movls	r3, #1
 8004342:	2300      	movhi	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0e7      	b.n	800451e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a78      	ldr	r2, [pc, #480]	; (8004534 <HAL_I2C_Init+0x280>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0c9b      	lsrs	r3, r3, #18
 8004358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a6a      	ldr	r2, [pc, #424]	; (8004528 <HAL_I2C_Init+0x274>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d802      	bhi.n	8004388 <HAL_I2C_Init+0xd4>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	e009      	b.n	800439c <HAL_I2C_Init+0xe8>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	4a69      	ldr	r2, [pc, #420]	; (8004538 <HAL_I2C_Init+0x284>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	3301      	adds	r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	495c      	ldr	r1, [pc, #368]	; (8004528 <HAL_I2C_Init+0x274>)
 80043b8:	428b      	cmp	r3, r1
 80043ba:	d819      	bhi.n	80043f0 <HAL_I2C_Init+0x13c>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e59      	subs	r1, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043d0:	400b      	ands	r3, r1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_I2C_Init+0x138>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e59      	subs	r1, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	e051      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043ec:	2304      	movs	r3, #4
 80043ee:	e04f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d111      	bne.n	800441c <HAL_I2C_Init+0x168>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	440b      	add	r3, r1
 8004406:	fbb0 f3f3 	udiv	r3, r0, r3
 800440a:	3301      	adds	r3, #1
 800440c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e012      	b.n	8004442 <HAL_I2C_Init+0x18e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Init+0x196>
 8004446:	2301      	movs	r3, #1
 8004448:	e022      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10e      	bne.n	8004470 <HAL_I2C_Init+0x1bc>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1e58      	subs	r0, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	440b      	add	r3, r1
 8004460:	fbb0 f3f3 	udiv	r3, r0, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446e:	e00f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e58      	subs	r0, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	0099      	lsls	r1, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	6809      	ldr	r1, [r1, #0]
 8004494:	4313      	orrs	r3, r2
 8004496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6911      	ldr	r1, [r2, #16]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68d2      	ldr	r2, [r2, #12]
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	000186a0 	.word	0x000186a0
 800452c:	001e847f 	.word	0x001e847f
 8004530:	003d08ff 	.word	0x003d08ff
 8004534:	431bde83 	.word	0x431bde83
 8004538:	10624dd3 	.word	0x10624dd3

0800453c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	461a      	mov	r2, r3
 8004548:	460b      	mov	r3, r1
 800454a:	817b      	strh	r3, [r7, #10]
 800454c:	4613      	mov	r3, r2
 800454e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004550:	f7fe f940 	bl	80027d4 <HAL_GetTick>
 8004554:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	f040 80e0 	bne.w	8004724 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2319      	movs	r3, #25
 800456a:	2201      	movs	r2, #1
 800456c:	4970      	ldr	r1, [pc, #448]	; (8004730 <HAL_I2C_Master_Transmit+0x1f4>)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fa92 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800457a:	2302      	movs	r3, #2
 800457c:	e0d3      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_I2C_Master_Transmit+0x50>
 8004588:	2302      	movs	r3, #2
 800458a:	e0cc      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1ea>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d007      	beq.n	80045b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2221      	movs	r2, #33	; 0x21
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2210      	movs	r2, #16
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	893a      	ldrh	r2, [r7, #8]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a50      	ldr	r2, [pc, #320]	; (8004734 <HAL_I2C_Master_Transmit+0x1f8>)
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f9ca 	bl	8004994 <I2C_MasterRequestWrite>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e08d      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004620:	e066      	b.n	80046f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	6a39      	ldr	r1, [r7, #32]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fb50 	bl	8004ccc <I2C_WaitOnTXEFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b04      	cmp	r3, #4
 8004638:	d107      	bne.n	800464a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e06b      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d11b      	bne.n	80046c4 <HAL_I2C_Master_Transmit+0x188>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d017      	beq.n	80046c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	6a39      	ldr	r1, [r7, #32]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fb47 	bl	8004d5c <I2C_WaitOnBTFFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00d      	beq.n	80046f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d107      	bne.n	80046ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e01a      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d194      	bne.n	8004622 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	00100002 	.word	0x00100002
 8004734:	ffff0000 	.word	0xffff0000

08004738 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	460b      	mov	r3, r1
 8004746:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004748:	f7fe f844 	bl	80027d4 <HAL_GetTick>
 800474c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b20      	cmp	r3, #32
 800475c:	f040 8111 	bne.w	8004982 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2319      	movs	r3, #25
 8004766:	2201      	movs	r2, #1
 8004768:	4988      	ldr	r1, [pc, #544]	; (800498c <HAL_I2C_IsDeviceReady+0x254>)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f994 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	e104      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_I2C_IsDeviceReady+0x50>
 8004784:	2302      	movs	r3, #2
 8004786:	e0fd      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x24c>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d007      	beq.n	80047ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2224      	movs	r2, #36	; 0x24
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a70      	ldr	r2, [pc, #448]	; (8004990 <HAL_I2C_IsDeviceReady+0x258>)
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f952 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004808:	d103      	bne.n	8004812 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0b6      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004816:	897b      	ldrh	r3, [r7, #10]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004824:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004826:	f7fd ffd5 	bl	80027d4 <HAL_GetTick>
 800482a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800485a:	e025      	b.n	80048a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800485c:	f7fd ffba 	bl	80027d4 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d302      	bcc.n	8004872 <HAL_I2C_IsDeviceReady+0x13a>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d103      	bne.n	800487a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	22a0      	movs	r2, #160	; 0xa0
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2ba0      	cmp	r3, #160	; 0xa0
 80048b2:	d005      	beq.n	80048c0 <HAL_I2C_IsDeviceReady+0x188>
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <HAL_I2C_IsDeviceReady+0x188>
 80048ba:	7dbb      	ldrb	r3, [r7, #22]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0cd      	beq.n	800485c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d129      	bne.n	800492a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e6:	2300      	movs	r3, #0
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2319      	movs	r3, #25
 8004902:	2201      	movs	r2, #1
 8004904:	4921      	ldr	r1, [pc, #132]	; (800498c <HAL_I2C_IsDeviceReady+0x254>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8c6 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e036      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e02c      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004942:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2319      	movs	r3, #25
 800494a:	2201      	movs	r2, #1
 800494c:	490f      	ldr	r1, [pc, #60]	; (800498c <HAL_I2C_IsDeviceReady+0x254>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f8a2 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e012      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	3301      	adds	r3, #1
 8004962:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	f4ff af32 	bcc.w	80047d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	00100002 	.word	0x00100002
 8004990:	ffff0000 	.word	0xffff0000

08004994 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	460b      	mov	r3, r1
 80049a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d006      	beq.n	80049be <I2C_MasterRequestWrite+0x2a>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d003      	beq.n	80049be <I2C_MasterRequestWrite+0x2a>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049bc:	d108      	bne.n	80049d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e00b      	b.n	80049e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	2b12      	cmp	r3, #18
 80049d6:	d107      	bne.n	80049e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f84f 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00d      	beq.n	8004a1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0e:	d103      	bne.n	8004a18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e035      	b.n	8004a88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a24:	d108      	bne.n	8004a38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a26:	897b      	ldrh	r3, [r7, #10]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a34:	611a      	str	r2, [r3, #16]
 8004a36:	e01b      	b.n	8004a70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a38:	897b      	ldrh	r3, [r7, #10]
 8004a3a:	11db      	asrs	r3, r3, #7
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0306 	and.w	r3, r3, #6
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f063 030f 	orn	r3, r3, #15
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	490e      	ldr	r1, [pc, #56]	; (8004a90 <I2C_MasterRequestWrite+0xfc>)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f898 	bl	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e010      	b.n	8004a88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a66:	897b      	ldrh	r3, [r7, #10]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4907      	ldr	r1, [pc, #28]	; (8004a94 <I2C_MasterRequestWrite+0x100>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f888 	bl	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	00010008 	.word	0x00010008
 8004a94:	00010002 	.word	0x00010002

08004a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa8:	e048      	b.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d044      	beq.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fd fe8f 	bl	80027d4 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d139      	bne.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	0c1b      	lsrs	r3, r3, #16
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10d      	bne.n	8004aee <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	43da      	mvns	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	e00c      	b.n	8004b08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	43da      	mvns	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	4013      	ands	r3, r2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d116      	bne.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f043 0220 	orr.w	r2, r3, #32
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e023      	b.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10d      	bne.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	43da      	mvns	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4013      	ands	r3, r2
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	e00c      	b.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf0c      	ite	eq
 8004b74:	2301      	moveq	r3, #1
 8004b76:	2300      	movne	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d093      	beq.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b9a:	e071      	b.n	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004baa:	d123      	bne.n	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e067      	b.n	8004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d041      	beq.n	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfc:	f7fd fdea 	bl	80027d4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d302      	bcc.n	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d136      	bne.n	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d10c      	bne.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	43da      	mvns	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4013      	ands	r3, r2
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e00b      	b.n	8004c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e021      	b.n	8004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d10c      	bne.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	43da      	mvns	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e00b      	b.n	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	43da      	mvns	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf14      	ite	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	2300      	moveq	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f47f af6d 	bne.w	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd8:	e034      	b.n	8004d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f886 	bl	8004dec <I2C_IsAcknowledgeFailed>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e034      	b.n	8004d54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d028      	beq.n	8004d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf2:	f7fd fd6f 	bl	80027d4 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d302      	bcc.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d11d      	bne.n	8004d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d016      	beq.n	8004d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e007      	b.n	8004d54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d1c3      	bne.n	8004cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d68:	e034      	b.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f83e 	bl	8004dec <I2C_IsAcknowledgeFailed>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e034      	b.n	8004de4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d028      	beq.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7fd fd27 	bl	80027d4 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11d      	bne.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d016      	beq.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e007      	b.n	8004de4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d1c3      	bne.n	8004d6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e02:	d11b      	bne.n	8004e3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f043 0204 	orr.w	r2, r3, #4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e272      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8087 	beq.w	8004f76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e68:	4b92      	ldr	r3, [pc, #584]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d00c      	beq.n	8004e8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e74:	4b8f      	ldr	r3, [pc, #572]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d112      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x5e>
 8004e80:	4b8c      	ldr	r3, [pc, #560]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d10b      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8e:	4b89      	ldr	r3, [pc, #548]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06c      	beq.n	8004f74 <HAL_RCC_OscConfig+0x12c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d168      	bne.n	8004f74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e24c      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eae:	d106      	bne.n	8004ebe <HAL_RCC_OscConfig+0x76>
 8004eb0:	4b80      	ldr	r3, [pc, #512]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a7f      	ldr	r2, [pc, #508]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e02e      	b.n	8004f1c <HAL_RCC_OscConfig+0xd4>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x98>
 8004ec6:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7a      	ldr	r2, [pc, #488]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b78      	ldr	r3, [pc, #480]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a77      	ldr	r2, [pc, #476]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e01d      	b.n	8004f1c <HAL_RCC_OscConfig+0xd4>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0xbc>
 8004eea:	4b72      	ldr	r3, [pc, #456]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a71      	ldr	r2, [pc, #452]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	4b6f      	ldr	r3, [pc, #444]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a6e      	ldr	r2, [pc, #440]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e00b      	b.n	8004f1c <HAL_RCC_OscConfig+0xd4>
 8004f04:	4b6b      	ldr	r3, [pc, #428]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a6a      	ldr	r2, [pc, #424]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4b68      	ldr	r3, [pc, #416]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a67      	ldr	r2, [pc, #412]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d013      	beq.n	8004f4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fd fc56 	bl	80027d4 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f2c:	f7fd fc52 	bl	80027d4 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e200      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	4b5d      	ldr	r3, [pc, #372]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0xe4>
 8004f4a:	e014      	b.n	8004f76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fc42 	bl	80027d4 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f54:	f7fd fc3e 	bl	80027d4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	; 0x64
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e1ec      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	4b53      	ldr	r3, [pc, #332]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x10c>
 8004f72:	e000      	b.n	8004f76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d063      	beq.n	800504a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f82:	4b4c      	ldr	r3, [pc, #304]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f8e:	4b49      	ldr	r3, [pc, #292]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d11c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x18c>
 8004f9a:	4b46      	ldr	r3, [pc, #280]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d116      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	4b43      	ldr	r3, [pc, #268]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_RCC_OscConfig+0x176>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e1c0      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fbe:	4b3d      	ldr	r3, [pc, #244]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4939      	ldr	r1, [pc, #228]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	e03a      	b.n	800504a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d020      	beq.n	800501e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fdc:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fd fbf7 	bl	80027d4 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fea:	f7fd fbf3 	bl	80027d4 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e1a1      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffc:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	4927      	ldr	r1, [pc, #156]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]
 800501c:	e015      	b.n	800504a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800501e:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <HAL_RCC_OscConfig+0x270>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fd fbd6 	bl	80027d4 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800502c:	f7fd fbd2 	bl	80027d4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e180      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503e:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03a      	beq.n	80050cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d019      	beq.n	8005092 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <HAL_RCC_OscConfig+0x274>)
 8005060:	2201      	movs	r2, #1
 8005062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005064:	f7fd fbb6 	bl	80027d4 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506c:	f7fd fbb2 	bl	80027d4 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e160      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <HAL_RCC_OscConfig+0x26c>)
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800508a:	2001      	movs	r0, #1
 800508c:	f000 face 	bl	800562c <RCC_Delay>
 8005090:	e01c      	b.n	80050cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <HAL_RCC_OscConfig+0x274>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005098:	f7fd fb9c 	bl	80027d4 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509e:	e00f      	b.n	80050c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a0:	f7fd fb98 	bl	80027d4 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d908      	bls.n	80050c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e146      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000
 80050b8:	42420000 	.word	0x42420000
 80050bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c0:	4b92      	ldr	r3, [pc, #584]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e9      	bne.n	80050a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80a6 	beq.w	8005226 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050de:	4b8b      	ldr	r3, [pc, #556]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ea:	4b88      	ldr	r3, [pc, #544]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	4a87      	ldr	r2, [pc, #540]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f4:	61d3      	str	r3, [r2, #28]
 80050f6:	4b85      	ldr	r3, [pc, #532]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b82      	ldr	r3, [pc, #520]	; (8005310 <HAL_RCC_OscConfig+0x4c8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d118      	bne.n	8005144 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005112:	4b7f      	ldr	r3, [pc, #508]	; (8005310 <HAL_RCC_OscConfig+0x4c8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a7e      	ldr	r2, [pc, #504]	; (8005310 <HAL_RCC_OscConfig+0x4c8>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511e:	f7fd fb59 	bl	80027d4 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005126:	f7fd fb55 	bl	80027d4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b64      	cmp	r3, #100	; 0x64
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e103      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	4b75      	ldr	r3, [pc, #468]	; (8005310 <HAL_RCC_OscConfig+0x4c8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x312>
 800514c:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	4a6e      	ldr	r2, [pc, #440]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	6213      	str	r3, [r2, #32]
 8005158:	e02d      	b.n	80051b6 <HAL_RCC_OscConfig+0x36e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x334>
 8005162:	4b6a      	ldr	r3, [pc, #424]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	4a69      	ldr	r2, [pc, #420]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	6213      	str	r3, [r2, #32]
 800516e:	4b67      	ldr	r3, [pc, #412]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4a66      	ldr	r2, [pc, #408]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005174:	f023 0304 	bic.w	r3, r3, #4
 8005178:	6213      	str	r3, [r2, #32]
 800517a:	e01c      	b.n	80051b6 <HAL_RCC_OscConfig+0x36e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b05      	cmp	r3, #5
 8005182:	d10c      	bne.n	800519e <HAL_RCC_OscConfig+0x356>
 8005184:	4b61      	ldr	r3, [pc, #388]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4a60      	ldr	r2, [pc, #384]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 800518a:	f043 0304 	orr.w	r3, r3, #4
 800518e:	6213      	str	r3, [r2, #32]
 8005190:	4b5e      	ldr	r3, [pc, #376]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	4a5d      	ldr	r2, [pc, #372]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	6213      	str	r3, [r2, #32]
 800519c:	e00b      	b.n	80051b6 <HAL_RCC_OscConfig+0x36e>
 800519e:	4b5b      	ldr	r3, [pc, #364]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4a5a      	ldr	r2, [pc, #360]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	6213      	str	r3, [r2, #32]
 80051aa:	4b58      	ldr	r3, [pc, #352]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	4a57      	ldr	r2, [pc, #348]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d015      	beq.n	80051ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051be:	f7fd fb09 	bl	80027d4 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7fd fb05 	bl	80027d4 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e0b1      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051dc:	4b4b      	ldr	r3, [pc, #300]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ee      	beq.n	80051c6 <HAL_RCC_OscConfig+0x37e>
 80051e8:	e014      	b.n	8005214 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ea:	f7fd faf3 	bl	80027d4 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f0:	e00a      	b.n	8005208 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f2:	f7fd faef 	bl	80027d4 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e09b      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005208:	4b40      	ldr	r3, [pc, #256]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ee      	bne.n	80051f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d105      	bne.n	8005226 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521a:	4b3c      	ldr	r3, [pc, #240]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	4a3b      	ldr	r2, [pc, #236]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005224:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8087 	beq.w	800533e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005230:	4b36      	ldr	r3, [pc, #216]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 030c 	and.w	r3, r3, #12
 8005238:	2b08      	cmp	r3, #8
 800523a:	d061      	beq.n	8005300 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d146      	bne.n	80052d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005244:	4b33      	ldr	r3, [pc, #204]	; (8005314 <HAL_RCC_OscConfig+0x4cc>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fd fac3 	bl	80027d4 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7fd fabf 	bl	80027d4 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e06d      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005264:	4b29      	ldr	r3, [pc, #164]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f0      	bne.n	8005252 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005278:	d108      	bne.n	800528c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800527a:	4b24      	ldr	r3, [pc, #144]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	4921      	ldr	r1, [pc, #132]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a19      	ldr	r1, [r3, #32]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	430b      	orrs	r3, r1
 800529e:	491b      	ldr	r1, [pc, #108]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <HAL_RCC_OscConfig+0x4cc>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052aa:	f7fd fa93 	bl	80027d4 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fd fa8f 	bl	80027d4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e03d      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x46a>
 80052d0:	e035      	b.n	800533e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <HAL_RCC_OscConfig+0x4cc>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d8:	f7fd fa7c 	bl	80027d4 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e0:	f7fd fa78 	bl	80027d4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e026      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCC_OscConfig+0x4c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x498>
 80052fe:	e01e      	b.n	800533e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e019      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
 800530c:	40021000 	.word	0x40021000
 8005310:	40007000 	.word	0x40007000
 8005314:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCC_OscConfig+0x500>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	429a      	cmp	r2, r3
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d001      	beq.n	800533e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40021000 	.word	0x40021000

0800534c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0d0      	b.n	8005502 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005360:	4b6a      	ldr	r3, [pc, #424]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d910      	bls.n	8005390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b67      	ldr	r3, [pc, #412]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 0207 	bic.w	r2, r3, #7
 8005376:	4965      	ldr	r1, [pc, #404]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b63      	ldr	r3, [pc, #396]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0b8      	b.n	8005502 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d020      	beq.n	80053de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a8:	4b59      	ldr	r3, [pc, #356]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a58      	ldr	r2, [pc, #352]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c0:	4b53      	ldr	r3, [pc, #332]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4a52      	ldr	r2, [pc, #328]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053cc:	4b50      	ldr	r3, [pc, #320]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	494d      	ldr	r1, [pc, #308]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d040      	beq.n	800546c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b47      	ldr	r3, [pc, #284]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d115      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e07f      	b.n	8005502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540a:	4b41      	ldr	r3, [pc, #260]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e073      	b.n	8005502 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541a:	4b3d      	ldr	r3, [pc, #244]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e06b      	b.n	8005502 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800542a:	4b39      	ldr	r3, [pc, #228]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f023 0203 	bic.w	r2, r3, #3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4936      	ldr	r1, [pc, #216]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	4313      	orrs	r3, r2
 800543a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800543c:	f7fd f9ca 	bl	80027d4 <HAL_GetTick>
 8005440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	e00a      	b.n	800545a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005444:	f7fd f9c6 	bl	80027d4 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e053      	b.n	8005502 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 020c 	and.w	r2, r3, #12
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	429a      	cmp	r2, r3
 800546a:	d1eb      	bne.n	8005444 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800546c:	4b27      	ldr	r3, [pc, #156]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d210      	bcs.n	800549c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 0207 	bic.w	r2, r3, #7
 8005482:	4922      	ldr	r1, [pc, #136]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b20      	ldr	r3, [pc, #128]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e032      	b.n	8005502 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a8:	4b19      	ldr	r3, [pc, #100]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4916      	ldr	r1, [pc, #88]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	490e      	ldr	r1, [pc, #56]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054da:	f000 f821 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 80054de:	4602      	mov	r2, r0
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	490a      	ldr	r1, [pc, #40]	; (8005514 <HAL_RCC_ClockConfig+0x1c8>)
 80054ec:	5ccb      	ldrb	r3, [r1, r3]
 80054ee:	fa22 f303 	lsr.w	r3, r2, r3
 80054f2:	4a09      	ldr	r2, [pc, #36]	; (8005518 <HAL_RCC_ClockConfig+0x1cc>)
 80054f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <HAL_RCC_ClockConfig+0x1d0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fd f928 	bl	8002750 <HAL_InitTick>

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40022000 	.word	0x40022000
 8005510:	40021000 	.word	0x40021000
 8005514:	08008fe0 	.word	0x08008fe0
 8005518:	20000034 	.word	0x20000034
 800551c:	20000038 	.word	0x20000038

08005520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b04      	cmp	r3, #4
 8005548:	d002      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x30>
 800554a:	2b08      	cmp	r3, #8
 800554c:	d003      	beq.n	8005556 <HAL_RCC_GetSysClockFreq+0x36>
 800554e:	e027      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005550:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005552:	613b      	str	r3, [r7, #16]
      break;
 8005554:	e027      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	0c9b      	lsrs	r3, r3, #18
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005560:	5cd3      	ldrb	r3, [r2, r3]
 8005562:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	0c5b      	lsrs	r3, r3, #17
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	4a11      	ldr	r2, [pc, #68]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005582:	fb03 f202 	mul.w	r2, r3, r2
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e004      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005594:	fb02 f303 	mul.w	r3, r2, r3
 8005598:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	613b      	str	r3, [r7, #16]
      break;
 800559e:	e002      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80055a2:	613b      	str	r3, [r7, #16]
      break;
 80055a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a6:	693b      	ldr	r3, [r7, #16]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40021000 	.word	0x40021000
 80055b8:	007a1200 	.word	0x007a1200
 80055bc:	08008ff8 	.word	0x08008ff8
 80055c0:	08009008 	.word	0x08009008
 80055c4:	003d0900 	.word	0x003d0900

080055c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055cc:	4b02      	ldr	r3, [pc, #8]	; (80055d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	20000034 	.word	0x20000034

080055dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055e0:	f7ff fff2 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	4903      	ldr	r1, [pc, #12]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f2:	5ccb      	ldrb	r3, [r1, r3]
 80055f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000
 8005600:	08008ff0 	.word	0x08008ff0

08005604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005608:	f7ff ffde 	bl	80055c8 <HAL_RCC_GetHCLKFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b05      	ldr	r3, [pc, #20]	; (8005624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	0adb      	lsrs	r3, r3, #11
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	4903      	ldr	r1, [pc, #12]	; (8005628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021000 	.word	0x40021000
 8005628:	08008ff0 	.word	0x08008ff0

0800562c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005634:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <RCC_Delay+0x34>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <RCC_Delay+0x38>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	0a5b      	lsrs	r3, r3, #9
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005648:	bf00      	nop
  }
  while (Delay --);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1e5a      	subs	r2, r3, #1
 800564e:	60fa      	str	r2, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f9      	bne.n	8005648 <RCC_Delay+0x1c>
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr
 8005660:	20000034 	.word	0x20000034
 8005664:	10624dd3 	.word	0x10624dd3

08005668 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d07d      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005684:	2300      	movs	r3, #0
 8005686:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005688:	4b4f      	ldr	r3, [pc, #316]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005694:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	4a4b      	ldr	r2, [pc, #300]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569e:	61d3      	str	r3, [r2, #28]
 80056a0:	4b49      	ldr	r3, [pc, #292]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ac:	2301      	movs	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b0:	4b46      	ldr	r3, [pc, #280]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d118      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056bc:	4b43      	ldr	r3, [pc, #268]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a42      	ldr	r2, [pc, #264]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c8:	f7fd f884 	bl	80027d4 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ce:	e008      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d0:	f7fd f880 	bl	80027d4 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e06d      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e2:	4b3a      	ldr	r3, [pc, #232]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056ee:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d02e      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	429a      	cmp	r2, r3
 800570a:	d027      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800570c:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005716:	4b2e      	ldr	r3, [pc, #184]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800571c:	4b2c      	ldr	r3, [pc, #176]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005722:	4a29      	ldr	r2, [pc, #164]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d014      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f7fd f84f 	bl	80027d4 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005738:	e00a      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573a:	f7fd f84b 	bl	80027d4 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	f241 3288 	movw	r2, #5000	; 0x1388
 8005748:	4293      	cmp	r3, r2
 800574a:	d901      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e036      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005750:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0ee      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800575c:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4917      	ldr	r1, [pc, #92]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576a:	4313      	orrs	r3, r2
 800576c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d105      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005774:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	490b      	ldr	r1, [pc, #44]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579a:	4313      	orrs	r3, r2
 800579c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	4904      	ldr	r1, [pc, #16]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40007000 	.word	0x40007000
 80057d0:	42420440 	.word	0x42420440

080057d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	2300      	movs	r3, #0
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b10      	cmp	r3, #16
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	f200 808a 	bhi.w	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d045      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d075      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800580a:	e082      	b.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800580c:	4b46      	ldr	r3, [pc, #280]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005812:	4b45      	ldr	r3, [pc, #276]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d07b      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	0c9b      	lsrs	r3, r3, #18
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	4a41      	ldr	r2, [pc, #260]	; (800592c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005828:	5cd3      	ldrb	r3, [r2, r3]
 800582a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d015      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005836:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	0c5b      	lsrs	r3, r3, #17
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	4a3b      	ldr	r2, [pc, #236]	; (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005842:	5cd3      	ldrb	r3, [r2, r3]
 8005844:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005850:	4a38      	ldr	r2, [pc, #224]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	fbb2 f2f3 	udiv	r2, r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	e004      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4a34      	ldr	r2, [pc, #208]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800586c:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005878:	d102      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	61bb      	str	r3, [r7, #24]
      break;
 800587e:	e04a      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	4a2d      	ldr	r2, [pc, #180]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	61bb      	str	r3, [r7, #24]
      break;
 800588e:	e042      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a0:	d108      	bne.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80058ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	e01f      	b.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058be:	d109      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80058c0:	4b19      	ldr	r3, [pc, #100]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80058cc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e00f      	b.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058de:	d11c      	bne.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80058e0:	4b11      	ldr	r3, [pc, #68]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d016      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80058ec:	f24f 4324 	movw	r3, #62500	; 0xf424
 80058f0:	61bb      	str	r3, [r7, #24]
      break;
 80058f2:	e012      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80058f4:	e011      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80058f6:	f7ff fe85 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	0b9b      	lsrs	r3, r3, #14
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	3301      	adds	r3, #1
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	fbb2 f3f3 	udiv	r3, r2, r3
 800590e:	61bb      	str	r3, [r7, #24]
      break;
 8005910:	e004      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005912:	bf00      	nop
 8005914:	e002      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005916:	bf00      	nop
 8005918:	e000      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800591a:	bf00      	nop
    }
  }
  return (frequency);
 800591c:	69bb      	ldr	r3, [r7, #24]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	0800900c 	.word	0x0800900c
 8005930:	0800901c 	.word	0x0800901c
 8005934:	007a1200 	.word	0x007a1200
 8005938:	003d0900 	.word	0x003d0900
 800593c:	aaaaaaab 	.word	0xaaaaaaab

08005940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e041      	b.n	80059d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc fd68 	bl	800243c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f000 fa74 	bl	8005e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d001      	beq.n	80059f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e03a      	b.n	8005a6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <HAL_TIM_Base_Start_IT+0x98>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00e      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x58>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a22:	d009      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x58>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a14      	ldr	r2, [pc, #80]	; (8005a7c <HAL_TIM_Base_Start_IT+0x9c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x58>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d111      	bne.n	8005a5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b06      	cmp	r3, #6
 8005a48:	d010      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5a:	e007      	b.n	8005a6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800

08005a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d122      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d11b      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0202 	mvn.w	r2, #2
 8005ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f9b4 	bl	8005e34 <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f9a7 	bl	8005e22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f9b6 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d122      	bne.n	8005b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d11b      	bne.n	8005b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0204 	mvn.w	r2, #4
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f98a 	bl	8005e34 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f97d 	bl	8005e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f98c 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d122      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d11b      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0208 	mvn.w	r2, #8
 8005b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f960 	bl	8005e34 <HAL_TIM_IC_CaptureCallback>
 8005b74:	e005      	b.n	8005b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f953 	bl	8005e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f962 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0210 	mvn.w	r2, #16
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f936 	bl	8005e34 <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f929 	bl	8005e22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f938 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d10e      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d107      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0201 	mvn.w	r2, #1
 8005c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fb fdfc 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d10e      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c20:	2b80      	cmp	r3, #128	; 0x80
 8005c22:	d107      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa7b 	bl	800612a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d10e      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d107      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f8fc 	bl	8005e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d10e      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d107      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0220 	mvn.w	r2, #32
 8005c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa46 	bl	8006118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e0b4      	b.n	8005e1a <HAL_TIM_ConfigClockSource+0x186>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce8:	d03e      	beq.n	8005d68 <HAL_TIM_ConfigClockSource+0xd4>
 8005cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cee:	f200 8087 	bhi.w	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf6:	f000 8086 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x172>
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfe:	d87f      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b70      	cmp	r3, #112	; 0x70
 8005d02:	d01a      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0xa6>
 8005d04:	2b70      	cmp	r3, #112	; 0x70
 8005d06:	d87b      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b60      	cmp	r3, #96	; 0x60
 8005d0a:	d050      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x11a>
 8005d0c:	2b60      	cmp	r3, #96	; 0x60
 8005d0e:	d877      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b50      	cmp	r3, #80	; 0x50
 8005d12:	d03c      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0xfa>
 8005d14:	2b50      	cmp	r3, #80	; 0x50
 8005d16:	d873      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	d058      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x13a>
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d86f      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b30      	cmp	r3, #48	; 0x30
 8005d22:	d064      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	2b30      	cmp	r3, #48	; 0x30
 8005d26:	d86b      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d060      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d867      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d05c      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d05a      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d38:	e062      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6899      	ldr	r1, [r3, #8]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f000 f968 	bl	800601e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	609a      	str	r2, [r3, #8]
      break;
 8005d66:	e04f      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6899      	ldr	r1, [r3, #8]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f000 f951 	bl	800601e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d8a:	609a      	str	r2, [r3, #8]
      break;
 8005d8c:	e03c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 f8c8 	bl	8005f30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2150      	movs	r1, #80	; 0x50
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f91f 	bl	8005fea <TIM_ITRx_SetConfig>
      break;
 8005dac:	e02c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 f8e6 	bl	8005f8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2160      	movs	r1, #96	; 0x60
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f90f 	bl	8005fea <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e01c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f000 f8a8 	bl	8005f30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2140      	movs	r1, #64	; 0x40
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f8ff 	bl	8005fea <TIM_ITRx_SetConfig>
      break;
 8005dec:	e00c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f000 f8f6 	bl	8005fea <TIM_ITRx_SetConfig>
      break;
 8005dfe:	e003      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	e000      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bc80      	pop	{r7}
 8005e44:	4770      	bx	lr

08005e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr
	...

08005e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a29      	ldr	r2, [pc, #164]	; (8005f24 <TIM_Base_SetConfig+0xb8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <TIM_Base_SetConfig+0x30>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8a:	d007      	beq.n	8005e9c <TIM_Base_SetConfig+0x30>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <TIM_Base_SetConfig+0xbc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_Base_SetConfig+0x30>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <TIM_Base_SetConfig+0xc0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d108      	bne.n	8005eae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <TIM_Base_SetConfig+0xb8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00b      	beq.n	8005ece <TIM_Base_SetConfig+0x62>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d007      	beq.n	8005ece <TIM_Base_SetConfig+0x62>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <TIM_Base_SetConfig+0xbc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d003      	beq.n	8005ece <TIM_Base_SetConfig+0x62>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <TIM_Base_SetConfig+0xc0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d108      	bne.n	8005ee0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <TIM_Base_SetConfig+0xb8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d103      	bne.n	8005f14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	615a      	str	r2, [r3, #20]
}
 8005f1a:	bf00      	nop
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40000800 	.word	0x40000800

08005f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f023 0201 	bic.w	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 030a 	bic.w	r3, r3, #10
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f023 0210 	bic.w	r2, r3, #16
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	031b      	lsls	r3, r3, #12
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	621a      	str	r2, [r3, #32]
}
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	f043 0307 	orr.w	r3, r3, #7
 800600c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	609a      	str	r2, [r3, #8]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800601e:	b480      	push	{r7}
 8006020:	b087      	sub	sp, #28
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006038:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	021a      	lsls	r2, r3, #8
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	431a      	orrs	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4313      	orrs	r3, r2
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	609a      	str	r2, [r3, #8]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006070:	2302      	movs	r3, #2
 8006072:	e046      	b.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a16      	ldr	r2, [pc, #88]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00e      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c0:	d009      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a12      	ldr	r2, [pc, #72]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a10      	ldr	r2, [pc, #64]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d10c      	bne.n	80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800

08006118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr

0800612a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <__errno>:
 800613c:	4b01      	ldr	r3, [pc, #4]	; (8006144 <__errno+0x8>)
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000040 	.word	0x20000040

08006148 <__libc_init_array>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	2600      	movs	r6, #0
 800614c:	4d0c      	ldr	r5, [pc, #48]	; (8006180 <__libc_init_array+0x38>)
 800614e:	4c0d      	ldr	r4, [pc, #52]	; (8006184 <__libc_init_array+0x3c>)
 8006150:	1b64      	subs	r4, r4, r5
 8006152:	10a4      	asrs	r4, r4, #2
 8006154:	42a6      	cmp	r6, r4
 8006156:	d109      	bne.n	800616c <__libc_init_array+0x24>
 8006158:	f002 ff0e 	bl	8008f78 <_init>
 800615c:	2600      	movs	r6, #0
 800615e:	4d0a      	ldr	r5, [pc, #40]	; (8006188 <__libc_init_array+0x40>)
 8006160:	4c0a      	ldr	r4, [pc, #40]	; (800618c <__libc_init_array+0x44>)
 8006162:	1b64      	subs	r4, r4, r5
 8006164:	10a4      	asrs	r4, r4, #2
 8006166:	42a6      	cmp	r6, r4
 8006168:	d105      	bne.n	8006176 <__libc_init_array+0x2e>
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006170:	4798      	blx	r3
 8006172:	3601      	adds	r6, #1
 8006174:	e7ee      	b.n	8006154 <__libc_init_array+0xc>
 8006176:	f855 3b04 	ldr.w	r3, [r5], #4
 800617a:	4798      	blx	r3
 800617c:	3601      	adds	r6, #1
 800617e:	e7f2      	b.n	8006166 <__libc_init_array+0x1e>
 8006180:	080093fc 	.word	0x080093fc
 8006184:	080093fc 	.word	0x080093fc
 8006188:	080093fc 	.word	0x080093fc
 800618c:	08009400 	.word	0x08009400

08006190 <memset>:
 8006190:	4603      	mov	r3, r0
 8006192:	4402      	add	r2, r0
 8006194:	4293      	cmp	r3, r2
 8006196:	d100      	bne.n	800619a <memset+0xa>
 8006198:	4770      	bx	lr
 800619a:	f803 1b01 	strb.w	r1, [r3], #1
 800619e:	e7f9      	b.n	8006194 <memset+0x4>

080061a0 <__cvt>:
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a6:	461f      	mov	r7, r3
 80061a8:	bfbb      	ittet	lt
 80061aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80061ae:	461f      	movlt	r7, r3
 80061b0:	2300      	movge	r3, #0
 80061b2:	232d      	movlt	r3, #45	; 0x2d
 80061b4:	b088      	sub	sp, #32
 80061b6:	4614      	mov	r4, r2
 80061b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80061bc:	7013      	strb	r3, [r2, #0]
 80061be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80061c4:	f023 0820 	bic.w	r8, r3, #32
 80061c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061cc:	d005      	beq.n	80061da <__cvt+0x3a>
 80061ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061d2:	d100      	bne.n	80061d6 <__cvt+0x36>
 80061d4:	3501      	adds	r5, #1
 80061d6:	2302      	movs	r3, #2
 80061d8:	e000      	b.n	80061dc <__cvt+0x3c>
 80061da:	2303      	movs	r3, #3
 80061dc:	aa07      	add	r2, sp, #28
 80061de:	9204      	str	r2, [sp, #16]
 80061e0:	aa06      	add	r2, sp, #24
 80061e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80061e6:	e9cd 3500 	strd	r3, r5, [sp]
 80061ea:	4622      	mov	r2, r4
 80061ec:	463b      	mov	r3, r7
 80061ee:	f000 fcf7 	bl	8006be0 <_dtoa_r>
 80061f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061f6:	4606      	mov	r6, r0
 80061f8:	d102      	bne.n	8006200 <__cvt+0x60>
 80061fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061fc:	07db      	lsls	r3, r3, #31
 80061fe:	d522      	bpl.n	8006246 <__cvt+0xa6>
 8006200:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006204:	eb06 0905 	add.w	r9, r6, r5
 8006208:	d110      	bne.n	800622c <__cvt+0x8c>
 800620a:	7833      	ldrb	r3, [r6, #0]
 800620c:	2b30      	cmp	r3, #48	; 0x30
 800620e:	d10a      	bne.n	8006226 <__cvt+0x86>
 8006210:	2200      	movs	r2, #0
 8006212:	2300      	movs	r3, #0
 8006214:	4620      	mov	r0, r4
 8006216:	4639      	mov	r1, r7
 8006218:	f7fa fbc6 	bl	80009a8 <__aeabi_dcmpeq>
 800621c:	b918      	cbnz	r0, 8006226 <__cvt+0x86>
 800621e:	f1c5 0501 	rsb	r5, r5, #1
 8006222:	f8ca 5000 	str.w	r5, [sl]
 8006226:	f8da 3000 	ldr.w	r3, [sl]
 800622a:	4499      	add	r9, r3
 800622c:	2200      	movs	r2, #0
 800622e:	2300      	movs	r3, #0
 8006230:	4620      	mov	r0, r4
 8006232:	4639      	mov	r1, r7
 8006234:	f7fa fbb8 	bl	80009a8 <__aeabi_dcmpeq>
 8006238:	b108      	cbz	r0, 800623e <__cvt+0x9e>
 800623a:	f8cd 901c 	str.w	r9, [sp, #28]
 800623e:	2230      	movs	r2, #48	; 0x30
 8006240:	9b07      	ldr	r3, [sp, #28]
 8006242:	454b      	cmp	r3, r9
 8006244:	d307      	bcc.n	8006256 <__cvt+0xb6>
 8006246:	4630      	mov	r0, r6
 8006248:	9b07      	ldr	r3, [sp, #28]
 800624a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800624c:	1b9b      	subs	r3, r3, r6
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	b008      	add	sp, #32
 8006252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	9107      	str	r1, [sp, #28]
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e7f0      	b.n	8006240 <__cvt+0xa0>

0800625e <__exponent>:
 800625e:	4603      	mov	r3, r0
 8006260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006262:	2900      	cmp	r1, #0
 8006264:	f803 2b02 	strb.w	r2, [r3], #2
 8006268:	bfb6      	itet	lt
 800626a:	222d      	movlt	r2, #45	; 0x2d
 800626c:	222b      	movge	r2, #43	; 0x2b
 800626e:	4249      	neglt	r1, r1
 8006270:	2909      	cmp	r1, #9
 8006272:	7042      	strb	r2, [r0, #1]
 8006274:	dd2b      	ble.n	80062ce <__exponent+0x70>
 8006276:	f10d 0407 	add.w	r4, sp, #7
 800627a:	46a4      	mov	ip, r4
 800627c:	270a      	movs	r7, #10
 800627e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006282:	460a      	mov	r2, r1
 8006284:	46a6      	mov	lr, r4
 8006286:	fb07 1516 	mls	r5, r7, r6, r1
 800628a:	2a63      	cmp	r2, #99	; 0x63
 800628c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006290:	4631      	mov	r1, r6
 8006292:	f104 34ff 	add.w	r4, r4, #4294967295
 8006296:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800629a:	dcf0      	bgt.n	800627e <__exponent+0x20>
 800629c:	3130      	adds	r1, #48	; 0x30
 800629e:	f1ae 0502 	sub.w	r5, lr, #2
 80062a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062a6:	4629      	mov	r1, r5
 80062a8:	1c44      	adds	r4, r0, #1
 80062aa:	4561      	cmp	r1, ip
 80062ac:	d30a      	bcc.n	80062c4 <__exponent+0x66>
 80062ae:	f10d 0209 	add.w	r2, sp, #9
 80062b2:	eba2 020e 	sub.w	r2, r2, lr
 80062b6:	4565      	cmp	r5, ip
 80062b8:	bf88      	it	hi
 80062ba:	2200      	movhi	r2, #0
 80062bc:	4413      	add	r3, r2
 80062be:	1a18      	subs	r0, r3, r0
 80062c0:	b003      	add	sp, #12
 80062c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062cc:	e7ed      	b.n	80062aa <__exponent+0x4c>
 80062ce:	2330      	movs	r3, #48	; 0x30
 80062d0:	3130      	adds	r1, #48	; 0x30
 80062d2:	7083      	strb	r3, [r0, #2]
 80062d4:	70c1      	strb	r1, [r0, #3]
 80062d6:	1d03      	adds	r3, r0, #4
 80062d8:	e7f1      	b.n	80062be <__exponent+0x60>
	...

080062dc <_printf_float>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	b091      	sub	sp, #68	; 0x44
 80062e2:	460c      	mov	r4, r1
 80062e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80062e8:	4616      	mov	r6, r2
 80062ea:	461f      	mov	r7, r3
 80062ec:	4605      	mov	r5, r0
 80062ee:	f001 fa65 	bl	80077bc <_localeconv_r>
 80062f2:	6803      	ldr	r3, [r0, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	9309      	str	r3, [sp, #36]	; 0x24
 80062f8:	f7f9 ff2a 	bl	8000150 <strlen>
 80062fc:	2300      	movs	r3, #0
 80062fe:	930e      	str	r3, [sp, #56]	; 0x38
 8006300:	f8d8 3000 	ldr.w	r3, [r8]
 8006304:	900a      	str	r0, [sp, #40]	; 0x28
 8006306:	3307      	adds	r3, #7
 8006308:	f023 0307 	bic.w	r3, r3, #7
 800630c:	f103 0208 	add.w	r2, r3, #8
 8006310:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006314:	f8d4 b000 	ldr.w	fp, [r4]
 8006318:	f8c8 2000 	str.w	r2, [r8]
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006324:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006328:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800632c:	930b      	str	r3, [sp, #44]	; 0x2c
 800632e:	f04f 32ff 	mov.w	r2, #4294967295
 8006332:	4640      	mov	r0, r8
 8006334:	4b9c      	ldr	r3, [pc, #624]	; (80065a8 <_printf_float+0x2cc>)
 8006336:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006338:	f7fa fb68 	bl	8000a0c <__aeabi_dcmpun>
 800633c:	bb70      	cbnz	r0, 800639c <_printf_float+0xc0>
 800633e:	f04f 32ff 	mov.w	r2, #4294967295
 8006342:	4640      	mov	r0, r8
 8006344:	4b98      	ldr	r3, [pc, #608]	; (80065a8 <_printf_float+0x2cc>)
 8006346:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006348:	f7fa fb42 	bl	80009d0 <__aeabi_dcmple>
 800634c:	bb30      	cbnz	r0, 800639c <_printf_float+0xc0>
 800634e:	2200      	movs	r2, #0
 8006350:	2300      	movs	r3, #0
 8006352:	4640      	mov	r0, r8
 8006354:	4651      	mov	r1, sl
 8006356:	f7fa fb31 	bl	80009bc <__aeabi_dcmplt>
 800635a:	b110      	cbz	r0, 8006362 <_printf_float+0x86>
 800635c:	232d      	movs	r3, #45	; 0x2d
 800635e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006362:	4b92      	ldr	r3, [pc, #584]	; (80065ac <_printf_float+0x2d0>)
 8006364:	4892      	ldr	r0, [pc, #584]	; (80065b0 <_printf_float+0x2d4>)
 8006366:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800636a:	bf94      	ite	ls
 800636c:	4698      	movls	r8, r3
 800636e:	4680      	movhi	r8, r0
 8006370:	2303      	movs	r3, #3
 8006372:	f04f 0a00 	mov.w	sl, #0
 8006376:	6123      	str	r3, [r4, #16]
 8006378:	f02b 0304 	bic.w	r3, fp, #4
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	4633      	mov	r3, r6
 8006380:	4621      	mov	r1, r4
 8006382:	4628      	mov	r0, r5
 8006384:	9700      	str	r7, [sp, #0]
 8006386:	aa0f      	add	r2, sp, #60	; 0x3c
 8006388:	f000 f9d4 	bl	8006734 <_printf_common>
 800638c:	3001      	adds	r0, #1
 800638e:	f040 8090 	bne.w	80064b2 <_printf_float+0x1d6>
 8006392:	f04f 30ff 	mov.w	r0, #4294967295
 8006396:	b011      	add	sp, #68	; 0x44
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	4642      	mov	r2, r8
 800639e:	4653      	mov	r3, sl
 80063a0:	4640      	mov	r0, r8
 80063a2:	4651      	mov	r1, sl
 80063a4:	f7fa fb32 	bl	8000a0c <__aeabi_dcmpun>
 80063a8:	b148      	cbz	r0, 80063be <_printf_float+0xe2>
 80063aa:	f1ba 0f00 	cmp.w	sl, #0
 80063ae:	bfb8      	it	lt
 80063b0:	232d      	movlt	r3, #45	; 0x2d
 80063b2:	4880      	ldr	r0, [pc, #512]	; (80065b4 <_printf_float+0x2d8>)
 80063b4:	bfb8      	it	lt
 80063b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063ba:	4b7f      	ldr	r3, [pc, #508]	; (80065b8 <_printf_float+0x2dc>)
 80063bc:	e7d3      	b.n	8006366 <_printf_float+0x8a>
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	d142      	bne.n	800644e <_printf_float+0x172>
 80063c8:	2306      	movs	r3, #6
 80063ca:	6063      	str	r3, [r4, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	9206      	str	r2, [sp, #24]
 80063d0:	aa0e      	add	r2, sp, #56	; 0x38
 80063d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80063d6:	aa0d      	add	r2, sp, #52	; 0x34
 80063d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80063dc:	9203      	str	r2, [sp, #12]
 80063de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80063e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	4642      	mov	r2, r8
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	4628      	mov	r0, r5
 80063f0:	4653      	mov	r3, sl
 80063f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80063f4:	f7ff fed4 	bl	80061a0 <__cvt>
 80063f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063fa:	4680      	mov	r8, r0
 80063fc:	2947      	cmp	r1, #71	; 0x47
 80063fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006400:	d108      	bne.n	8006414 <_printf_float+0x138>
 8006402:	1cc8      	adds	r0, r1, #3
 8006404:	db02      	blt.n	800640c <_printf_float+0x130>
 8006406:	6863      	ldr	r3, [r4, #4]
 8006408:	4299      	cmp	r1, r3
 800640a:	dd40      	ble.n	800648e <_printf_float+0x1b2>
 800640c:	f1a9 0902 	sub.w	r9, r9, #2
 8006410:	fa5f f989 	uxtb.w	r9, r9
 8006414:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006418:	d81f      	bhi.n	800645a <_printf_float+0x17e>
 800641a:	464a      	mov	r2, r9
 800641c:	3901      	subs	r1, #1
 800641e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006422:	910d      	str	r1, [sp, #52]	; 0x34
 8006424:	f7ff ff1b 	bl	800625e <__exponent>
 8006428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800642a:	4682      	mov	sl, r0
 800642c:	1813      	adds	r3, r2, r0
 800642e:	2a01      	cmp	r2, #1
 8006430:	6123      	str	r3, [r4, #16]
 8006432:	dc02      	bgt.n	800643a <_printf_float+0x15e>
 8006434:	6822      	ldr	r2, [r4, #0]
 8006436:	07d2      	lsls	r2, r2, #31
 8006438:	d501      	bpl.n	800643e <_printf_float+0x162>
 800643a:	3301      	adds	r3, #1
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006442:	2b00      	cmp	r3, #0
 8006444:	d09b      	beq.n	800637e <_printf_float+0xa2>
 8006446:	232d      	movs	r3, #45	; 0x2d
 8006448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800644c:	e797      	b.n	800637e <_printf_float+0xa2>
 800644e:	2947      	cmp	r1, #71	; 0x47
 8006450:	d1bc      	bne.n	80063cc <_printf_float+0xf0>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1ba      	bne.n	80063cc <_printf_float+0xf0>
 8006456:	2301      	movs	r3, #1
 8006458:	e7b7      	b.n	80063ca <_printf_float+0xee>
 800645a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800645e:	d118      	bne.n	8006492 <_printf_float+0x1b6>
 8006460:	2900      	cmp	r1, #0
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	dd0b      	ble.n	800647e <_printf_float+0x1a2>
 8006466:	6121      	str	r1, [r4, #16]
 8006468:	b913      	cbnz	r3, 8006470 <_printf_float+0x194>
 800646a:	6822      	ldr	r2, [r4, #0]
 800646c:	07d0      	lsls	r0, r2, #31
 800646e:	d502      	bpl.n	8006476 <_printf_float+0x19a>
 8006470:	3301      	adds	r3, #1
 8006472:	440b      	add	r3, r1
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	f04f 0a00 	mov.w	sl, #0
 800647a:	65a1      	str	r1, [r4, #88]	; 0x58
 800647c:	e7df      	b.n	800643e <_printf_float+0x162>
 800647e:	b913      	cbnz	r3, 8006486 <_printf_float+0x1aa>
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	07d2      	lsls	r2, r2, #31
 8006484:	d501      	bpl.n	800648a <_printf_float+0x1ae>
 8006486:	3302      	adds	r3, #2
 8006488:	e7f4      	b.n	8006474 <_printf_float+0x198>
 800648a:	2301      	movs	r3, #1
 800648c:	e7f2      	b.n	8006474 <_printf_float+0x198>
 800648e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006494:	4299      	cmp	r1, r3
 8006496:	db05      	blt.n	80064a4 <_printf_float+0x1c8>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	6121      	str	r1, [r4, #16]
 800649c:	07d8      	lsls	r0, r3, #31
 800649e:	d5ea      	bpl.n	8006476 <_printf_float+0x19a>
 80064a0:	1c4b      	adds	r3, r1, #1
 80064a2:	e7e7      	b.n	8006474 <_printf_float+0x198>
 80064a4:	2900      	cmp	r1, #0
 80064a6:	bfcc      	ite	gt
 80064a8:	2201      	movgt	r2, #1
 80064aa:	f1c1 0202 	rsble	r2, r1, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	e7e0      	b.n	8006474 <_printf_float+0x198>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	055a      	lsls	r2, r3, #21
 80064b6:	d407      	bmi.n	80064c8 <_printf_float+0x1ec>
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	4642      	mov	r2, r8
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	d12b      	bne.n	800651e <_printf_float+0x242>
 80064c6:	e764      	b.n	8006392 <_printf_float+0xb6>
 80064c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064cc:	f240 80dd 	bls.w	800668a <_printf_float+0x3ae>
 80064d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064d4:	2200      	movs	r2, #0
 80064d6:	2300      	movs	r3, #0
 80064d8:	f7fa fa66 	bl	80009a8 <__aeabi_dcmpeq>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d033      	beq.n	8006548 <_printf_float+0x26c>
 80064e0:	2301      	movs	r3, #1
 80064e2:	4631      	mov	r1, r6
 80064e4:	4628      	mov	r0, r5
 80064e6:	4a35      	ldr	r2, [pc, #212]	; (80065bc <_printf_float+0x2e0>)
 80064e8:	47b8      	blx	r7
 80064ea:	3001      	adds	r0, #1
 80064ec:	f43f af51 	beq.w	8006392 <_printf_float+0xb6>
 80064f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064f4:	429a      	cmp	r2, r3
 80064f6:	db02      	blt.n	80064fe <_printf_float+0x222>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	07d8      	lsls	r0, r3, #31
 80064fc:	d50f      	bpl.n	800651e <_printf_float+0x242>
 80064fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	f43f af42 	beq.w	8006392 <_printf_float+0xb6>
 800650e:	f04f 0800 	mov.w	r8, #0
 8006512:	f104 091a 	add.w	r9, r4, #26
 8006516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006518:	3b01      	subs	r3, #1
 800651a:	4543      	cmp	r3, r8
 800651c:	dc09      	bgt.n	8006532 <_printf_float+0x256>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	079b      	lsls	r3, r3, #30
 8006522:	f100 8102 	bmi.w	800672a <_printf_float+0x44e>
 8006526:	68e0      	ldr	r0, [r4, #12]
 8006528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800652a:	4298      	cmp	r0, r3
 800652c:	bfb8      	it	lt
 800652e:	4618      	movlt	r0, r3
 8006530:	e731      	b.n	8006396 <_printf_float+0xba>
 8006532:	2301      	movs	r3, #1
 8006534:	464a      	mov	r2, r9
 8006536:	4631      	mov	r1, r6
 8006538:	4628      	mov	r0, r5
 800653a:	47b8      	blx	r7
 800653c:	3001      	adds	r0, #1
 800653e:	f43f af28 	beq.w	8006392 <_printf_float+0xb6>
 8006542:	f108 0801 	add.w	r8, r8, #1
 8006546:	e7e6      	b.n	8006516 <_printf_float+0x23a>
 8006548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800654a:	2b00      	cmp	r3, #0
 800654c:	dc38      	bgt.n	80065c0 <_printf_float+0x2e4>
 800654e:	2301      	movs	r3, #1
 8006550:	4631      	mov	r1, r6
 8006552:	4628      	mov	r0, r5
 8006554:	4a19      	ldr	r2, [pc, #100]	; (80065bc <_printf_float+0x2e0>)
 8006556:	47b8      	blx	r7
 8006558:	3001      	adds	r0, #1
 800655a:	f43f af1a 	beq.w	8006392 <_printf_float+0xb6>
 800655e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006562:	4313      	orrs	r3, r2
 8006564:	d102      	bne.n	800656c <_printf_float+0x290>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	07d9      	lsls	r1, r3, #31
 800656a:	d5d8      	bpl.n	800651e <_printf_float+0x242>
 800656c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f af0b 	beq.w	8006392 <_printf_float+0xb6>
 800657c:	f04f 0900 	mov.w	r9, #0
 8006580:	f104 0a1a 	add.w	sl, r4, #26
 8006584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006586:	425b      	negs	r3, r3
 8006588:	454b      	cmp	r3, r9
 800658a:	dc01      	bgt.n	8006590 <_printf_float+0x2b4>
 800658c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800658e:	e794      	b.n	80064ba <_printf_float+0x1de>
 8006590:	2301      	movs	r3, #1
 8006592:	4652      	mov	r2, sl
 8006594:	4631      	mov	r1, r6
 8006596:	4628      	mov	r0, r5
 8006598:	47b8      	blx	r7
 800659a:	3001      	adds	r0, #1
 800659c:	f43f aef9 	beq.w	8006392 <_printf_float+0xb6>
 80065a0:	f109 0901 	add.w	r9, r9, #1
 80065a4:	e7ee      	b.n	8006584 <_printf_float+0x2a8>
 80065a6:	bf00      	nop
 80065a8:	7fefffff 	.word	0x7fefffff
 80065ac:	08009024 	.word	0x08009024
 80065b0:	08009028 	.word	0x08009028
 80065b4:	08009030 	.word	0x08009030
 80065b8:	0800902c 	.word	0x0800902c
 80065bc:	08009034 	.word	0x08009034
 80065c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065c4:	429a      	cmp	r2, r3
 80065c6:	bfa8      	it	ge
 80065c8:	461a      	movge	r2, r3
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	4691      	mov	r9, r2
 80065ce:	dc37      	bgt.n	8006640 <_printf_float+0x364>
 80065d0:	f04f 0b00 	mov.w	fp, #0
 80065d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065d8:	f104 021a 	add.w	r2, r4, #26
 80065dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80065e0:	ebaa 0309 	sub.w	r3, sl, r9
 80065e4:	455b      	cmp	r3, fp
 80065e6:	dc33      	bgt.n	8006650 <_printf_float+0x374>
 80065e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065ec:	429a      	cmp	r2, r3
 80065ee:	db3b      	blt.n	8006668 <_printf_float+0x38c>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	07da      	lsls	r2, r3, #31
 80065f4:	d438      	bmi.n	8006668 <_printf_float+0x38c>
 80065f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065fa:	eba3 020a 	sub.w	r2, r3, sl
 80065fe:	eba3 0901 	sub.w	r9, r3, r1
 8006602:	4591      	cmp	r9, r2
 8006604:	bfa8      	it	ge
 8006606:	4691      	movge	r9, r2
 8006608:	f1b9 0f00 	cmp.w	r9, #0
 800660c:	dc34      	bgt.n	8006678 <_printf_float+0x39c>
 800660e:	f04f 0800 	mov.w	r8, #0
 8006612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006616:	f104 0a1a 	add.w	sl, r4, #26
 800661a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	eba3 0309 	sub.w	r3, r3, r9
 8006624:	4543      	cmp	r3, r8
 8006626:	f77f af7a 	ble.w	800651e <_printf_float+0x242>
 800662a:	2301      	movs	r3, #1
 800662c:	4652      	mov	r2, sl
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f aeac 	beq.w	8006392 <_printf_float+0xb6>
 800663a:	f108 0801 	add.w	r8, r8, #1
 800663e:	e7ec      	b.n	800661a <_printf_float+0x33e>
 8006640:	4613      	mov	r3, r2
 8006642:	4631      	mov	r1, r6
 8006644:	4642      	mov	r2, r8
 8006646:	4628      	mov	r0, r5
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	d1c0      	bne.n	80065d0 <_printf_float+0x2f4>
 800664e:	e6a0      	b.n	8006392 <_printf_float+0xb6>
 8006650:	2301      	movs	r3, #1
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	920b      	str	r2, [sp, #44]	; 0x2c
 8006658:	47b8      	blx	r7
 800665a:	3001      	adds	r0, #1
 800665c:	f43f ae99 	beq.w	8006392 <_printf_float+0xb6>
 8006660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006662:	f10b 0b01 	add.w	fp, fp, #1
 8006666:	e7b9      	b.n	80065dc <_printf_float+0x300>
 8006668:	4631      	mov	r1, r6
 800666a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	d1bf      	bne.n	80065f6 <_printf_float+0x31a>
 8006676:	e68c      	b.n	8006392 <_printf_float+0xb6>
 8006678:	464b      	mov	r3, r9
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	eb08 020a 	add.w	r2, r8, sl
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	d1c2      	bne.n	800660e <_printf_float+0x332>
 8006688:	e683      	b.n	8006392 <_printf_float+0xb6>
 800668a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800668c:	2a01      	cmp	r2, #1
 800668e:	dc01      	bgt.n	8006694 <_printf_float+0x3b8>
 8006690:	07db      	lsls	r3, r3, #31
 8006692:	d537      	bpl.n	8006704 <_printf_float+0x428>
 8006694:	2301      	movs	r3, #1
 8006696:	4642      	mov	r2, r8
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	f43f ae77 	beq.w	8006392 <_printf_float+0xb6>
 80066a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f ae6f 	beq.w	8006392 <_printf_float+0xb6>
 80066b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066b8:	2200      	movs	r2, #0
 80066ba:	2300      	movs	r3, #0
 80066bc:	f7fa f974 	bl	80009a8 <__aeabi_dcmpeq>
 80066c0:	b9d8      	cbnz	r0, 80066fa <_printf_float+0x41e>
 80066c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066c4:	f108 0201 	add.w	r2, r8, #1
 80066c8:	3b01      	subs	r3, #1
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	d10e      	bne.n	80066f2 <_printf_float+0x416>
 80066d4:	e65d      	b.n	8006392 <_printf_float+0xb6>
 80066d6:	2301      	movs	r3, #1
 80066d8:	464a      	mov	r2, r9
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f ae56 	beq.w	8006392 <_printf_float+0xb6>
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ec:	3b01      	subs	r3, #1
 80066ee:	4543      	cmp	r3, r8
 80066f0:	dcf1      	bgt.n	80066d6 <_printf_float+0x3fa>
 80066f2:	4653      	mov	r3, sl
 80066f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066f8:	e6e0      	b.n	80064bc <_printf_float+0x1e0>
 80066fa:	f04f 0800 	mov.w	r8, #0
 80066fe:	f104 091a 	add.w	r9, r4, #26
 8006702:	e7f2      	b.n	80066ea <_printf_float+0x40e>
 8006704:	2301      	movs	r3, #1
 8006706:	4642      	mov	r2, r8
 8006708:	e7df      	b.n	80066ca <_printf_float+0x3ee>
 800670a:	2301      	movs	r3, #1
 800670c:	464a      	mov	r2, r9
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	f43f ae3c 	beq.w	8006392 <_printf_float+0xb6>
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	68e3      	ldr	r3, [r4, #12]
 8006720:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006722:	1a5b      	subs	r3, r3, r1
 8006724:	4543      	cmp	r3, r8
 8006726:	dcf0      	bgt.n	800670a <_printf_float+0x42e>
 8006728:	e6fd      	b.n	8006526 <_printf_float+0x24a>
 800672a:	f04f 0800 	mov.w	r8, #0
 800672e:	f104 0919 	add.w	r9, r4, #25
 8006732:	e7f4      	b.n	800671e <_printf_float+0x442>

08006734 <_printf_common>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	4616      	mov	r6, r2
 800673a:	4699      	mov	r9, r3
 800673c:	688a      	ldr	r2, [r1, #8]
 800673e:	690b      	ldr	r3, [r1, #16]
 8006740:	4607      	mov	r7, r0
 8006742:	4293      	cmp	r3, r2
 8006744:	bfb8      	it	lt
 8006746:	4613      	movlt	r3, r2
 8006748:	6033      	str	r3, [r6, #0]
 800674a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800674e:	460c      	mov	r4, r1
 8006750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006754:	b10a      	cbz	r2, 800675a <_printf_common+0x26>
 8006756:	3301      	adds	r3, #1
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	0699      	lsls	r1, r3, #26
 800675e:	bf42      	ittt	mi
 8006760:	6833      	ldrmi	r3, [r6, #0]
 8006762:	3302      	addmi	r3, #2
 8006764:	6033      	strmi	r3, [r6, #0]
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	f015 0506 	ands.w	r5, r5, #6
 800676c:	d106      	bne.n	800677c <_printf_common+0x48>
 800676e:	f104 0a19 	add.w	sl, r4, #25
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	6832      	ldr	r2, [r6, #0]
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	42ab      	cmp	r3, r5
 800677a:	dc28      	bgt.n	80067ce <_printf_common+0x9a>
 800677c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006780:	1e13      	subs	r3, r2, #0
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	bf18      	it	ne
 8006786:	2301      	movne	r3, #1
 8006788:	0692      	lsls	r2, r2, #26
 800678a:	d42d      	bmi.n	80067e8 <_printf_common+0xb4>
 800678c:	4649      	mov	r1, r9
 800678e:	4638      	mov	r0, r7
 8006790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006794:	47c0      	blx	r8
 8006796:	3001      	adds	r0, #1
 8006798:	d020      	beq.n	80067dc <_printf_common+0xa8>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	68e5      	ldr	r5, [r4, #12]
 800679e:	f003 0306 	and.w	r3, r3, #6
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	bf18      	it	ne
 80067a6:	2500      	movne	r5, #0
 80067a8:	6832      	ldr	r2, [r6, #0]
 80067aa:	f04f 0600 	mov.w	r6, #0
 80067ae:	68a3      	ldr	r3, [r4, #8]
 80067b0:	bf08      	it	eq
 80067b2:	1aad      	subeq	r5, r5, r2
 80067b4:	6922      	ldr	r2, [r4, #16]
 80067b6:	bf08      	it	eq
 80067b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067bc:	4293      	cmp	r3, r2
 80067be:	bfc4      	itt	gt
 80067c0:	1a9b      	subgt	r3, r3, r2
 80067c2:	18ed      	addgt	r5, r5, r3
 80067c4:	341a      	adds	r4, #26
 80067c6:	42b5      	cmp	r5, r6
 80067c8:	d11a      	bne.n	8006800 <_printf_common+0xcc>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e008      	b.n	80067e0 <_printf_common+0xac>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4652      	mov	r2, sl
 80067d2:	4649      	mov	r1, r9
 80067d4:	4638      	mov	r0, r7
 80067d6:	47c0      	blx	r8
 80067d8:	3001      	adds	r0, #1
 80067da:	d103      	bne.n	80067e4 <_printf_common+0xb0>
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e4:	3501      	adds	r5, #1
 80067e6:	e7c4      	b.n	8006772 <_printf_common+0x3e>
 80067e8:	2030      	movs	r0, #48	; 0x30
 80067ea:	18e1      	adds	r1, r4, r3
 80067ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067f6:	4422      	add	r2, r4
 80067f8:	3302      	adds	r3, #2
 80067fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067fe:	e7c5      	b.n	800678c <_printf_common+0x58>
 8006800:	2301      	movs	r3, #1
 8006802:	4622      	mov	r2, r4
 8006804:	4649      	mov	r1, r9
 8006806:	4638      	mov	r0, r7
 8006808:	47c0      	blx	r8
 800680a:	3001      	adds	r0, #1
 800680c:	d0e6      	beq.n	80067dc <_printf_common+0xa8>
 800680e:	3601      	adds	r6, #1
 8006810:	e7d9      	b.n	80067c6 <_printf_common+0x92>
	...

08006814 <_printf_i>:
 8006814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006818:	7e0f      	ldrb	r7, [r1, #24]
 800681a:	4691      	mov	r9, r2
 800681c:	2f78      	cmp	r7, #120	; 0x78
 800681e:	4680      	mov	r8, r0
 8006820:	460c      	mov	r4, r1
 8006822:	469a      	mov	sl, r3
 8006824:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800682a:	d807      	bhi.n	800683c <_printf_i+0x28>
 800682c:	2f62      	cmp	r7, #98	; 0x62
 800682e:	d80a      	bhi.n	8006846 <_printf_i+0x32>
 8006830:	2f00      	cmp	r7, #0
 8006832:	f000 80d9 	beq.w	80069e8 <_printf_i+0x1d4>
 8006836:	2f58      	cmp	r7, #88	; 0x58
 8006838:	f000 80a4 	beq.w	8006984 <_printf_i+0x170>
 800683c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006844:	e03a      	b.n	80068bc <_printf_i+0xa8>
 8006846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800684a:	2b15      	cmp	r3, #21
 800684c:	d8f6      	bhi.n	800683c <_printf_i+0x28>
 800684e:	a101      	add	r1, pc, #4	; (adr r1, 8006854 <_printf_i+0x40>)
 8006850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068c1 	.word	0x080068c1
 800685c:	0800683d 	.word	0x0800683d
 8006860:	0800683d 	.word	0x0800683d
 8006864:	0800683d 	.word	0x0800683d
 8006868:	0800683d 	.word	0x0800683d
 800686c:	080068c1 	.word	0x080068c1
 8006870:	0800683d 	.word	0x0800683d
 8006874:	0800683d 	.word	0x0800683d
 8006878:	0800683d 	.word	0x0800683d
 800687c:	0800683d 	.word	0x0800683d
 8006880:	080069cf 	.word	0x080069cf
 8006884:	080068f1 	.word	0x080068f1
 8006888:	080069b1 	.word	0x080069b1
 800688c:	0800683d 	.word	0x0800683d
 8006890:	0800683d 	.word	0x0800683d
 8006894:	080069f1 	.word	0x080069f1
 8006898:	0800683d 	.word	0x0800683d
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	0800683d 	.word	0x0800683d
 80068a4:	0800683d 	.word	0x0800683d
 80068a8:	080069b9 	.word	0x080069b9
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	1d1a      	adds	r2, r3, #4
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	602a      	str	r2, [r5, #0]
 80068b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068bc:	2301      	movs	r3, #1
 80068be:	e0a4      	b.n	8006a0a <_printf_i+0x1f6>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	6829      	ldr	r1, [r5, #0]
 80068c4:	0606      	lsls	r6, r0, #24
 80068c6:	f101 0304 	add.w	r3, r1, #4
 80068ca:	d50a      	bpl.n	80068e2 <_printf_i+0xce>
 80068cc:	680e      	ldr	r6, [r1, #0]
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	2e00      	cmp	r6, #0
 80068d2:	da03      	bge.n	80068dc <_printf_i+0xc8>
 80068d4:	232d      	movs	r3, #45	; 0x2d
 80068d6:	4276      	negs	r6, r6
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068dc:	230a      	movs	r3, #10
 80068de:	485e      	ldr	r0, [pc, #376]	; (8006a58 <_printf_i+0x244>)
 80068e0:	e019      	b.n	8006916 <_printf_i+0x102>
 80068e2:	680e      	ldr	r6, [r1, #0]
 80068e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	bf18      	it	ne
 80068ec:	b236      	sxthne	r6, r6
 80068ee:	e7ef      	b.n	80068d0 <_printf_i+0xbc>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	6820      	ldr	r0, [r4, #0]
 80068f4:	1d19      	adds	r1, r3, #4
 80068f6:	6029      	str	r1, [r5, #0]
 80068f8:	0601      	lsls	r1, r0, #24
 80068fa:	d501      	bpl.n	8006900 <_printf_i+0xec>
 80068fc:	681e      	ldr	r6, [r3, #0]
 80068fe:	e002      	b.n	8006906 <_printf_i+0xf2>
 8006900:	0646      	lsls	r6, r0, #25
 8006902:	d5fb      	bpl.n	80068fc <_printf_i+0xe8>
 8006904:	881e      	ldrh	r6, [r3, #0]
 8006906:	2f6f      	cmp	r7, #111	; 0x6f
 8006908:	bf0c      	ite	eq
 800690a:	2308      	moveq	r3, #8
 800690c:	230a      	movne	r3, #10
 800690e:	4852      	ldr	r0, [pc, #328]	; (8006a58 <_printf_i+0x244>)
 8006910:	2100      	movs	r1, #0
 8006912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006916:	6865      	ldr	r5, [r4, #4]
 8006918:	2d00      	cmp	r5, #0
 800691a:	bfa8      	it	ge
 800691c:	6821      	ldrge	r1, [r4, #0]
 800691e:	60a5      	str	r5, [r4, #8]
 8006920:	bfa4      	itt	ge
 8006922:	f021 0104 	bicge.w	r1, r1, #4
 8006926:	6021      	strge	r1, [r4, #0]
 8006928:	b90e      	cbnz	r6, 800692e <_printf_i+0x11a>
 800692a:	2d00      	cmp	r5, #0
 800692c:	d04d      	beq.n	80069ca <_printf_i+0x1b6>
 800692e:	4615      	mov	r5, r2
 8006930:	fbb6 f1f3 	udiv	r1, r6, r3
 8006934:	fb03 6711 	mls	r7, r3, r1, r6
 8006938:	5dc7      	ldrb	r7, [r0, r7]
 800693a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800693e:	4637      	mov	r7, r6
 8006940:	42bb      	cmp	r3, r7
 8006942:	460e      	mov	r6, r1
 8006944:	d9f4      	bls.n	8006930 <_printf_i+0x11c>
 8006946:	2b08      	cmp	r3, #8
 8006948:	d10b      	bne.n	8006962 <_printf_i+0x14e>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	07de      	lsls	r6, r3, #31
 800694e:	d508      	bpl.n	8006962 <_printf_i+0x14e>
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	6861      	ldr	r1, [r4, #4]
 8006954:	4299      	cmp	r1, r3
 8006956:	bfde      	ittt	le
 8006958:	2330      	movle	r3, #48	; 0x30
 800695a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800695e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006962:	1b52      	subs	r2, r2, r5
 8006964:	6122      	str	r2, [r4, #16]
 8006966:	464b      	mov	r3, r9
 8006968:	4621      	mov	r1, r4
 800696a:	4640      	mov	r0, r8
 800696c:	f8cd a000 	str.w	sl, [sp]
 8006970:	aa03      	add	r2, sp, #12
 8006972:	f7ff fedf 	bl	8006734 <_printf_common>
 8006976:	3001      	adds	r0, #1
 8006978:	d14c      	bne.n	8006a14 <_printf_i+0x200>
 800697a:	f04f 30ff 	mov.w	r0, #4294967295
 800697e:	b004      	add	sp, #16
 8006980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006984:	4834      	ldr	r0, [pc, #208]	; (8006a58 <_printf_i+0x244>)
 8006986:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800698a:	6829      	ldr	r1, [r5, #0]
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006992:	6029      	str	r1, [r5, #0]
 8006994:	061d      	lsls	r5, r3, #24
 8006996:	d514      	bpl.n	80069c2 <_printf_i+0x1ae>
 8006998:	07df      	lsls	r7, r3, #31
 800699a:	bf44      	itt	mi
 800699c:	f043 0320 	orrmi.w	r3, r3, #32
 80069a0:	6023      	strmi	r3, [r4, #0]
 80069a2:	b91e      	cbnz	r6, 80069ac <_printf_i+0x198>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	2310      	movs	r3, #16
 80069ae:	e7af      	b.n	8006910 <_printf_i+0xfc>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	f043 0320 	orr.w	r3, r3, #32
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	2378      	movs	r3, #120	; 0x78
 80069ba:	4828      	ldr	r0, [pc, #160]	; (8006a5c <_printf_i+0x248>)
 80069bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069c0:	e7e3      	b.n	800698a <_printf_i+0x176>
 80069c2:	0659      	lsls	r1, r3, #25
 80069c4:	bf48      	it	mi
 80069c6:	b2b6      	uxthmi	r6, r6
 80069c8:	e7e6      	b.n	8006998 <_printf_i+0x184>
 80069ca:	4615      	mov	r5, r2
 80069cc:	e7bb      	b.n	8006946 <_printf_i+0x132>
 80069ce:	682b      	ldr	r3, [r5, #0]
 80069d0:	6826      	ldr	r6, [r4, #0]
 80069d2:	1d18      	adds	r0, r3, #4
 80069d4:	6961      	ldr	r1, [r4, #20]
 80069d6:	6028      	str	r0, [r5, #0]
 80069d8:	0635      	lsls	r5, r6, #24
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	d501      	bpl.n	80069e2 <_printf_i+0x1ce>
 80069de:	6019      	str	r1, [r3, #0]
 80069e0:	e002      	b.n	80069e8 <_printf_i+0x1d4>
 80069e2:	0670      	lsls	r0, r6, #25
 80069e4:	d5fb      	bpl.n	80069de <_printf_i+0x1ca>
 80069e6:	8019      	strh	r1, [r3, #0]
 80069e8:	2300      	movs	r3, #0
 80069ea:	4615      	mov	r5, r2
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	e7ba      	b.n	8006966 <_printf_i+0x152>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	2100      	movs	r1, #0
 80069f4:	1d1a      	adds	r2, r3, #4
 80069f6:	602a      	str	r2, [r5, #0]
 80069f8:	681d      	ldr	r5, [r3, #0]
 80069fa:	6862      	ldr	r2, [r4, #4]
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 fee9 	bl	80077d4 <memchr>
 8006a02:	b108      	cbz	r0, 8006a08 <_printf_i+0x1f4>
 8006a04:	1b40      	subs	r0, r0, r5
 8006a06:	6060      	str	r0, [r4, #4]
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	6123      	str	r3, [r4, #16]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a12:	e7a8      	b.n	8006966 <_printf_i+0x152>
 8006a14:	462a      	mov	r2, r5
 8006a16:	4649      	mov	r1, r9
 8006a18:	4640      	mov	r0, r8
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	47d0      	blx	sl
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0ab      	beq.n	800697a <_printf_i+0x166>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	079b      	lsls	r3, r3, #30
 8006a26:	d413      	bmi.n	8006a50 <_printf_i+0x23c>
 8006a28:	68e0      	ldr	r0, [r4, #12]
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	4298      	cmp	r0, r3
 8006a2e:	bfb8      	it	lt
 8006a30:	4618      	movlt	r0, r3
 8006a32:	e7a4      	b.n	800697e <_printf_i+0x16a>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4632      	mov	r2, r6
 8006a38:	4649      	mov	r1, r9
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	47d0      	blx	sl
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d09b      	beq.n	800697a <_printf_i+0x166>
 8006a42:	3501      	adds	r5, #1
 8006a44:	68e3      	ldr	r3, [r4, #12]
 8006a46:	9903      	ldr	r1, [sp, #12]
 8006a48:	1a5b      	subs	r3, r3, r1
 8006a4a:	42ab      	cmp	r3, r5
 8006a4c:	dcf2      	bgt.n	8006a34 <_printf_i+0x220>
 8006a4e:	e7eb      	b.n	8006a28 <_printf_i+0x214>
 8006a50:	2500      	movs	r5, #0
 8006a52:	f104 0619 	add.w	r6, r4, #25
 8006a56:	e7f5      	b.n	8006a44 <_printf_i+0x230>
 8006a58:	08009036 	.word	0x08009036
 8006a5c:	08009047 	.word	0x08009047

08006a60 <sniprintf>:
 8006a60:	b40c      	push	{r2, r3}
 8006a62:	b530      	push	{r4, r5, lr}
 8006a64:	4b17      	ldr	r3, [pc, #92]	; (8006ac4 <sniprintf+0x64>)
 8006a66:	1e0c      	subs	r4, r1, #0
 8006a68:	681d      	ldr	r5, [r3, #0]
 8006a6a:	b09d      	sub	sp, #116	; 0x74
 8006a6c:	da08      	bge.n	8006a80 <sniprintf+0x20>
 8006a6e:	238b      	movs	r3, #139	; 0x8b
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	b01d      	add	sp, #116	; 0x74
 8006a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a7c:	b002      	add	sp, #8
 8006a7e:	4770      	bx	lr
 8006a80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006a84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a88:	bf0c      	ite	eq
 8006a8a:	4623      	moveq	r3, r4
 8006a8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a90:	9304      	str	r3, [sp, #16]
 8006a92:	9307      	str	r3, [sp, #28]
 8006a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a98:	9002      	str	r0, [sp, #8]
 8006a9a:	9006      	str	r0, [sp, #24]
 8006a9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	ab21      	add	r3, sp, #132	; 0x84
 8006aa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006aa6:	a902      	add	r1, sp, #8
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	f001 fb7d 	bl	80081a8 <_svfiprintf_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	bfbc      	itt	lt
 8006ab2:	238b      	movlt	r3, #139	; 0x8b
 8006ab4:	602b      	strlt	r3, [r5, #0]
 8006ab6:	2c00      	cmp	r4, #0
 8006ab8:	d0dd      	beq.n	8006a76 <sniprintf+0x16>
 8006aba:	2200      	movs	r2, #0
 8006abc:	9b02      	ldr	r3, [sp, #8]
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	e7d9      	b.n	8006a76 <sniprintf+0x16>
 8006ac2:	bf00      	nop
 8006ac4:	20000040 	.word	0x20000040

08006ac8 <quorem>:
 8006ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006acc:	6903      	ldr	r3, [r0, #16]
 8006ace:	690c      	ldr	r4, [r1, #16]
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	42a3      	cmp	r3, r4
 8006ad4:	f2c0 8082 	blt.w	8006bdc <quorem+0x114>
 8006ad8:	3c01      	subs	r4, #1
 8006ada:	f100 0514 	add.w	r5, r0, #20
 8006ade:	f101 0814 	add.w	r8, r1, #20
 8006ae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006aec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006af0:	3301      	adds	r3, #1
 8006af2:	429a      	cmp	r2, r3
 8006af4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006af8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006afc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b00:	d331      	bcc.n	8006b66 <quorem+0x9e>
 8006b02:	f04f 0e00 	mov.w	lr, #0
 8006b06:	4640      	mov	r0, r8
 8006b08:	46ac      	mov	ip, r5
 8006b0a:	46f2      	mov	sl, lr
 8006b0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b10:	b293      	uxth	r3, r2
 8006b12:	fb06 e303 	mla	r3, r6, r3, lr
 8006b16:	0c12      	lsrs	r2, r2, #16
 8006b18:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	fb06 e202 	mla	r2, r6, r2, lr
 8006b22:	ebaa 0303 	sub.w	r3, sl, r3
 8006b26:	f8dc a000 	ldr.w	sl, [ip]
 8006b2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b2e:	fa1f fa8a 	uxth.w	sl, sl
 8006b32:	4453      	add	r3, sl
 8006b34:	f8dc a000 	ldr.w	sl, [ip]
 8006b38:	b292      	uxth	r2, r2
 8006b3a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b48:	4581      	cmp	r9, r0
 8006b4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b4e:	f84c 3b04 	str.w	r3, [ip], #4
 8006b52:	d2db      	bcs.n	8006b0c <quorem+0x44>
 8006b54:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b58:	b92b      	cbnz	r3, 8006b66 <quorem+0x9e>
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	3b04      	subs	r3, #4
 8006b5e:	429d      	cmp	r5, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	d32f      	bcc.n	8006bc4 <quorem+0xfc>
 8006b64:	613c      	str	r4, [r7, #16]
 8006b66:	4638      	mov	r0, r7
 8006b68:	f001 f8ce 	bl	8007d08 <__mcmp>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	db25      	blt.n	8006bbc <quorem+0xf4>
 8006b70:	4628      	mov	r0, r5
 8006b72:	f04f 0c00 	mov.w	ip, #0
 8006b76:	3601      	adds	r6, #1
 8006b78:	f858 1b04 	ldr.w	r1, [r8], #4
 8006b7c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b80:	b28b      	uxth	r3, r1
 8006b82:	ebac 0303 	sub.w	r3, ip, r3
 8006b86:	fa1f f28e 	uxth.w	r2, lr
 8006b8a:	4413      	add	r3, r2
 8006b8c:	0c0a      	lsrs	r2, r1, #16
 8006b8e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b9c:	45c1      	cmp	r9, r8
 8006b9e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ba2:	f840 3b04 	str.w	r3, [r0], #4
 8006ba6:	d2e7      	bcs.n	8006b78 <quorem+0xb0>
 8006ba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bb0:	b922      	cbnz	r2, 8006bbc <quorem+0xf4>
 8006bb2:	3b04      	subs	r3, #4
 8006bb4:	429d      	cmp	r5, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	d30a      	bcc.n	8006bd0 <quorem+0x108>
 8006bba:	613c      	str	r4, [r7, #16]
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	b003      	add	sp, #12
 8006bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	3b04      	subs	r3, #4
 8006bc8:	2a00      	cmp	r2, #0
 8006bca:	d1cb      	bne.n	8006b64 <quorem+0x9c>
 8006bcc:	3c01      	subs	r4, #1
 8006bce:	e7c6      	b.n	8006b5e <quorem+0x96>
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	d1f0      	bne.n	8006bba <quorem+0xf2>
 8006bd8:	3c01      	subs	r4, #1
 8006bda:	e7eb      	b.n	8006bb4 <quorem+0xec>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e7ee      	b.n	8006bbe <quorem+0xf6>

08006be0 <_dtoa_r>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	4616      	mov	r6, r2
 8006be6:	461f      	mov	r7, r3
 8006be8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006bea:	b099      	sub	sp, #100	; 0x64
 8006bec:	4605      	mov	r5, r0
 8006bee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006bf2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006bf6:	b974      	cbnz	r4, 8006c16 <_dtoa_r+0x36>
 8006bf8:	2010      	movs	r0, #16
 8006bfa:	f000 fde3 	bl	80077c4 <malloc>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	6268      	str	r0, [r5, #36]	; 0x24
 8006c02:	b920      	cbnz	r0, 8006c0e <_dtoa_r+0x2e>
 8006c04:	21ea      	movs	r1, #234	; 0xea
 8006c06:	4ba8      	ldr	r3, [pc, #672]	; (8006ea8 <_dtoa_r+0x2c8>)
 8006c08:	48a8      	ldr	r0, [pc, #672]	; (8006eac <_dtoa_r+0x2cc>)
 8006c0a:	f001 fbdd 	bl	80083c8 <__assert_func>
 8006c0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c12:	6004      	str	r4, [r0, #0]
 8006c14:	60c4      	str	r4, [r0, #12]
 8006c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	b151      	cbz	r1, 8006c32 <_dtoa_r+0x52>
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4093      	lsls	r3, r2
 8006c22:	604a      	str	r2, [r1, #4]
 8006c24:	608b      	str	r3, [r1, #8]
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 fe30 	bl	800788c <_Bfree>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	1e3b      	subs	r3, r7, #0
 8006c34:	bfaf      	iteee	ge
 8006c36:	2300      	movge	r3, #0
 8006c38:	2201      	movlt	r2, #1
 8006c3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c3e:	9305      	strlt	r3, [sp, #20]
 8006c40:	bfa8      	it	ge
 8006c42:	f8c8 3000 	strge.w	r3, [r8]
 8006c46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006c4a:	4b99      	ldr	r3, [pc, #612]	; (8006eb0 <_dtoa_r+0x2d0>)
 8006c4c:	bfb8      	it	lt
 8006c4e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c52:	ea33 0309 	bics.w	r3, r3, r9
 8006c56:	d119      	bne.n	8006c8c <_dtoa_r+0xac>
 8006c58:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c64:	4333      	orrs	r3, r6
 8006c66:	f000 857f 	beq.w	8007768 <_dtoa_r+0xb88>
 8006c6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c6c:	b953      	cbnz	r3, 8006c84 <_dtoa_r+0xa4>
 8006c6e:	4b91      	ldr	r3, [pc, #580]	; (8006eb4 <_dtoa_r+0x2d4>)
 8006c70:	e022      	b.n	8006cb8 <_dtoa_r+0xd8>
 8006c72:	4b91      	ldr	r3, [pc, #580]	; (8006eb8 <_dtoa_r+0x2d8>)
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	3308      	adds	r3, #8
 8006c78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	9803      	ldr	r0, [sp, #12]
 8006c7e:	b019      	add	sp, #100	; 0x64
 8006c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c84:	4b8b      	ldr	r3, [pc, #556]	; (8006eb4 <_dtoa_r+0x2d4>)
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	3303      	adds	r3, #3
 8006c8a:	e7f5      	b.n	8006c78 <_dtoa_r+0x98>
 8006c8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f7f9 fe84 	bl	80009a8 <__aeabi_dcmpeq>
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	b158      	cbz	r0, 8006cbc <_dtoa_r+0xdc>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8558 	beq.w	8007762 <_dtoa_r+0xb82>
 8006cb2:	4882      	ldr	r0, [pc, #520]	; (8006ebc <_dtoa_r+0x2dc>)
 8006cb4:	6018      	str	r0, [r3, #0]
 8006cb6:	1e43      	subs	r3, r0, #1
 8006cb8:	9303      	str	r3, [sp, #12]
 8006cba:	e7df      	b.n	8006c7c <_dtoa_r+0x9c>
 8006cbc:	ab16      	add	r3, sp, #88	; 0x58
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	ab17      	add	r3, sp, #92	; 0x5c
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006cca:	f001 f8c5 	bl	8007e58 <__d2b>
 8006cce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006cd2:	4683      	mov	fp, r0
 8006cd4:	2c00      	cmp	r4, #0
 8006cd6:	d07f      	beq.n	8006dd8 <_dtoa_r+0x1f8>
 8006cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cde:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006cea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006cee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4b72      	ldr	r3, [pc, #456]	; (8006ec0 <_dtoa_r+0x2e0>)
 8006cf6:	f7f9 fa37 	bl	8000168 <__aeabi_dsub>
 8006cfa:	a365      	add	r3, pc, #404	; (adr r3, 8006e90 <_dtoa_r+0x2b0>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f7f9 fbea 	bl	80004d8 <__aeabi_dmul>
 8006d04:	a364      	add	r3, pc, #400	; (adr r3, 8006e98 <_dtoa_r+0x2b8>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f7f9 fa2f 	bl	800016c <__adddf3>
 8006d0e:	4606      	mov	r6, r0
 8006d10:	4620      	mov	r0, r4
 8006d12:	460f      	mov	r7, r1
 8006d14:	f7f9 fb76 	bl	8000404 <__aeabi_i2d>
 8006d18:	a361      	add	r3, pc, #388	; (adr r3, 8006ea0 <_dtoa_r+0x2c0>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 fbdb 	bl	80004d8 <__aeabi_dmul>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4630      	mov	r0, r6
 8006d28:	4639      	mov	r1, r7
 8006d2a:	f7f9 fa1f 	bl	800016c <__adddf3>
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460f      	mov	r7, r1
 8006d32:	f7f9 fe81 	bl	8000a38 <__aeabi_d2iz>
 8006d36:	2200      	movs	r2, #0
 8006d38:	4682      	mov	sl, r0
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fe3c 	bl	80009bc <__aeabi_dcmplt>
 8006d44:	b148      	cbz	r0, 8006d5a <_dtoa_r+0x17a>
 8006d46:	4650      	mov	r0, sl
 8006d48:	f7f9 fb5c 	bl	8000404 <__aeabi_i2d>
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	463b      	mov	r3, r7
 8006d50:	f7f9 fe2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006d54:	b908      	cbnz	r0, 8006d5a <_dtoa_r+0x17a>
 8006d56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d5a:	f1ba 0f16 	cmp.w	sl, #22
 8006d5e:	d858      	bhi.n	8006e12 <_dtoa_r+0x232>
 8006d60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d64:	4b57      	ldr	r3, [pc, #348]	; (8006ec4 <_dtoa_r+0x2e4>)
 8006d66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	f7f9 fe25 	bl	80009bc <__aeabi_dcmplt>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d04f      	beq.n	8006e16 <_dtoa_r+0x236>
 8006d76:	2300      	movs	r3, #0
 8006d78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d80:	1b1c      	subs	r4, r3, r4
 8006d82:	1e63      	subs	r3, r4, #1
 8006d84:	9309      	str	r3, [sp, #36]	; 0x24
 8006d86:	bf49      	itett	mi
 8006d88:	f1c4 0301 	rsbmi	r3, r4, #1
 8006d8c:	2300      	movpl	r3, #0
 8006d8e:	9306      	strmi	r3, [sp, #24]
 8006d90:	2300      	movmi	r3, #0
 8006d92:	bf54      	ite	pl
 8006d94:	9306      	strpl	r3, [sp, #24]
 8006d96:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d98:	f1ba 0f00 	cmp.w	sl, #0
 8006d9c:	db3d      	blt.n	8006e1a <_dtoa_r+0x23a>
 8006d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006da4:	4453      	add	r3, sl
 8006da6:	9309      	str	r3, [sp, #36]	; 0x24
 8006da8:	2300      	movs	r3, #0
 8006daa:	930a      	str	r3, [sp, #40]	; 0x28
 8006dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dae:	2b09      	cmp	r3, #9
 8006db0:	f200 808c 	bhi.w	8006ecc <_dtoa_r+0x2ec>
 8006db4:	2b05      	cmp	r3, #5
 8006db6:	bfc4      	itt	gt
 8006db8:	3b04      	subgt	r3, #4
 8006dba:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dbe:	bfc8      	it	gt
 8006dc0:	2400      	movgt	r4, #0
 8006dc2:	f1a3 0302 	sub.w	r3, r3, #2
 8006dc6:	bfd8      	it	le
 8006dc8:	2401      	movle	r4, #1
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	f200 808a 	bhi.w	8006ee4 <_dtoa_r+0x304>
 8006dd0:	e8df f003 	tbb	[pc, r3]
 8006dd4:	5b4d4f2d 	.word	0x5b4d4f2d
 8006dd8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006ddc:	441c      	add	r4, r3
 8006dde:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	bfc3      	ittte	gt
 8006de6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006dee:	fa09 f303 	lslgt.w	r3, r9, r3
 8006df2:	f1c3 0320 	rsble	r3, r3, #32
 8006df6:	bfc6      	itte	gt
 8006df8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006dfc:	4318      	orrgt	r0, r3
 8006dfe:	fa06 f003 	lslle.w	r0, r6, r3
 8006e02:	f7f9 faef 	bl	80003e4 <__aeabi_ui2d>
 8006e06:	2301      	movs	r3, #1
 8006e08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006e0c:	3c01      	subs	r4, #1
 8006e0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e10:	e76f      	b.n	8006cf2 <_dtoa_r+0x112>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e7b2      	b.n	8006d7c <_dtoa_r+0x19c>
 8006e16:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e18:	e7b1      	b.n	8006d7e <_dtoa_r+0x19e>
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	eba3 030a 	sub.w	r3, r3, sl
 8006e20:	9306      	str	r3, [sp, #24]
 8006e22:	f1ca 0300 	rsb	r3, sl, #0
 8006e26:	930a      	str	r3, [sp, #40]	; 0x28
 8006e28:	2300      	movs	r3, #0
 8006e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8006e2c:	e7be      	b.n	8006dac <_dtoa_r+0x1cc>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dc58      	bgt.n	8006eea <_dtoa_r+0x30a>
 8006e38:	f04f 0901 	mov.w	r9, #1
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e42:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006e46:	2200      	movs	r2, #0
 8006e48:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006e4a:	6042      	str	r2, [r0, #4]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	f102 0614 	add.w	r6, r2, #20
 8006e52:	429e      	cmp	r6, r3
 8006e54:	6841      	ldr	r1, [r0, #4]
 8006e56:	d94e      	bls.n	8006ef6 <_dtoa_r+0x316>
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 fcd7 	bl	800780c <_Balloc>
 8006e5e:	9003      	str	r0, [sp, #12]
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d14c      	bne.n	8006efe <_dtoa_r+0x31e>
 8006e64:	4602      	mov	r2, r0
 8006e66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e6a:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <_dtoa_r+0x2e8>)
 8006e6c:	e6cc      	b.n	8006c08 <_dtoa_r+0x28>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e7de      	b.n	8006e30 <_dtoa_r+0x250>
 8006e72:	2300      	movs	r3, #0
 8006e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e78:	eb0a 0903 	add.w	r9, sl, r3
 8006e7c:	f109 0301 	add.w	r3, r9, #1
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	9308      	str	r3, [sp, #32]
 8006e84:	bfb8      	it	lt
 8006e86:	2301      	movlt	r3, #1
 8006e88:	e7dd      	b.n	8006e46 <_dtoa_r+0x266>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e7f2      	b.n	8006e74 <_dtoa_r+0x294>
 8006e8e:	bf00      	nop
 8006e90:	636f4361 	.word	0x636f4361
 8006e94:	3fd287a7 	.word	0x3fd287a7
 8006e98:	8b60c8b3 	.word	0x8b60c8b3
 8006e9c:	3fc68a28 	.word	0x3fc68a28
 8006ea0:	509f79fb 	.word	0x509f79fb
 8006ea4:	3fd34413 	.word	0x3fd34413
 8006ea8:	08009065 	.word	0x08009065
 8006eac:	0800907c 	.word	0x0800907c
 8006eb0:	7ff00000 	.word	0x7ff00000
 8006eb4:	08009061 	.word	0x08009061
 8006eb8:	08009058 	.word	0x08009058
 8006ebc:	08009035 	.word	0x08009035
 8006ec0:	3ff80000 	.word	0x3ff80000
 8006ec4:	08009170 	.word	0x08009170
 8006ec8:	080090d7 	.word	0x080090d7
 8006ecc:	2401      	movs	r4, #1
 8006ece:	2300      	movs	r3, #0
 8006ed0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006ed2:	9322      	str	r3, [sp, #136]	; 0x88
 8006ed4:	f04f 39ff 	mov.w	r9, #4294967295
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2312      	movs	r3, #18
 8006edc:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ee0:	9223      	str	r2, [sp, #140]	; 0x8c
 8006ee2:	e7b0      	b.n	8006e46 <_dtoa_r+0x266>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ee8:	e7f4      	b.n	8006ed4 <_dtoa_r+0x2f4>
 8006eea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006eee:	464b      	mov	r3, r9
 8006ef0:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ef4:	e7a7      	b.n	8006e46 <_dtoa_r+0x266>
 8006ef6:	3101      	adds	r1, #1
 8006ef8:	6041      	str	r1, [r0, #4]
 8006efa:	0052      	lsls	r2, r2, #1
 8006efc:	e7a7      	b.n	8006e4e <_dtoa_r+0x26e>
 8006efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f00:	9a03      	ldr	r2, [sp, #12]
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	9b08      	ldr	r3, [sp, #32]
 8006f06:	2b0e      	cmp	r3, #14
 8006f08:	f200 80a8 	bhi.w	800705c <_dtoa_r+0x47c>
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	f000 80a5 	beq.w	800705c <_dtoa_r+0x47c>
 8006f12:	f1ba 0f00 	cmp.w	sl, #0
 8006f16:	dd34      	ble.n	8006f82 <_dtoa_r+0x3a2>
 8006f18:	4a9a      	ldr	r2, [pc, #616]	; (8007184 <_dtoa_r+0x5a4>)
 8006f1a:	f00a 030f 	and.w	r3, sl, #15
 8006f1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f22:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f2e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006f32:	d016      	beq.n	8006f62 <_dtoa_r+0x382>
 8006f34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f38:	4b93      	ldr	r3, [pc, #588]	; (8007188 <_dtoa_r+0x5a8>)
 8006f3a:	2703      	movs	r7, #3
 8006f3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f40:	f7f9 fbf4 	bl	800072c <__aeabi_ddiv>
 8006f44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f48:	f004 040f 	and.w	r4, r4, #15
 8006f4c:	4e8e      	ldr	r6, [pc, #568]	; (8007188 <_dtoa_r+0x5a8>)
 8006f4e:	b954      	cbnz	r4, 8006f66 <_dtoa_r+0x386>
 8006f50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f58:	f7f9 fbe8 	bl	800072c <__aeabi_ddiv>
 8006f5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f60:	e029      	b.n	8006fb6 <_dtoa_r+0x3d6>
 8006f62:	2702      	movs	r7, #2
 8006f64:	e7f2      	b.n	8006f4c <_dtoa_r+0x36c>
 8006f66:	07e1      	lsls	r1, r4, #31
 8006f68:	d508      	bpl.n	8006f7c <_dtoa_r+0x39c>
 8006f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f72:	f7f9 fab1 	bl	80004d8 <__aeabi_dmul>
 8006f76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f7a:	3701      	adds	r7, #1
 8006f7c:	1064      	asrs	r4, r4, #1
 8006f7e:	3608      	adds	r6, #8
 8006f80:	e7e5      	b.n	8006f4e <_dtoa_r+0x36e>
 8006f82:	f000 80a5 	beq.w	80070d0 <_dtoa_r+0x4f0>
 8006f86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f8a:	f1ca 0400 	rsb	r4, sl, #0
 8006f8e:	4b7d      	ldr	r3, [pc, #500]	; (8007184 <_dtoa_r+0x5a4>)
 8006f90:	f004 020f 	and.w	r2, r4, #15
 8006f94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fa9c 	bl	80004d8 <__aeabi_dmul>
 8006fa0:	2702      	movs	r7, #2
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fa8:	4e77      	ldr	r6, [pc, #476]	; (8007188 <_dtoa_r+0x5a8>)
 8006faa:	1124      	asrs	r4, r4, #4
 8006fac:	2c00      	cmp	r4, #0
 8006fae:	f040 8084 	bne.w	80070ba <_dtoa_r+0x4da>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1d2      	bne.n	8006f5c <_dtoa_r+0x37c>
 8006fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 808b 	beq.w	80070d4 <_dtoa_r+0x4f4>
 8006fbe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006fc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006fc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4b6f      	ldr	r3, [pc, #444]	; (800718c <_dtoa_r+0x5ac>)
 8006fce:	f7f9 fcf5 	bl	80009bc <__aeabi_dcmplt>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d07e      	beq.n	80070d4 <_dtoa_r+0x4f4>
 8006fd6:	9b08      	ldr	r3, [sp, #32]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d07b      	beq.n	80070d4 <_dtoa_r+0x4f4>
 8006fdc:	f1b9 0f00 	cmp.w	r9, #0
 8006fe0:	dd38      	ble.n	8007054 <_dtoa_r+0x474>
 8006fe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4b69      	ldr	r3, [pc, #420]	; (8007190 <_dtoa_r+0x5b0>)
 8006fea:	f7f9 fa75 	bl	80004d8 <__aeabi_dmul>
 8006fee:	464c      	mov	r4, r9
 8006ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006ff8:	3701      	adds	r7, #1
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	f7f9 fa02 	bl	8000404 <__aeabi_i2d>
 8007000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007004:	f7f9 fa68 	bl	80004d8 <__aeabi_dmul>
 8007008:	2200      	movs	r2, #0
 800700a:	4b62      	ldr	r3, [pc, #392]	; (8007194 <_dtoa_r+0x5b4>)
 800700c:	f7f9 f8ae 	bl	800016c <__adddf3>
 8007010:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007014:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007018:	9611      	str	r6, [sp, #68]	; 0x44
 800701a:	2c00      	cmp	r4, #0
 800701c:	d15d      	bne.n	80070da <_dtoa_r+0x4fa>
 800701e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007022:	2200      	movs	r2, #0
 8007024:	4b5c      	ldr	r3, [pc, #368]	; (8007198 <_dtoa_r+0x5b8>)
 8007026:	f7f9 f89f 	bl	8000168 <__aeabi_dsub>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007032:	4633      	mov	r3, r6
 8007034:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007036:	f7f9 fcdf 	bl	80009f8 <__aeabi_dcmpgt>
 800703a:	2800      	cmp	r0, #0
 800703c:	f040 829c 	bne.w	8007578 <_dtoa_r+0x998>
 8007040:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007046:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800704a:	f7f9 fcb7 	bl	80009bc <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	f040 8290 	bne.w	8007574 <_dtoa_r+0x994>
 8007054:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007058:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800705c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800705e:	2b00      	cmp	r3, #0
 8007060:	f2c0 8152 	blt.w	8007308 <_dtoa_r+0x728>
 8007064:	f1ba 0f0e 	cmp.w	sl, #14
 8007068:	f300 814e 	bgt.w	8007308 <_dtoa_r+0x728>
 800706c:	4b45      	ldr	r3, [pc, #276]	; (8007184 <_dtoa_r+0x5a4>)
 800706e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007072:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007076:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800707a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800707c:	2b00      	cmp	r3, #0
 800707e:	f280 80db 	bge.w	8007238 <_dtoa_r+0x658>
 8007082:	9b08      	ldr	r3, [sp, #32]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f300 80d7 	bgt.w	8007238 <_dtoa_r+0x658>
 800708a:	f040 8272 	bne.w	8007572 <_dtoa_r+0x992>
 800708e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007092:	2200      	movs	r2, #0
 8007094:	4b40      	ldr	r3, [pc, #256]	; (8007198 <_dtoa_r+0x5b8>)
 8007096:	f7f9 fa1f 	bl	80004d8 <__aeabi_dmul>
 800709a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800709e:	f7f9 fca1 	bl	80009e4 <__aeabi_dcmpge>
 80070a2:	9c08      	ldr	r4, [sp, #32]
 80070a4:	4626      	mov	r6, r4
 80070a6:	2800      	cmp	r0, #0
 80070a8:	f040 8248 	bne.w	800753c <_dtoa_r+0x95c>
 80070ac:	2331      	movs	r3, #49	; 0x31
 80070ae:	9f03      	ldr	r7, [sp, #12]
 80070b0:	f10a 0a01 	add.w	sl, sl, #1
 80070b4:	f807 3b01 	strb.w	r3, [r7], #1
 80070b8:	e244      	b.n	8007544 <_dtoa_r+0x964>
 80070ba:	07e2      	lsls	r2, r4, #31
 80070bc:	d505      	bpl.n	80070ca <_dtoa_r+0x4ea>
 80070be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070c2:	f7f9 fa09 	bl	80004d8 <__aeabi_dmul>
 80070c6:	2301      	movs	r3, #1
 80070c8:	3701      	adds	r7, #1
 80070ca:	1064      	asrs	r4, r4, #1
 80070cc:	3608      	adds	r6, #8
 80070ce:	e76d      	b.n	8006fac <_dtoa_r+0x3cc>
 80070d0:	2702      	movs	r7, #2
 80070d2:	e770      	b.n	8006fb6 <_dtoa_r+0x3d6>
 80070d4:	46d0      	mov	r8, sl
 80070d6:	9c08      	ldr	r4, [sp, #32]
 80070d8:	e78f      	b.n	8006ffa <_dtoa_r+0x41a>
 80070da:	9903      	ldr	r1, [sp, #12]
 80070dc:	4b29      	ldr	r3, [pc, #164]	; (8007184 <_dtoa_r+0x5a4>)
 80070de:	4421      	add	r1, r4
 80070e0:	9112      	str	r1, [sp, #72]	; 0x48
 80070e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80070ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070f0:	2900      	cmp	r1, #0
 80070f2:	d055      	beq.n	80071a0 <_dtoa_r+0x5c0>
 80070f4:	2000      	movs	r0, #0
 80070f6:	4929      	ldr	r1, [pc, #164]	; (800719c <_dtoa_r+0x5bc>)
 80070f8:	f7f9 fb18 	bl	800072c <__aeabi_ddiv>
 80070fc:	463b      	mov	r3, r7
 80070fe:	4632      	mov	r2, r6
 8007100:	f7f9 f832 	bl	8000168 <__aeabi_dsub>
 8007104:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007108:	9f03      	ldr	r7, [sp, #12]
 800710a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800710e:	f7f9 fc93 	bl	8000a38 <__aeabi_d2iz>
 8007112:	4604      	mov	r4, r0
 8007114:	f7f9 f976 	bl	8000404 <__aeabi_i2d>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007120:	f7f9 f822 	bl	8000168 <__aeabi_dsub>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	3430      	adds	r4, #48	; 0x30
 800712a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800712e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007132:	f807 4b01 	strb.w	r4, [r7], #1
 8007136:	f7f9 fc41 	bl	80009bc <__aeabi_dcmplt>
 800713a:	2800      	cmp	r0, #0
 800713c:	d174      	bne.n	8007228 <_dtoa_r+0x648>
 800713e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007142:	2000      	movs	r0, #0
 8007144:	4911      	ldr	r1, [pc, #68]	; (800718c <_dtoa_r+0x5ac>)
 8007146:	f7f9 f80f 	bl	8000168 <__aeabi_dsub>
 800714a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800714e:	f7f9 fc35 	bl	80009bc <__aeabi_dcmplt>
 8007152:	2800      	cmp	r0, #0
 8007154:	f040 80b7 	bne.w	80072c6 <_dtoa_r+0x6e6>
 8007158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800715a:	429f      	cmp	r7, r3
 800715c:	f43f af7a 	beq.w	8007054 <_dtoa_r+0x474>
 8007160:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007164:	2200      	movs	r2, #0
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <_dtoa_r+0x5b0>)
 8007168:	f7f9 f9b6 	bl	80004d8 <__aeabi_dmul>
 800716c:	2200      	movs	r2, #0
 800716e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007172:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007176:	4b06      	ldr	r3, [pc, #24]	; (8007190 <_dtoa_r+0x5b0>)
 8007178:	f7f9 f9ae 	bl	80004d8 <__aeabi_dmul>
 800717c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007180:	e7c3      	b.n	800710a <_dtoa_r+0x52a>
 8007182:	bf00      	nop
 8007184:	08009170 	.word	0x08009170
 8007188:	08009148 	.word	0x08009148
 800718c:	3ff00000 	.word	0x3ff00000
 8007190:	40240000 	.word	0x40240000
 8007194:	401c0000 	.word	0x401c0000
 8007198:	40140000 	.word	0x40140000
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 f998 	bl	80004d8 <__aeabi_dmul>
 80071a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071ae:	9c03      	ldr	r4, [sp, #12]
 80071b0:	9314      	str	r3, [sp, #80]	; 0x50
 80071b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071b6:	f7f9 fc3f 	bl	8000a38 <__aeabi_d2iz>
 80071ba:	9015      	str	r0, [sp, #84]	; 0x54
 80071bc:	f7f9 f922 	bl	8000404 <__aeabi_i2d>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c8:	f7f8 ffce 	bl	8000168 <__aeabi_dsub>
 80071cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ce:	4606      	mov	r6, r0
 80071d0:	3330      	adds	r3, #48	; 0x30
 80071d2:	f804 3b01 	strb.w	r3, [r4], #1
 80071d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071d8:	460f      	mov	r7, r1
 80071da:	429c      	cmp	r4, r3
 80071dc:	f04f 0200 	mov.w	r2, #0
 80071e0:	d124      	bne.n	800722c <_dtoa_r+0x64c>
 80071e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071e6:	4bb0      	ldr	r3, [pc, #704]	; (80074a8 <_dtoa_r+0x8c8>)
 80071e8:	f7f8 ffc0 	bl	800016c <__adddf3>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7f9 fc00 	bl	80009f8 <__aeabi_dcmpgt>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d163      	bne.n	80072c4 <_dtoa_r+0x6e4>
 80071fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007200:	2000      	movs	r0, #0
 8007202:	49a9      	ldr	r1, [pc, #676]	; (80074a8 <_dtoa_r+0x8c8>)
 8007204:	f7f8 ffb0 	bl	8000168 <__aeabi_dsub>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4630      	mov	r0, r6
 800720e:	4639      	mov	r1, r7
 8007210:	f7f9 fbd4 	bl	80009bc <__aeabi_dcmplt>
 8007214:	2800      	cmp	r0, #0
 8007216:	f43f af1d 	beq.w	8007054 <_dtoa_r+0x474>
 800721a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800721c:	1e7b      	subs	r3, r7, #1
 800721e:	9314      	str	r3, [sp, #80]	; 0x50
 8007220:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007224:	2b30      	cmp	r3, #48	; 0x30
 8007226:	d0f8      	beq.n	800721a <_dtoa_r+0x63a>
 8007228:	46c2      	mov	sl, r8
 800722a:	e03b      	b.n	80072a4 <_dtoa_r+0x6c4>
 800722c:	4b9f      	ldr	r3, [pc, #636]	; (80074ac <_dtoa_r+0x8cc>)
 800722e:	f7f9 f953 	bl	80004d8 <__aeabi_dmul>
 8007232:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007236:	e7bc      	b.n	80071b2 <_dtoa_r+0x5d2>
 8007238:	9f03      	ldr	r7, [sp, #12]
 800723a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800723e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007242:	4640      	mov	r0, r8
 8007244:	4649      	mov	r1, r9
 8007246:	f7f9 fa71 	bl	800072c <__aeabi_ddiv>
 800724a:	f7f9 fbf5 	bl	8000a38 <__aeabi_d2iz>
 800724e:	4604      	mov	r4, r0
 8007250:	f7f9 f8d8 	bl	8000404 <__aeabi_i2d>
 8007254:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007258:	f7f9 f93e 	bl	80004d8 <__aeabi_dmul>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	f7f8 ff80 	bl	8000168 <__aeabi_dsub>
 8007268:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800726c:	f807 6b01 	strb.w	r6, [r7], #1
 8007270:	9e03      	ldr	r6, [sp, #12]
 8007272:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007276:	1bbe      	subs	r6, r7, r6
 8007278:	45b4      	cmp	ip, r6
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	d136      	bne.n	80072ee <_dtoa_r+0x70e>
 8007280:	f7f8 ff74 	bl	800016c <__adddf3>
 8007284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007288:	4680      	mov	r8, r0
 800728a:	4689      	mov	r9, r1
 800728c:	f7f9 fbb4 	bl	80009f8 <__aeabi_dcmpgt>
 8007290:	bb58      	cbnz	r0, 80072ea <_dtoa_r+0x70a>
 8007292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007296:	4640      	mov	r0, r8
 8007298:	4649      	mov	r1, r9
 800729a:	f7f9 fb85 	bl	80009a8 <__aeabi_dcmpeq>
 800729e:	b108      	cbz	r0, 80072a4 <_dtoa_r+0x6c4>
 80072a0:	07e1      	lsls	r1, r4, #31
 80072a2:	d422      	bmi.n	80072ea <_dtoa_r+0x70a>
 80072a4:	4628      	mov	r0, r5
 80072a6:	4659      	mov	r1, fp
 80072a8:	f000 faf0 	bl	800788c <_Bfree>
 80072ac:	2300      	movs	r3, #0
 80072ae:	703b      	strb	r3, [r7, #0]
 80072b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072b2:	f10a 0001 	add.w	r0, sl, #1
 80072b6:	6018      	str	r0, [r3, #0]
 80072b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f43f acde 	beq.w	8006c7c <_dtoa_r+0x9c>
 80072c0:	601f      	str	r7, [r3, #0]
 80072c2:	e4db      	b.n	8006c7c <_dtoa_r+0x9c>
 80072c4:	4627      	mov	r7, r4
 80072c6:	463b      	mov	r3, r7
 80072c8:	461f      	mov	r7, r3
 80072ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ce:	2a39      	cmp	r2, #57	; 0x39
 80072d0:	d107      	bne.n	80072e2 <_dtoa_r+0x702>
 80072d2:	9a03      	ldr	r2, [sp, #12]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d1f7      	bne.n	80072c8 <_dtoa_r+0x6e8>
 80072d8:	2230      	movs	r2, #48	; 0x30
 80072da:	9903      	ldr	r1, [sp, #12]
 80072dc:	f108 0801 	add.w	r8, r8, #1
 80072e0:	700a      	strb	r2, [r1, #0]
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	3201      	adds	r2, #1
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	e79e      	b.n	8007228 <_dtoa_r+0x648>
 80072ea:	46d0      	mov	r8, sl
 80072ec:	e7eb      	b.n	80072c6 <_dtoa_r+0x6e6>
 80072ee:	2200      	movs	r2, #0
 80072f0:	4b6e      	ldr	r3, [pc, #440]	; (80074ac <_dtoa_r+0x8cc>)
 80072f2:	f7f9 f8f1 	bl	80004d8 <__aeabi_dmul>
 80072f6:	2200      	movs	r2, #0
 80072f8:	2300      	movs	r3, #0
 80072fa:	4680      	mov	r8, r0
 80072fc:	4689      	mov	r9, r1
 80072fe:	f7f9 fb53 	bl	80009a8 <__aeabi_dcmpeq>
 8007302:	2800      	cmp	r0, #0
 8007304:	d09b      	beq.n	800723e <_dtoa_r+0x65e>
 8007306:	e7cd      	b.n	80072a4 <_dtoa_r+0x6c4>
 8007308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800730a:	2a00      	cmp	r2, #0
 800730c:	f000 80d0 	beq.w	80074b0 <_dtoa_r+0x8d0>
 8007310:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007312:	2a01      	cmp	r2, #1
 8007314:	f300 80ae 	bgt.w	8007474 <_dtoa_r+0x894>
 8007318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800731a:	2a00      	cmp	r2, #0
 800731c:	f000 80a6 	beq.w	800746c <_dtoa_r+0x88c>
 8007320:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007324:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007326:	9f06      	ldr	r7, [sp, #24]
 8007328:	9a06      	ldr	r2, [sp, #24]
 800732a:	2101      	movs	r1, #1
 800732c:	441a      	add	r2, r3
 800732e:	9206      	str	r2, [sp, #24]
 8007330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007332:	4628      	mov	r0, r5
 8007334:	441a      	add	r2, r3
 8007336:	9209      	str	r2, [sp, #36]	; 0x24
 8007338:	f000 fb5e 	bl	80079f8 <__i2b>
 800733c:	4606      	mov	r6, r0
 800733e:	2f00      	cmp	r7, #0
 8007340:	dd0c      	ble.n	800735c <_dtoa_r+0x77c>
 8007342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	dd09      	ble.n	800735c <_dtoa_r+0x77c>
 8007348:	42bb      	cmp	r3, r7
 800734a:	bfa8      	it	ge
 800734c:	463b      	movge	r3, r7
 800734e:	9a06      	ldr	r2, [sp, #24]
 8007350:	1aff      	subs	r7, r7, r3
 8007352:	1ad2      	subs	r2, r2, r3
 8007354:	9206      	str	r2, [sp, #24]
 8007356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	9309      	str	r3, [sp, #36]	; 0x24
 800735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735e:	b1f3      	cbz	r3, 800739e <_dtoa_r+0x7be>
 8007360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 80a8 	beq.w	80074b8 <_dtoa_r+0x8d8>
 8007368:	2c00      	cmp	r4, #0
 800736a:	dd10      	ble.n	800738e <_dtoa_r+0x7ae>
 800736c:	4631      	mov	r1, r6
 800736e:	4622      	mov	r2, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 fbff 	bl	8007b74 <__pow5mult>
 8007376:	465a      	mov	r2, fp
 8007378:	4601      	mov	r1, r0
 800737a:	4606      	mov	r6, r0
 800737c:	4628      	mov	r0, r5
 800737e:	f000 fb51 	bl	8007a24 <__multiply>
 8007382:	4680      	mov	r8, r0
 8007384:	4659      	mov	r1, fp
 8007386:	4628      	mov	r0, r5
 8007388:	f000 fa80 	bl	800788c <_Bfree>
 800738c:	46c3      	mov	fp, r8
 800738e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007390:	1b1a      	subs	r2, r3, r4
 8007392:	d004      	beq.n	800739e <_dtoa_r+0x7be>
 8007394:	4659      	mov	r1, fp
 8007396:	4628      	mov	r0, r5
 8007398:	f000 fbec 	bl	8007b74 <__pow5mult>
 800739c:	4683      	mov	fp, r0
 800739e:	2101      	movs	r1, #1
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 fb29 	bl	80079f8 <__i2b>
 80073a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073a8:	4604      	mov	r4, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f340 8086 	ble.w	80074bc <_dtoa_r+0x8dc>
 80073b0:	461a      	mov	r2, r3
 80073b2:	4601      	mov	r1, r0
 80073b4:	4628      	mov	r0, r5
 80073b6:	f000 fbdd 	bl	8007b74 <__pow5mult>
 80073ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073bc:	4604      	mov	r4, r0
 80073be:	2b01      	cmp	r3, #1
 80073c0:	dd7f      	ble.n	80074c2 <_dtoa_r+0x8e2>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073cc:	6918      	ldr	r0, [r3, #16]
 80073ce:	f000 fac5 	bl	800795c <__hi0bits>
 80073d2:	f1c0 0020 	rsb	r0, r0, #32
 80073d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d8:	4418      	add	r0, r3
 80073da:	f010 001f 	ands.w	r0, r0, #31
 80073de:	f000 8092 	beq.w	8007506 <_dtoa_r+0x926>
 80073e2:	f1c0 0320 	rsb	r3, r0, #32
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	f340 808a 	ble.w	8007500 <_dtoa_r+0x920>
 80073ec:	f1c0 001c 	rsb	r0, r0, #28
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	4407      	add	r7, r0
 80073f4:	4403      	add	r3, r0
 80073f6:	9306      	str	r3, [sp, #24]
 80073f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fa:	4403      	add	r3, r0
 80073fc:	9309      	str	r3, [sp, #36]	; 0x24
 80073fe:	9b06      	ldr	r3, [sp, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	dd05      	ble.n	8007410 <_dtoa_r+0x830>
 8007404:	4659      	mov	r1, fp
 8007406:	461a      	mov	r2, r3
 8007408:	4628      	mov	r0, r5
 800740a:	f000 fc0d 	bl	8007c28 <__lshift>
 800740e:	4683      	mov	fp, r0
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	2b00      	cmp	r3, #0
 8007414:	dd05      	ble.n	8007422 <_dtoa_r+0x842>
 8007416:	4621      	mov	r1, r4
 8007418:	461a      	mov	r2, r3
 800741a:	4628      	mov	r0, r5
 800741c:	f000 fc04 	bl	8007c28 <__lshift>
 8007420:	4604      	mov	r4, r0
 8007422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d070      	beq.n	800750a <_dtoa_r+0x92a>
 8007428:	4621      	mov	r1, r4
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fc6c 	bl	8007d08 <__mcmp>
 8007430:	2800      	cmp	r0, #0
 8007432:	da6a      	bge.n	800750a <_dtoa_r+0x92a>
 8007434:	2300      	movs	r3, #0
 8007436:	4659      	mov	r1, fp
 8007438:	220a      	movs	r2, #10
 800743a:	4628      	mov	r0, r5
 800743c:	f000 fa48 	bl	80078d0 <__multadd>
 8007440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007442:	4683      	mov	fp, r0
 8007444:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8194 	beq.w	8007776 <_dtoa_r+0xb96>
 800744e:	4631      	mov	r1, r6
 8007450:	2300      	movs	r3, #0
 8007452:	220a      	movs	r2, #10
 8007454:	4628      	mov	r0, r5
 8007456:	f000 fa3b 	bl	80078d0 <__multadd>
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	4606      	mov	r6, r0
 8007460:	f300 8093 	bgt.w	800758a <_dtoa_r+0x9aa>
 8007464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007466:	2b02      	cmp	r3, #2
 8007468:	dc57      	bgt.n	800751a <_dtoa_r+0x93a>
 800746a:	e08e      	b.n	800758a <_dtoa_r+0x9aa>
 800746c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800746e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007472:	e757      	b.n	8007324 <_dtoa_r+0x744>
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	1e5c      	subs	r4, r3, #1
 8007478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747a:	42a3      	cmp	r3, r4
 800747c:	bfb7      	itett	lt
 800747e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007480:	1b1c      	subge	r4, r3, r4
 8007482:	1ae2      	sublt	r2, r4, r3
 8007484:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007486:	bfbe      	ittt	lt
 8007488:	940a      	strlt	r4, [sp, #40]	; 0x28
 800748a:	189b      	addlt	r3, r3, r2
 800748c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800748e:	9b08      	ldr	r3, [sp, #32]
 8007490:	bfb8      	it	lt
 8007492:	2400      	movlt	r4, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	bfbb      	ittet	lt
 8007498:	9b06      	ldrlt	r3, [sp, #24]
 800749a:	9a08      	ldrlt	r2, [sp, #32]
 800749c:	9f06      	ldrge	r7, [sp, #24]
 800749e:	1a9f      	sublt	r7, r3, r2
 80074a0:	bfac      	ite	ge
 80074a2:	9b08      	ldrge	r3, [sp, #32]
 80074a4:	2300      	movlt	r3, #0
 80074a6:	e73f      	b.n	8007328 <_dtoa_r+0x748>
 80074a8:	3fe00000 	.word	0x3fe00000
 80074ac:	40240000 	.word	0x40240000
 80074b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074b2:	9f06      	ldr	r7, [sp, #24]
 80074b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80074b6:	e742      	b.n	800733e <_dtoa_r+0x75e>
 80074b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ba:	e76b      	b.n	8007394 <_dtoa_r+0x7b4>
 80074bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074be:	2b01      	cmp	r3, #1
 80074c0:	dc19      	bgt.n	80074f6 <_dtoa_r+0x916>
 80074c2:	9b04      	ldr	r3, [sp, #16]
 80074c4:	b9bb      	cbnz	r3, 80074f6 <_dtoa_r+0x916>
 80074c6:	9b05      	ldr	r3, [sp, #20]
 80074c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074cc:	b99b      	cbnz	r3, 80074f6 <_dtoa_r+0x916>
 80074ce:	9b05      	ldr	r3, [sp, #20]
 80074d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	0d1b      	lsrs	r3, r3, #20
 80074d6:	051b      	lsls	r3, r3, #20
 80074d8:	b183      	cbz	r3, 80074fc <_dtoa_r+0x91c>
 80074da:	f04f 0801 	mov.w	r8, #1
 80074de:	9b06      	ldr	r3, [sp, #24]
 80074e0:	3301      	adds	r3, #1
 80074e2:	9306      	str	r3, [sp, #24]
 80074e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e6:	3301      	adds	r3, #1
 80074e8:	9309      	str	r3, [sp, #36]	; 0x24
 80074ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f47f af6a 	bne.w	80073c6 <_dtoa_r+0x7e6>
 80074f2:	2001      	movs	r0, #1
 80074f4:	e76f      	b.n	80073d6 <_dtoa_r+0x7f6>
 80074f6:	f04f 0800 	mov.w	r8, #0
 80074fa:	e7f6      	b.n	80074ea <_dtoa_r+0x90a>
 80074fc:	4698      	mov	r8, r3
 80074fe:	e7f4      	b.n	80074ea <_dtoa_r+0x90a>
 8007500:	f43f af7d 	beq.w	80073fe <_dtoa_r+0x81e>
 8007504:	4618      	mov	r0, r3
 8007506:	301c      	adds	r0, #28
 8007508:	e772      	b.n	80073f0 <_dtoa_r+0x810>
 800750a:	9b08      	ldr	r3, [sp, #32]
 800750c:	2b00      	cmp	r3, #0
 800750e:	dc36      	bgt.n	800757e <_dtoa_r+0x99e>
 8007510:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007512:	2b02      	cmp	r3, #2
 8007514:	dd33      	ble.n	800757e <_dtoa_r+0x99e>
 8007516:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	d10d      	bne.n	800753c <_dtoa_r+0x95c>
 8007520:	4621      	mov	r1, r4
 8007522:	464b      	mov	r3, r9
 8007524:	2205      	movs	r2, #5
 8007526:	4628      	mov	r0, r5
 8007528:	f000 f9d2 	bl	80078d0 <__multadd>
 800752c:	4601      	mov	r1, r0
 800752e:	4604      	mov	r4, r0
 8007530:	4658      	mov	r0, fp
 8007532:	f000 fbe9 	bl	8007d08 <__mcmp>
 8007536:	2800      	cmp	r0, #0
 8007538:	f73f adb8 	bgt.w	80070ac <_dtoa_r+0x4cc>
 800753c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800753e:	9f03      	ldr	r7, [sp, #12]
 8007540:	ea6f 0a03 	mvn.w	sl, r3
 8007544:	f04f 0800 	mov.w	r8, #0
 8007548:	4621      	mov	r1, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f000 f99e 	bl	800788c <_Bfree>
 8007550:	2e00      	cmp	r6, #0
 8007552:	f43f aea7 	beq.w	80072a4 <_dtoa_r+0x6c4>
 8007556:	f1b8 0f00 	cmp.w	r8, #0
 800755a:	d005      	beq.n	8007568 <_dtoa_r+0x988>
 800755c:	45b0      	cmp	r8, r6
 800755e:	d003      	beq.n	8007568 <_dtoa_r+0x988>
 8007560:	4641      	mov	r1, r8
 8007562:	4628      	mov	r0, r5
 8007564:	f000 f992 	bl	800788c <_Bfree>
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	f000 f98e 	bl	800788c <_Bfree>
 8007570:	e698      	b.n	80072a4 <_dtoa_r+0x6c4>
 8007572:	2400      	movs	r4, #0
 8007574:	4626      	mov	r6, r4
 8007576:	e7e1      	b.n	800753c <_dtoa_r+0x95c>
 8007578:	46c2      	mov	sl, r8
 800757a:	4626      	mov	r6, r4
 800757c:	e596      	b.n	80070ac <_dtoa_r+0x4cc>
 800757e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80fd 	beq.w	8007784 <_dtoa_r+0xba4>
 800758a:	2f00      	cmp	r7, #0
 800758c:	dd05      	ble.n	800759a <_dtoa_r+0x9ba>
 800758e:	4631      	mov	r1, r6
 8007590:	463a      	mov	r2, r7
 8007592:	4628      	mov	r0, r5
 8007594:	f000 fb48 	bl	8007c28 <__lshift>
 8007598:	4606      	mov	r6, r0
 800759a:	f1b8 0f00 	cmp.w	r8, #0
 800759e:	d05c      	beq.n	800765a <_dtoa_r+0xa7a>
 80075a0:	4628      	mov	r0, r5
 80075a2:	6871      	ldr	r1, [r6, #4]
 80075a4:	f000 f932 	bl	800780c <_Balloc>
 80075a8:	4607      	mov	r7, r0
 80075aa:	b928      	cbnz	r0, 80075b8 <_dtoa_r+0x9d8>
 80075ac:	4602      	mov	r2, r0
 80075ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80075b2:	4b7f      	ldr	r3, [pc, #508]	; (80077b0 <_dtoa_r+0xbd0>)
 80075b4:	f7ff bb28 	b.w	8006c08 <_dtoa_r+0x28>
 80075b8:	6932      	ldr	r2, [r6, #16]
 80075ba:	f106 010c 	add.w	r1, r6, #12
 80075be:	3202      	adds	r2, #2
 80075c0:	0092      	lsls	r2, r2, #2
 80075c2:	300c      	adds	r0, #12
 80075c4:	f000 f914 	bl	80077f0 <memcpy>
 80075c8:	2201      	movs	r2, #1
 80075ca:	4639      	mov	r1, r7
 80075cc:	4628      	mov	r0, r5
 80075ce:	f000 fb2b 	bl	8007c28 <__lshift>
 80075d2:	46b0      	mov	r8, r6
 80075d4:	4606      	mov	r6, r0
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	3301      	adds	r3, #1
 80075da:	9308      	str	r3, [sp, #32]
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	444b      	add	r3, r9
 80075e0:	930a      	str	r3, [sp, #40]	; 0x28
 80075e2:	9b04      	ldr	r3, [sp, #16]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ea:	9b08      	ldr	r3, [sp, #32]
 80075ec:	4621      	mov	r1, r4
 80075ee:	3b01      	subs	r3, #1
 80075f0:	4658      	mov	r0, fp
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	f7ff fa68 	bl	8006ac8 <quorem>
 80075f8:	4603      	mov	r3, r0
 80075fa:	4641      	mov	r1, r8
 80075fc:	3330      	adds	r3, #48	; 0x30
 80075fe:	9006      	str	r0, [sp, #24]
 8007600:	4658      	mov	r0, fp
 8007602:	930b      	str	r3, [sp, #44]	; 0x2c
 8007604:	f000 fb80 	bl	8007d08 <__mcmp>
 8007608:	4632      	mov	r2, r6
 800760a:	4681      	mov	r9, r0
 800760c:	4621      	mov	r1, r4
 800760e:	4628      	mov	r0, r5
 8007610:	f000 fb96 	bl	8007d40 <__mdiff>
 8007614:	68c2      	ldr	r2, [r0, #12]
 8007616:	4607      	mov	r7, r0
 8007618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800761a:	bb02      	cbnz	r2, 800765e <_dtoa_r+0xa7e>
 800761c:	4601      	mov	r1, r0
 800761e:	4658      	mov	r0, fp
 8007620:	f000 fb72 	bl	8007d08 <__mcmp>
 8007624:	4602      	mov	r2, r0
 8007626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007628:	4639      	mov	r1, r7
 800762a:	4628      	mov	r0, r5
 800762c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007630:	f000 f92c 	bl	800788c <_Bfree>
 8007634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007638:	9f08      	ldr	r7, [sp, #32]
 800763a:	ea43 0102 	orr.w	r1, r3, r2
 800763e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007640:	430b      	orrs	r3, r1
 8007642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007644:	d10d      	bne.n	8007662 <_dtoa_r+0xa82>
 8007646:	2b39      	cmp	r3, #57	; 0x39
 8007648:	d029      	beq.n	800769e <_dtoa_r+0xabe>
 800764a:	f1b9 0f00 	cmp.w	r9, #0
 800764e:	dd01      	ble.n	8007654 <_dtoa_r+0xa74>
 8007650:	9b06      	ldr	r3, [sp, #24]
 8007652:	3331      	adds	r3, #49	; 0x31
 8007654:	9a04      	ldr	r2, [sp, #16]
 8007656:	7013      	strb	r3, [r2, #0]
 8007658:	e776      	b.n	8007548 <_dtoa_r+0x968>
 800765a:	4630      	mov	r0, r6
 800765c:	e7b9      	b.n	80075d2 <_dtoa_r+0x9f2>
 800765e:	2201      	movs	r2, #1
 8007660:	e7e2      	b.n	8007628 <_dtoa_r+0xa48>
 8007662:	f1b9 0f00 	cmp.w	r9, #0
 8007666:	db06      	blt.n	8007676 <_dtoa_r+0xa96>
 8007668:	9922      	ldr	r1, [sp, #136]	; 0x88
 800766a:	ea41 0909 	orr.w	r9, r1, r9
 800766e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007670:	ea59 0101 	orrs.w	r1, r9, r1
 8007674:	d120      	bne.n	80076b8 <_dtoa_r+0xad8>
 8007676:	2a00      	cmp	r2, #0
 8007678:	ddec      	ble.n	8007654 <_dtoa_r+0xa74>
 800767a:	4659      	mov	r1, fp
 800767c:	2201      	movs	r2, #1
 800767e:	4628      	mov	r0, r5
 8007680:	9308      	str	r3, [sp, #32]
 8007682:	f000 fad1 	bl	8007c28 <__lshift>
 8007686:	4621      	mov	r1, r4
 8007688:	4683      	mov	fp, r0
 800768a:	f000 fb3d 	bl	8007d08 <__mcmp>
 800768e:	2800      	cmp	r0, #0
 8007690:	9b08      	ldr	r3, [sp, #32]
 8007692:	dc02      	bgt.n	800769a <_dtoa_r+0xaba>
 8007694:	d1de      	bne.n	8007654 <_dtoa_r+0xa74>
 8007696:	07da      	lsls	r2, r3, #31
 8007698:	d5dc      	bpl.n	8007654 <_dtoa_r+0xa74>
 800769a:	2b39      	cmp	r3, #57	; 0x39
 800769c:	d1d8      	bne.n	8007650 <_dtoa_r+0xa70>
 800769e:	2339      	movs	r3, #57	; 0x39
 80076a0:	9a04      	ldr	r2, [sp, #16]
 80076a2:	7013      	strb	r3, [r2, #0]
 80076a4:	463b      	mov	r3, r7
 80076a6:	461f      	mov	r7, r3
 80076a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	2a39      	cmp	r2, #57	; 0x39
 80076b0:	d050      	beq.n	8007754 <_dtoa_r+0xb74>
 80076b2:	3201      	adds	r2, #1
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	e747      	b.n	8007548 <_dtoa_r+0x968>
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	dd03      	ble.n	80076c4 <_dtoa_r+0xae4>
 80076bc:	2b39      	cmp	r3, #57	; 0x39
 80076be:	d0ee      	beq.n	800769e <_dtoa_r+0xabe>
 80076c0:	3301      	adds	r3, #1
 80076c2:	e7c7      	b.n	8007654 <_dtoa_r+0xa74>
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076cc:	428a      	cmp	r2, r1
 80076ce:	d02a      	beq.n	8007726 <_dtoa_r+0xb46>
 80076d0:	4659      	mov	r1, fp
 80076d2:	2300      	movs	r3, #0
 80076d4:	220a      	movs	r2, #10
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 f8fa 	bl	80078d0 <__multadd>
 80076dc:	45b0      	cmp	r8, r6
 80076de:	4683      	mov	fp, r0
 80076e0:	f04f 0300 	mov.w	r3, #0
 80076e4:	f04f 020a 	mov.w	r2, #10
 80076e8:	4641      	mov	r1, r8
 80076ea:	4628      	mov	r0, r5
 80076ec:	d107      	bne.n	80076fe <_dtoa_r+0xb1e>
 80076ee:	f000 f8ef 	bl	80078d0 <__multadd>
 80076f2:	4680      	mov	r8, r0
 80076f4:	4606      	mov	r6, r0
 80076f6:	9b08      	ldr	r3, [sp, #32]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9308      	str	r3, [sp, #32]
 80076fc:	e775      	b.n	80075ea <_dtoa_r+0xa0a>
 80076fe:	f000 f8e7 	bl	80078d0 <__multadd>
 8007702:	4631      	mov	r1, r6
 8007704:	4680      	mov	r8, r0
 8007706:	2300      	movs	r3, #0
 8007708:	220a      	movs	r2, #10
 800770a:	4628      	mov	r0, r5
 800770c:	f000 f8e0 	bl	80078d0 <__multadd>
 8007710:	4606      	mov	r6, r0
 8007712:	e7f0      	b.n	80076f6 <_dtoa_r+0xb16>
 8007714:	f1b9 0f00 	cmp.w	r9, #0
 8007718:	bfcc      	ite	gt
 800771a:	464f      	movgt	r7, r9
 800771c:	2701      	movle	r7, #1
 800771e:	f04f 0800 	mov.w	r8, #0
 8007722:	9a03      	ldr	r2, [sp, #12]
 8007724:	4417      	add	r7, r2
 8007726:	4659      	mov	r1, fp
 8007728:	2201      	movs	r2, #1
 800772a:	4628      	mov	r0, r5
 800772c:	9308      	str	r3, [sp, #32]
 800772e:	f000 fa7b 	bl	8007c28 <__lshift>
 8007732:	4621      	mov	r1, r4
 8007734:	4683      	mov	fp, r0
 8007736:	f000 fae7 	bl	8007d08 <__mcmp>
 800773a:	2800      	cmp	r0, #0
 800773c:	dcb2      	bgt.n	80076a4 <_dtoa_r+0xac4>
 800773e:	d102      	bne.n	8007746 <_dtoa_r+0xb66>
 8007740:	9b08      	ldr	r3, [sp, #32]
 8007742:	07db      	lsls	r3, r3, #31
 8007744:	d4ae      	bmi.n	80076a4 <_dtoa_r+0xac4>
 8007746:	463b      	mov	r3, r7
 8007748:	461f      	mov	r7, r3
 800774a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800774e:	2a30      	cmp	r2, #48	; 0x30
 8007750:	d0fa      	beq.n	8007748 <_dtoa_r+0xb68>
 8007752:	e6f9      	b.n	8007548 <_dtoa_r+0x968>
 8007754:	9a03      	ldr	r2, [sp, #12]
 8007756:	429a      	cmp	r2, r3
 8007758:	d1a5      	bne.n	80076a6 <_dtoa_r+0xac6>
 800775a:	2331      	movs	r3, #49	; 0x31
 800775c:	f10a 0a01 	add.w	sl, sl, #1
 8007760:	e779      	b.n	8007656 <_dtoa_r+0xa76>
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <_dtoa_r+0xbd4>)
 8007764:	f7ff baa8 	b.w	8006cb8 <_dtoa_r+0xd8>
 8007768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800776a:	2b00      	cmp	r3, #0
 800776c:	f47f aa81 	bne.w	8006c72 <_dtoa_r+0x92>
 8007770:	4b11      	ldr	r3, [pc, #68]	; (80077b8 <_dtoa_r+0xbd8>)
 8007772:	f7ff baa1 	b.w	8006cb8 <_dtoa_r+0xd8>
 8007776:	f1b9 0f00 	cmp.w	r9, #0
 800777a:	dc03      	bgt.n	8007784 <_dtoa_r+0xba4>
 800777c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800777e:	2b02      	cmp	r3, #2
 8007780:	f73f aecb 	bgt.w	800751a <_dtoa_r+0x93a>
 8007784:	9f03      	ldr	r7, [sp, #12]
 8007786:	4621      	mov	r1, r4
 8007788:	4658      	mov	r0, fp
 800778a:	f7ff f99d 	bl	8006ac8 <quorem>
 800778e:	9a03      	ldr	r2, [sp, #12]
 8007790:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007794:	f807 3b01 	strb.w	r3, [r7], #1
 8007798:	1aba      	subs	r2, r7, r2
 800779a:	4591      	cmp	r9, r2
 800779c:	ddba      	ble.n	8007714 <_dtoa_r+0xb34>
 800779e:	4659      	mov	r1, fp
 80077a0:	2300      	movs	r3, #0
 80077a2:	220a      	movs	r2, #10
 80077a4:	4628      	mov	r0, r5
 80077a6:	f000 f893 	bl	80078d0 <__multadd>
 80077aa:	4683      	mov	fp, r0
 80077ac:	e7eb      	b.n	8007786 <_dtoa_r+0xba6>
 80077ae:	bf00      	nop
 80077b0:	080090d7 	.word	0x080090d7
 80077b4:	08009034 	.word	0x08009034
 80077b8:	08009058 	.word	0x08009058

080077bc <_localeconv_r>:
 80077bc:	4800      	ldr	r0, [pc, #0]	; (80077c0 <_localeconv_r+0x4>)
 80077be:	4770      	bx	lr
 80077c0:	20000194 	.word	0x20000194

080077c4 <malloc>:
 80077c4:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <malloc+0xc>)
 80077c6:	4601      	mov	r1, r0
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	f000 bc1d 	b.w	8008008 <_malloc_r>
 80077ce:	bf00      	nop
 80077d0:	20000040 	.word	0x20000040

080077d4 <memchr>:
 80077d4:	4603      	mov	r3, r0
 80077d6:	b510      	push	{r4, lr}
 80077d8:	b2c9      	uxtb	r1, r1
 80077da:	4402      	add	r2, r0
 80077dc:	4293      	cmp	r3, r2
 80077de:	4618      	mov	r0, r3
 80077e0:	d101      	bne.n	80077e6 <memchr+0x12>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e003      	b.n	80077ee <memchr+0x1a>
 80077e6:	7804      	ldrb	r4, [r0, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	428c      	cmp	r4, r1
 80077ec:	d1f6      	bne.n	80077dc <memchr+0x8>
 80077ee:	bd10      	pop	{r4, pc}

080077f0 <memcpy>:
 80077f0:	440a      	add	r2, r1
 80077f2:	4291      	cmp	r1, r2
 80077f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077f8:	d100      	bne.n	80077fc <memcpy+0xc>
 80077fa:	4770      	bx	lr
 80077fc:	b510      	push	{r4, lr}
 80077fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007802:	4291      	cmp	r1, r2
 8007804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007808:	d1f9      	bne.n	80077fe <memcpy+0xe>
 800780a:	bd10      	pop	{r4, pc}

0800780c <_Balloc>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	b976      	cbnz	r6, 8007834 <_Balloc+0x28>
 8007816:	2010      	movs	r0, #16
 8007818:	f7ff ffd4 	bl	80077c4 <malloc>
 800781c:	4602      	mov	r2, r0
 800781e:	6260      	str	r0, [r4, #36]	; 0x24
 8007820:	b920      	cbnz	r0, 800782c <_Balloc+0x20>
 8007822:	2166      	movs	r1, #102	; 0x66
 8007824:	4b17      	ldr	r3, [pc, #92]	; (8007884 <_Balloc+0x78>)
 8007826:	4818      	ldr	r0, [pc, #96]	; (8007888 <_Balloc+0x7c>)
 8007828:	f000 fdce 	bl	80083c8 <__assert_func>
 800782c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007830:	6006      	str	r6, [r0, #0]
 8007832:	60c6      	str	r6, [r0, #12]
 8007834:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007836:	68f3      	ldr	r3, [r6, #12]
 8007838:	b183      	cbz	r3, 800785c <_Balloc+0x50>
 800783a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007842:	b9b8      	cbnz	r0, 8007874 <_Balloc+0x68>
 8007844:	2101      	movs	r1, #1
 8007846:	fa01 f605 	lsl.w	r6, r1, r5
 800784a:	1d72      	adds	r2, r6, #5
 800784c:	4620      	mov	r0, r4
 800784e:	0092      	lsls	r2, r2, #2
 8007850:	f000 fb5e 	bl	8007f10 <_calloc_r>
 8007854:	b160      	cbz	r0, 8007870 <_Balloc+0x64>
 8007856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800785a:	e00e      	b.n	800787a <_Balloc+0x6e>
 800785c:	2221      	movs	r2, #33	; 0x21
 800785e:	2104      	movs	r1, #4
 8007860:	4620      	mov	r0, r4
 8007862:	f000 fb55 	bl	8007f10 <_calloc_r>
 8007866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007868:	60f0      	str	r0, [r6, #12]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e4      	bne.n	800783a <_Balloc+0x2e>
 8007870:	2000      	movs	r0, #0
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	6802      	ldr	r2, [r0, #0]
 8007876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800787a:	2300      	movs	r3, #0
 800787c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007880:	e7f7      	b.n	8007872 <_Balloc+0x66>
 8007882:	bf00      	nop
 8007884:	08009065 	.word	0x08009065
 8007888:	080090e8 	.word	0x080090e8

0800788c <_Bfree>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007890:	4605      	mov	r5, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b976      	cbnz	r6, 80078b4 <_Bfree+0x28>
 8007896:	2010      	movs	r0, #16
 8007898:	f7ff ff94 	bl	80077c4 <malloc>
 800789c:	4602      	mov	r2, r0
 800789e:	6268      	str	r0, [r5, #36]	; 0x24
 80078a0:	b920      	cbnz	r0, 80078ac <_Bfree+0x20>
 80078a2:	218a      	movs	r1, #138	; 0x8a
 80078a4:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <_Bfree+0x3c>)
 80078a6:	4809      	ldr	r0, [pc, #36]	; (80078cc <_Bfree+0x40>)
 80078a8:	f000 fd8e 	bl	80083c8 <__assert_func>
 80078ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078b0:	6006      	str	r6, [r0, #0]
 80078b2:	60c6      	str	r6, [r0, #12]
 80078b4:	b13c      	cbz	r4, 80078c6 <_Bfree+0x3a>
 80078b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078b8:	6862      	ldr	r2, [r4, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078c0:	6021      	str	r1, [r4, #0]
 80078c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	08009065 	.word	0x08009065
 80078cc:	080090e8 	.word	0x080090e8

080078d0 <__multadd>:
 80078d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d4:	4607      	mov	r7, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	461e      	mov	r6, r3
 80078da:	2000      	movs	r0, #0
 80078dc:	690d      	ldr	r5, [r1, #16]
 80078de:	f101 0c14 	add.w	ip, r1, #20
 80078e2:	f8dc 3000 	ldr.w	r3, [ip]
 80078e6:	3001      	adds	r0, #1
 80078e8:	b299      	uxth	r1, r3
 80078ea:	fb02 6101 	mla	r1, r2, r1, r6
 80078ee:	0c1e      	lsrs	r6, r3, #16
 80078f0:	0c0b      	lsrs	r3, r1, #16
 80078f2:	fb02 3306 	mla	r3, r2, r6, r3
 80078f6:	b289      	uxth	r1, r1
 80078f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078fc:	4285      	cmp	r5, r0
 80078fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007902:	f84c 1b04 	str.w	r1, [ip], #4
 8007906:	dcec      	bgt.n	80078e2 <__multadd+0x12>
 8007908:	b30e      	cbz	r6, 800794e <__multadd+0x7e>
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	42ab      	cmp	r3, r5
 800790e:	dc19      	bgt.n	8007944 <__multadd+0x74>
 8007910:	6861      	ldr	r1, [r4, #4]
 8007912:	4638      	mov	r0, r7
 8007914:	3101      	adds	r1, #1
 8007916:	f7ff ff79 	bl	800780c <_Balloc>
 800791a:	4680      	mov	r8, r0
 800791c:	b928      	cbnz	r0, 800792a <__multadd+0x5a>
 800791e:	4602      	mov	r2, r0
 8007920:	21b5      	movs	r1, #181	; 0xb5
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <__multadd+0x84>)
 8007924:	480c      	ldr	r0, [pc, #48]	; (8007958 <__multadd+0x88>)
 8007926:	f000 fd4f 	bl	80083c8 <__assert_func>
 800792a:	6922      	ldr	r2, [r4, #16]
 800792c:	f104 010c 	add.w	r1, r4, #12
 8007930:	3202      	adds	r2, #2
 8007932:	0092      	lsls	r2, r2, #2
 8007934:	300c      	adds	r0, #12
 8007936:	f7ff ff5b 	bl	80077f0 <memcpy>
 800793a:	4621      	mov	r1, r4
 800793c:	4638      	mov	r0, r7
 800793e:	f7ff ffa5 	bl	800788c <_Bfree>
 8007942:	4644      	mov	r4, r8
 8007944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007948:	3501      	adds	r5, #1
 800794a:	615e      	str	r6, [r3, #20]
 800794c:	6125      	str	r5, [r4, #16]
 800794e:	4620      	mov	r0, r4
 8007950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007954:	080090d7 	.word	0x080090d7
 8007958:	080090e8 	.word	0x080090e8

0800795c <__hi0bits>:
 800795c:	0c02      	lsrs	r2, r0, #16
 800795e:	0412      	lsls	r2, r2, #16
 8007960:	4603      	mov	r3, r0
 8007962:	b9ca      	cbnz	r2, 8007998 <__hi0bits+0x3c>
 8007964:	0403      	lsls	r3, r0, #16
 8007966:	2010      	movs	r0, #16
 8007968:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800796c:	bf04      	itt	eq
 800796e:	021b      	lsleq	r3, r3, #8
 8007970:	3008      	addeq	r0, #8
 8007972:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007976:	bf04      	itt	eq
 8007978:	011b      	lsleq	r3, r3, #4
 800797a:	3004      	addeq	r0, #4
 800797c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007980:	bf04      	itt	eq
 8007982:	009b      	lsleq	r3, r3, #2
 8007984:	3002      	addeq	r0, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	db05      	blt.n	8007996 <__hi0bits+0x3a>
 800798a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800798e:	f100 0001 	add.w	r0, r0, #1
 8007992:	bf08      	it	eq
 8007994:	2020      	moveq	r0, #32
 8007996:	4770      	bx	lr
 8007998:	2000      	movs	r0, #0
 800799a:	e7e5      	b.n	8007968 <__hi0bits+0xc>

0800799c <__lo0bits>:
 800799c:	6803      	ldr	r3, [r0, #0]
 800799e:	4602      	mov	r2, r0
 80079a0:	f013 0007 	ands.w	r0, r3, #7
 80079a4:	d00b      	beq.n	80079be <__lo0bits+0x22>
 80079a6:	07d9      	lsls	r1, r3, #31
 80079a8:	d421      	bmi.n	80079ee <__lo0bits+0x52>
 80079aa:	0798      	lsls	r0, r3, #30
 80079ac:	bf49      	itett	mi
 80079ae:	085b      	lsrmi	r3, r3, #1
 80079b0:	089b      	lsrpl	r3, r3, #2
 80079b2:	2001      	movmi	r0, #1
 80079b4:	6013      	strmi	r3, [r2, #0]
 80079b6:	bf5c      	itt	pl
 80079b8:	2002      	movpl	r0, #2
 80079ba:	6013      	strpl	r3, [r2, #0]
 80079bc:	4770      	bx	lr
 80079be:	b299      	uxth	r1, r3
 80079c0:	b909      	cbnz	r1, 80079c6 <__lo0bits+0x2a>
 80079c2:	2010      	movs	r0, #16
 80079c4:	0c1b      	lsrs	r3, r3, #16
 80079c6:	b2d9      	uxtb	r1, r3
 80079c8:	b909      	cbnz	r1, 80079ce <__lo0bits+0x32>
 80079ca:	3008      	adds	r0, #8
 80079cc:	0a1b      	lsrs	r3, r3, #8
 80079ce:	0719      	lsls	r1, r3, #28
 80079d0:	bf04      	itt	eq
 80079d2:	091b      	lsreq	r3, r3, #4
 80079d4:	3004      	addeq	r0, #4
 80079d6:	0799      	lsls	r1, r3, #30
 80079d8:	bf04      	itt	eq
 80079da:	089b      	lsreq	r3, r3, #2
 80079dc:	3002      	addeq	r0, #2
 80079de:	07d9      	lsls	r1, r3, #31
 80079e0:	d403      	bmi.n	80079ea <__lo0bits+0x4e>
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	f100 0001 	add.w	r0, r0, #1
 80079e8:	d003      	beq.n	80079f2 <__lo0bits+0x56>
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	4770      	bx	lr
 80079ee:	2000      	movs	r0, #0
 80079f0:	4770      	bx	lr
 80079f2:	2020      	movs	r0, #32
 80079f4:	4770      	bx	lr
	...

080079f8 <__i2b>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	460c      	mov	r4, r1
 80079fc:	2101      	movs	r1, #1
 80079fe:	f7ff ff05 	bl	800780c <_Balloc>
 8007a02:	4602      	mov	r2, r0
 8007a04:	b928      	cbnz	r0, 8007a12 <__i2b+0x1a>
 8007a06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a0a:	4b04      	ldr	r3, [pc, #16]	; (8007a1c <__i2b+0x24>)
 8007a0c:	4804      	ldr	r0, [pc, #16]	; (8007a20 <__i2b+0x28>)
 8007a0e:	f000 fcdb 	bl	80083c8 <__assert_func>
 8007a12:	2301      	movs	r3, #1
 8007a14:	6144      	str	r4, [r0, #20]
 8007a16:	6103      	str	r3, [r0, #16]
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	bf00      	nop
 8007a1c:	080090d7 	.word	0x080090d7
 8007a20:	080090e8 	.word	0x080090e8

08007a24 <__multiply>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	4691      	mov	r9, r2
 8007a2a:	690a      	ldr	r2, [r1, #16]
 8007a2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a30:	460c      	mov	r4, r1
 8007a32:	429a      	cmp	r2, r3
 8007a34:	bfbe      	ittt	lt
 8007a36:	460b      	movlt	r3, r1
 8007a38:	464c      	movlt	r4, r9
 8007a3a:	4699      	movlt	r9, r3
 8007a3c:	6927      	ldr	r7, [r4, #16]
 8007a3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	6861      	ldr	r1, [r4, #4]
 8007a46:	eb07 060a 	add.w	r6, r7, sl
 8007a4a:	42b3      	cmp	r3, r6
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	bfb8      	it	lt
 8007a50:	3101      	addlt	r1, #1
 8007a52:	f7ff fedb 	bl	800780c <_Balloc>
 8007a56:	b930      	cbnz	r0, 8007a66 <__multiply+0x42>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	f240 115d 	movw	r1, #349	; 0x15d
 8007a5e:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <__multiply+0x148>)
 8007a60:	4843      	ldr	r0, [pc, #268]	; (8007b70 <__multiply+0x14c>)
 8007a62:	f000 fcb1 	bl	80083c8 <__assert_func>
 8007a66:	f100 0514 	add.w	r5, r0, #20
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a72:	4543      	cmp	r3, r8
 8007a74:	d321      	bcc.n	8007aba <__multiply+0x96>
 8007a76:	f104 0314 	add.w	r3, r4, #20
 8007a7a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a7e:	f109 0314 	add.w	r3, r9, #20
 8007a82:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a86:	9202      	str	r2, [sp, #8]
 8007a88:	1b3a      	subs	r2, r7, r4
 8007a8a:	3a15      	subs	r2, #21
 8007a8c:	f022 0203 	bic.w	r2, r2, #3
 8007a90:	3204      	adds	r2, #4
 8007a92:	f104 0115 	add.w	r1, r4, #21
 8007a96:	428f      	cmp	r7, r1
 8007a98:	bf38      	it	cc
 8007a9a:	2204      	movcc	r2, #4
 8007a9c:	9201      	str	r2, [sp, #4]
 8007a9e:	9a02      	ldr	r2, [sp, #8]
 8007aa0:	9303      	str	r3, [sp, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d80c      	bhi.n	8007ac0 <__multiply+0x9c>
 8007aa6:	2e00      	cmp	r6, #0
 8007aa8:	dd03      	ble.n	8007ab2 <__multiply+0x8e>
 8007aaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d059      	beq.n	8007b66 <__multiply+0x142>
 8007ab2:	6106      	str	r6, [r0, #16]
 8007ab4:	b005      	add	sp, #20
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	f843 2b04 	str.w	r2, [r3], #4
 8007abe:	e7d8      	b.n	8007a72 <__multiply+0x4e>
 8007ac0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ac4:	f1ba 0f00 	cmp.w	sl, #0
 8007ac8:	d023      	beq.n	8007b12 <__multiply+0xee>
 8007aca:	46a9      	mov	r9, r5
 8007acc:	f04f 0c00 	mov.w	ip, #0
 8007ad0:	f104 0e14 	add.w	lr, r4, #20
 8007ad4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ad8:	f8d9 1000 	ldr.w	r1, [r9]
 8007adc:	fa1f fb82 	uxth.w	fp, r2
 8007ae0:	b289      	uxth	r1, r1
 8007ae2:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ae6:	4461      	add	r1, ip
 8007ae8:	f8d9 c000 	ldr.w	ip, [r9]
 8007aec:	0c12      	lsrs	r2, r2, #16
 8007aee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007af2:	fb0a c202 	mla	r2, sl, r2, ip
 8007af6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007afa:	b289      	uxth	r1, r1
 8007afc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b00:	4577      	cmp	r7, lr
 8007b02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b06:	f849 1b04 	str.w	r1, [r9], #4
 8007b0a:	d8e3      	bhi.n	8007ad4 <__multiply+0xb0>
 8007b0c:	9a01      	ldr	r2, [sp, #4]
 8007b0e:	f845 c002 	str.w	ip, [r5, r2]
 8007b12:	9a03      	ldr	r2, [sp, #12]
 8007b14:	3304      	adds	r3, #4
 8007b16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b1a:	f1b9 0f00 	cmp.w	r9, #0
 8007b1e:	d020      	beq.n	8007b62 <__multiply+0x13e>
 8007b20:	46ae      	mov	lr, r5
 8007b22:	f04f 0a00 	mov.w	sl, #0
 8007b26:	6829      	ldr	r1, [r5, #0]
 8007b28:	f104 0c14 	add.w	ip, r4, #20
 8007b2c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b34:	b289      	uxth	r1, r1
 8007b36:	fb09 220b 	mla	r2, r9, fp, r2
 8007b3a:	4492      	add	sl, r2
 8007b3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b40:	f84e 1b04 	str.w	r1, [lr], #4
 8007b44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b48:	f8be 1000 	ldrh.w	r1, [lr]
 8007b4c:	0c12      	lsrs	r2, r2, #16
 8007b4e:	fb09 1102 	mla	r1, r9, r2, r1
 8007b52:	4567      	cmp	r7, ip
 8007b54:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007b58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b5c:	d8e6      	bhi.n	8007b2c <__multiply+0x108>
 8007b5e:	9a01      	ldr	r2, [sp, #4]
 8007b60:	50a9      	str	r1, [r5, r2]
 8007b62:	3504      	adds	r5, #4
 8007b64:	e79b      	b.n	8007a9e <__multiply+0x7a>
 8007b66:	3e01      	subs	r6, #1
 8007b68:	e79d      	b.n	8007aa6 <__multiply+0x82>
 8007b6a:	bf00      	nop
 8007b6c:	080090d7 	.word	0x080090d7
 8007b70:	080090e8 	.word	0x080090e8

08007b74 <__pow5mult>:
 8007b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b78:	4615      	mov	r5, r2
 8007b7a:	f012 0203 	ands.w	r2, r2, #3
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460f      	mov	r7, r1
 8007b82:	d007      	beq.n	8007b94 <__pow5mult+0x20>
 8007b84:	4c25      	ldr	r4, [pc, #148]	; (8007c1c <__pow5mult+0xa8>)
 8007b86:	3a01      	subs	r2, #1
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b8e:	f7ff fe9f 	bl	80078d0 <__multadd>
 8007b92:	4607      	mov	r7, r0
 8007b94:	10ad      	asrs	r5, r5, #2
 8007b96:	d03d      	beq.n	8007c14 <__pow5mult+0xa0>
 8007b98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b9a:	b97c      	cbnz	r4, 8007bbc <__pow5mult+0x48>
 8007b9c:	2010      	movs	r0, #16
 8007b9e:	f7ff fe11 	bl	80077c4 <malloc>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	6270      	str	r0, [r6, #36]	; 0x24
 8007ba6:	b928      	cbnz	r0, 8007bb4 <__pow5mult+0x40>
 8007ba8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007bac:	4b1c      	ldr	r3, [pc, #112]	; (8007c20 <__pow5mult+0xac>)
 8007bae:	481d      	ldr	r0, [pc, #116]	; (8007c24 <__pow5mult+0xb0>)
 8007bb0:	f000 fc0a 	bl	80083c8 <__assert_func>
 8007bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bb8:	6004      	str	r4, [r0, #0]
 8007bba:	60c4      	str	r4, [r0, #12]
 8007bbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bc4:	b94c      	cbnz	r4, 8007bda <__pow5mult+0x66>
 8007bc6:	f240 2171 	movw	r1, #625	; 0x271
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7ff ff14 	bl	80079f8 <__i2b>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bd8:	6003      	str	r3, [r0, #0]
 8007bda:	f04f 0900 	mov.w	r9, #0
 8007bde:	07eb      	lsls	r3, r5, #31
 8007be0:	d50a      	bpl.n	8007bf8 <__pow5mult+0x84>
 8007be2:	4639      	mov	r1, r7
 8007be4:	4622      	mov	r2, r4
 8007be6:	4630      	mov	r0, r6
 8007be8:	f7ff ff1c 	bl	8007a24 <__multiply>
 8007bec:	4680      	mov	r8, r0
 8007bee:	4639      	mov	r1, r7
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff fe4b 	bl	800788c <_Bfree>
 8007bf6:	4647      	mov	r7, r8
 8007bf8:	106d      	asrs	r5, r5, #1
 8007bfa:	d00b      	beq.n	8007c14 <__pow5mult+0xa0>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	b938      	cbnz	r0, 8007c10 <__pow5mult+0x9c>
 8007c00:	4622      	mov	r2, r4
 8007c02:	4621      	mov	r1, r4
 8007c04:	4630      	mov	r0, r6
 8007c06:	f7ff ff0d 	bl	8007a24 <__multiply>
 8007c0a:	6020      	str	r0, [r4, #0]
 8007c0c:	f8c0 9000 	str.w	r9, [r0]
 8007c10:	4604      	mov	r4, r0
 8007c12:	e7e4      	b.n	8007bde <__pow5mult+0x6a>
 8007c14:	4638      	mov	r0, r7
 8007c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	bf00      	nop
 8007c1c:	08009238 	.word	0x08009238
 8007c20:	08009065 	.word	0x08009065
 8007c24:	080090e8 	.word	0x080090e8

08007c28 <__lshift>:
 8007c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	4607      	mov	r7, r0
 8007c30:	4691      	mov	r9, r2
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	6849      	ldr	r1, [r1, #4]
 8007c36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c40:	f108 0601 	add.w	r6, r8, #1
 8007c44:	42b3      	cmp	r3, r6
 8007c46:	db0b      	blt.n	8007c60 <__lshift+0x38>
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f7ff fddf 	bl	800780c <_Balloc>
 8007c4e:	4605      	mov	r5, r0
 8007c50:	b948      	cbnz	r0, 8007c66 <__lshift+0x3e>
 8007c52:	4602      	mov	r2, r0
 8007c54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c58:	4b29      	ldr	r3, [pc, #164]	; (8007d00 <__lshift+0xd8>)
 8007c5a:	482a      	ldr	r0, [pc, #168]	; (8007d04 <__lshift+0xdc>)
 8007c5c:	f000 fbb4 	bl	80083c8 <__assert_func>
 8007c60:	3101      	adds	r1, #1
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	e7ee      	b.n	8007c44 <__lshift+0x1c>
 8007c66:	2300      	movs	r3, #0
 8007c68:	f100 0114 	add.w	r1, r0, #20
 8007c6c:	f100 0210 	add.w	r2, r0, #16
 8007c70:	4618      	mov	r0, r3
 8007c72:	4553      	cmp	r3, sl
 8007c74:	db37      	blt.n	8007ce6 <__lshift+0xbe>
 8007c76:	6920      	ldr	r0, [r4, #16]
 8007c78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c7c:	f104 0314 	add.w	r3, r4, #20
 8007c80:	f019 091f 	ands.w	r9, r9, #31
 8007c84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c8c:	d02f      	beq.n	8007cee <__lshift+0xc6>
 8007c8e:	468a      	mov	sl, r1
 8007c90:	f04f 0c00 	mov.w	ip, #0
 8007c94:	f1c9 0e20 	rsb	lr, r9, #32
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	fa02 f209 	lsl.w	r2, r2, r9
 8007c9e:	ea42 020c 	orr.w	r2, r2, ip
 8007ca2:	f84a 2b04 	str.w	r2, [sl], #4
 8007ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007caa:	4298      	cmp	r0, r3
 8007cac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007cb0:	d8f2      	bhi.n	8007c98 <__lshift+0x70>
 8007cb2:	1b03      	subs	r3, r0, r4
 8007cb4:	3b15      	subs	r3, #21
 8007cb6:	f023 0303 	bic.w	r3, r3, #3
 8007cba:	3304      	adds	r3, #4
 8007cbc:	f104 0215 	add.w	r2, r4, #21
 8007cc0:	4290      	cmp	r0, r2
 8007cc2:	bf38      	it	cc
 8007cc4:	2304      	movcc	r3, #4
 8007cc6:	f841 c003 	str.w	ip, [r1, r3]
 8007cca:	f1bc 0f00 	cmp.w	ip, #0
 8007cce:	d001      	beq.n	8007cd4 <__lshift+0xac>
 8007cd0:	f108 0602 	add.w	r6, r8, #2
 8007cd4:	3e01      	subs	r6, #1
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	4621      	mov	r1, r4
 8007cda:	612e      	str	r6, [r5, #16]
 8007cdc:	f7ff fdd6 	bl	800788c <_Bfree>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cea:	3301      	adds	r3, #1
 8007cec:	e7c1      	b.n	8007c72 <__lshift+0x4a>
 8007cee:	3904      	subs	r1, #4
 8007cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf4:	4298      	cmp	r0, r3
 8007cf6:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cfa:	d8f9      	bhi.n	8007cf0 <__lshift+0xc8>
 8007cfc:	e7ea      	b.n	8007cd4 <__lshift+0xac>
 8007cfe:	bf00      	nop
 8007d00:	080090d7 	.word	0x080090d7
 8007d04:	080090e8 	.word	0x080090e8

08007d08 <__mcmp>:
 8007d08:	4603      	mov	r3, r0
 8007d0a:	690a      	ldr	r2, [r1, #16]
 8007d0c:	6900      	ldr	r0, [r0, #16]
 8007d0e:	b530      	push	{r4, r5, lr}
 8007d10:	1a80      	subs	r0, r0, r2
 8007d12:	d10d      	bne.n	8007d30 <__mcmp+0x28>
 8007d14:	3314      	adds	r3, #20
 8007d16:	3114      	adds	r1, #20
 8007d18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d28:	4295      	cmp	r5, r2
 8007d2a:	d002      	beq.n	8007d32 <__mcmp+0x2a>
 8007d2c:	d304      	bcc.n	8007d38 <__mcmp+0x30>
 8007d2e:	2001      	movs	r0, #1
 8007d30:	bd30      	pop	{r4, r5, pc}
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	d3f4      	bcc.n	8007d20 <__mcmp+0x18>
 8007d36:	e7fb      	b.n	8007d30 <__mcmp+0x28>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	e7f8      	b.n	8007d30 <__mcmp+0x28>
	...

08007d40 <__mdiff>:
 8007d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	460d      	mov	r5, r1
 8007d46:	4607      	mov	r7, r0
 8007d48:	4611      	mov	r1, r2
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	f7ff ffdb 	bl	8007d08 <__mcmp>
 8007d52:	1e06      	subs	r6, r0, #0
 8007d54:	d111      	bne.n	8007d7a <__mdiff+0x3a>
 8007d56:	4631      	mov	r1, r6
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff fd57 	bl	800780c <_Balloc>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	b928      	cbnz	r0, 8007d6e <__mdiff+0x2e>
 8007d62:	f240 2132 	movw	r1, #562	; 0x232
 8007d66:	4b3a      	ldr	r3, [pc, #232]	; (8007e50 <__mdiff+0x110>)
 8007d68:	483a      	ldr	r0, [pc, #232]	; (8007e54 <__mdiff+0x114>)
 8007d6a:	f000 fb2d 	bl	80083c8 <__assert_func>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d74:	4610      	mov	r0, r2
 8007d76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7a:	bfa4      	itt	ge
 8007d7c:	4623      	movge	r3, r4
 8007d7e:	462c      	movge	r4, r5
 8007d80:	4638      	mov	r0, r7
 8007d82:	6861      	ldr	r1, [r4, #4]
 8007d84:	bfa6      	itte	ge
 8007d86:	461d      	movge	r5, r3
 8007d88:	2600      	movge	r6, #0
 8007d8a:	2601      	movlt	r6, #1
 8007d8c:	f7ff fd3e 	bl	800780c <_Balloc>
 8007d90:	4602      	mov	r2, r0
 8007d92:	b918      	cbnz	r0, 8007d9c <__mdiff+0x5c>
 8007d94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d98:	4b2d      	ldr	r3, [pc, #180]	; (8007e50 <__mdiff+0x110>)
 8007d9a:	e7e5      	b.n	8007d68 <__mdiff+0x28>
 8007d9c:	f102 0814 	add.w	r8, r2, #20
 8007da0:	46c2      	mov	sl, r8
 8007da2:	f04f 0c00 	mov.w	ip, #0
 8007da6:	6927      	ldr	r7, [r4, #16]
 8007da8:	60c6      	str	r6, [r0, #12]
 8007daa:	692e      	ldr	r6, [r5, #16]
 8007dac:	f104 0014 	add.w	r0, r4, #20
 8007db0:	f105 0914 	add.w	r9, r5, #20
 8007db4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007db8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007dbc:	3410      	adds	r4, #16
 8007dbe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007dc2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dc6:	fa1f f18b 	uxth.w	r1, fp
 8007dca:	448c      	add	ip, r1
 8007dcc:	b299      	uxth	r1, r3
 8007dce:	0c1b      	lsrs	r3, r3, #16
 8007dd0:	ebac 0101 	sub.w	r1, ip, r1
 8007dd4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007dd8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ddc:	b289      	uxth	r1, r1
 8007dde:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007de2:	454e      	cmp	r6, r9
 8007de4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007de8:	f84a 3b04 	str.w	r3, [sl], #4
 8007dec:	d8e7      	bhi.n	8007dbe <__mdiff+0x7e>
 8007dee:	1b73      	subs	r3, r6, r5
 8007df0:	3b15      	subs	r3, #21
 8007df2:	f023 0303 	bic.w	r3, r3, #3
 8007df6:	3515      	adds	r5, #21
 8007df8:	3304      	adds	r3, #4
 8007dfa:	42ae      	cmp	r6, r5
 8007dfc:	bf38      	it	cc
 8007dfe:	2304      	movcc	r3, #4
 8007e00:	4418      	add	r0, r3
 8007e02:	4443      	add	r3, r8
 8007e04:	461e      	mov	r6, r3
 8007e06:	4605      	mov	r5, r0
 8007e08:	4575      	cmp	r5, lr
 8007e0a:	d30e      	bcc.n	8007e2a <__mdiff+0xea>
 8007e0c:	f10e 0103 	add.w	r1, lr, #3
 8007e10:	1a09      	subs	r1, r1, r0
 8007e12:	f021 0103 	bic.w	r1, r1, #3
 8007e16:	3803      	subs	r0, #3
 8007e18:	4586      	cmp	lr, r0
 8007e1a:	bf38      	it	cc
 8007e1c:	2100      	movcc	r1, #0
 8007e1e:	4419      	add	r1, r3
 8007e20:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007e24:	b18b      	cbz	r3, 8007e4a <__mdiff+0x10a>
 8007e26:	6117      	str	r7, [r2, #16]
 8007e28:	e7a4      	b.n	8007d74 <__mdiff+0x34>
 8007e2a:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e2e:	fa1f f188 	uxth.w	r1, r8
 8007e32:	4461      	add	r1, ip
 8007e34:	140c      	asrs	r4, r1, #16
 8007e36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e3a:	b289      	uxth	r1, r1
 8007e3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e40:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e44:	f846 1b04 	str.w	r1, [r6], #4
 8007e48:	e7de      	b.n	8007e08 <__mdiff+0xc8>
 8007e4a:	3f01      	subs	r7, #1
 8007e4c:	e7e8      	b.n	8007e20 <__mdiff+0xe0>
 8007e4e:	bf00      	nop
 8007e50:	080090d7 	.word	0x080090d7
 8007e54:	080090e8 	.word	0x080090e8

08007e58 <__d2b>:
 8007e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007e62:	4690      	mov	r8, r2
 8007e64:	461d      	mov	r5, r3
 8007e66:	f7ff fcd1 	bl	800780c <_Balloc>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	b930      	cbnz	r0, 8007e7c <__d2b+0x24>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	f240 310a 	movw	r1, #778	; 0x30a
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <__d2b+0xb0>)
 8007e76:	4825      	ldr	r0, [pc, #148]	; (8007f0c <__d2b+0xb4>)
 8007e78:	f000 faa6 	bl	80083c8 <__assert_func>
 8007e7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007e80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007e84:	bb2d      	cbnz	r5, 8007ed2 <__d2b+0x7a>
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	f1b8 0300 	subs.w	r3, r8, #0
 8007e8c:	d026      	beq.n	8007edc <__d2b+0x84>
 8007e8e:	4668      	mov	r0, sp
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	f7ff fd83 	bl	800799c <__lo0bits>
 8007e96:	9900      	ldr	r1, [sp, #0]
 8007e98:	b1f0      	cbz	r0, 8007ed8 <__d2b+0x80>
 8007e9a:	9a01      	ldr	r2, [sp, #4]
 8007e9c:	f1c0 0320 	rsb	r3, r0, #32
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	40c2      	lsrs	r2, r0
 8007ea8:	6163      	str	r3, [r4, #20]
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bf14      	ite	ne
 8007eb2:	2102      	movne	r1, #2
 8007eb4:	2101      	moveq	r1, #1
 8007eb6:	61a3      	str	r3, [r4, #24]
 8007eb8:	6121      	str	r1, [r4, #16]
 8007eba:	b1c5      	cbz	r5, 8007eee <__d2b+0x96>
 8007ebc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ec0:	4405      	add	r5, r0
 8007ec2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ec6:	603d      	str	r5, [r7, #0]
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	b002      	add	sp, #8
 8007ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ed6:	e7d6      	b.n	8007e86 <__d2b+0x2e>
 8007ed8:	6161      	str	r1, [r4, #20]
 8007eda:	e7e7      	b.n	8007eac <__d2b+0x54>
 8007edc:	a801      	add	r0, sp, #4
 8007ede:	f7ff fd5d 	bl	800799c <__lo0bits>
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	9b01      	ldr	r3, [sp, #4]
 8007ee6:	6121      	str	r1, [r4, #16]
 8007ee8:	6163      	str	r3, [r4, #20]
 8007eea:	3020      	adds	r0, #32
 8007eec:	e7e5      	b.n	8007eba <__d2b+0x62>
 8007eee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007ef2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ef6:	6038      	str	r0, [r7, #0]
 8007ef8:	6918      	ldr	r0, [r3, #16]
 8007efa:	f7ff fd2f 	bl	800795c <__hi0bits>
 8007efe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007f02:	6031      	str	r1, [r6, #0]
 8007f04:	e7e1      	b.n	8007eca <__d2b+0x72>
 8007f06:	bf00      	nop
 8007f08:	080090d7 	.word	0x080090d7
 8007f0c:	080090e8 	.word	0x080090e8

08007f10 <_calloc_r>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	fba1 5402 	umull	r5, r4, r1, r2
 8007f16:	b934      	cbnz	r4, 8007f26 <_calloc_r+0x16>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f000 f875 	bl	8008008 <_malloc_r>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	b928      	cbnz	r0, 8007f2e <_calloc_r+0x1e>
 8007f22:	4630      	mov	r0, r6
 8007f24:	bd70      	pop	{r4, r5, r6, pc}
 8007f26:	220c      	movs	r2, #12
 8007f28:	2600      	movs	r6, #0
 8007f2a:	6002      	str	r2, [r0, #0]
 8007f2c:	e7f9      	b.n	8007f22 <_calloc_r+0x12>
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4621      	mov	r1, r4
 8007f32:	f7fe f92d 	bl	8006190 <memset>
 8007f36:	e7f4      	b.n	8007f22 <_calloc_r+0x12>

08007f38 <_free_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	d040      	beq.n	8007fc2 <_free_r+0x8a>
 8007f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f44:	1f0c      	subs	r4, r1, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfb8      	it	lt
 8007f4a:	18e4      	addlt	r4, r4, r3
 8007f4c:	f000 fa98 	bl	8008480 <__malloc_lock>
 8007f50:	4a1c      	ldr	r2, [pc, #112]	; (8007fc4 <_free_r+0x8c>)
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	b933      	cbnz	r3, 8007f64 <_free_r+0x2c>
 8007f56:	6063      	str	r3, [r4, #4]
 8007f58:	6014      	str	r4, [r2, #0]
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f60:	f000 ba94 	b.w	800848c <__malloc_unlock>
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	d908      	bls.n	8007f7a <_free_r+0x42>
 8007f68:	6820      	ldr	r0, [r4, #0]
 8007f6a:	1821      	adds	r1, r4, r0
 8007f6c:	428b      	cmp	r3, r1
 8007f6e:	bf01      	itttt	eq
 8007f70:	6819      	ldreq	r1, [r3, #0]
 8007f72:	685b      	ldreq	r3, [r3, #4]
 8007f74:	1809      	addeq	r1, r1, r0
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	e7ed      	b.n	8007f56 <_free_r+0x1e>
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	b10b      	cbz	r3, 8007f84 <_free_r+0x4c>
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d9fa      	bls.n	8007f7a <_free_r+0x42>
 8007f84:	6811      	ldr	r1, [r2, #0]
 8007f86:	1850      	adds	r0, r2, r1
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	d10b      	bne.n	8007fa4 <_free_r+0x6c>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	4401      	add	r1, r0
 8007f90:	1850      	adds	r0, r2, r1
 8007f92:	4283      	cmp	r3, r0
 8007f94:	6011      	str	r1, [r2, #0]
 8007f96:	d1e0      	bne.n	8007f5a <_free_r+0x22>
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4401      	add	r1, r0
 8007f9e:	6011      	str	r1, [r2, #0]
 8007fa0:	6053      	str	r3, [r2, #4]
 8007fa2:	e7da      	b.n	8007f5a <_free_r+0x22>
 8007fa4:	d902      	bls.n	8007fac <_free_r+0x74>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	602b      	str	r3, [r5, #0]
 8007faa:	e7d6      	b.n	8007f5a <_free_r+0x22>
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	1821      	adds	r1, r4, r0
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf01      	itttt	eq
 8007fb4:	6819      	ldreq	r1, [r3, #0]
 8007fb6:	685b      	ldreq	r3, [r3, #4]
 8007fb8:	1809      	addeq	r1, r1, r0
 8007fba:	6021      	streq	r1, [r4, #0]
 8007fbc:	6063      	str	r3, [r4, #4]
 8007fbe:	6054      	str	r4, [r2, #4]
 8007fc0:	e7cb      	b.n	8007f5a <_free_r+0x22>
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	20000404 	.word	0x20000404

08007fc8 <sbrk_aligned>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	4e0e      	ldr	r6, [pc, #56]	; (8008004 <sbrk_aligned+0x3c>)
 8007fcc:	460c      	mov	r4, r1
 8007fce:	6831      	ldr	r1, [r6, #0]
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	b911      	cbnz	r1, 8007fda <sbrk_aligned+0x12>
 8007fd4:	f000 f9e8 	bl	80083a8 <_sbrk_r>
 8007fd8:	6030      	str	r0, [r6, #0]
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 f9e3 	bl	80083a8 <_sbrk_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d00a      	beq.n	8007ffc <sbrk_aligned+0x34>
 8007fe6:	1cc4      	adds	r4, r0, #3
 8007fe8:	f024 0403 	bic.w	r4, r4, #3
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d007      	beq.n	8008000 <sbrk_aligned+0x38>
 8007ff0:	1a21      	subs	r1, r4, r0
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 f9d8 	bl	80083a8 <_sbrk_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d101      	bne.n	8008000 <sbrk_aligned+0x38>
 8007ffc:	f04f 34ff 	mov.w	r4, #4294967295
 8008000:	4620      	mov	r0, r4
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	20000408 	.word	0x20000408

08008008 <_malloc_r>:
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	1ccd      	adds	r5, r1, #3
 800800e:	f025 0503 	bic.w	r5, r5, #3
 8008012:	3508      	adds	r5, #8
 8008014:	2d0c      	cmp	r5, #12
 8008016:	bf38      	it	cc
 8008018:	250c      	movcc	r5, #12
 800801a:	2d00      	cmp	r5, #0
 800801c:	4607      	mov	r7, r0
 800801e:	db01      	blt.n	8008024 <_malloc_r+0x1c>
 8008020:	42a9      	cmp	r1, r5
 8008022:	d905      	bls.n	8008030 <_malloc_r+0x28>
 8008024:	230c      	movs	r3, #12
 8008026:	2600      	movs	r6, #0
 8008028:	603b      	str	r3, [r7, #0]
 800802a:	4630      	mov	r0, r6
 800802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008030:	4e2e      	ldr	r6, [pc, #184]	; (80080ec <_malloc_r+0xe4>)
 8008032:	f000 fa25 	bl	8008480 <__malloc_lock>
 8008036:	6833      	ldr	r3, [r6, #0]
 8008038:	461c      	mov	r4, r3
 800803a:	bb34      	cbnz	r4, 800808a <_malloc_r+0x82>
 800803c:	4629      	mov	r1, r5
 800803e:	4638      	mov	r0, r7
 8008040:	f7ff ffc2 	bl	8007fc8 <sbrk_aligned>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	4604      	mov	r4, r0
 8008048:	d14d      	bne.n	80080e6 <_malloc_r+0xde>
 800804a:	6834      	ldr	r4, [r6, #0]
 800804c:	4626      	mov	r6, r4
 800804e:	2e00      	cmp	r6, #0
 8008050:	d140      	bne.n	80080d4 <_malloc_r+0xcc>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	4631      	mov	r1, r6
 8008056:	4638      	mov	r0, r7
 8008058:	eb04 0803 	add.w	r8, r4, r3
 800805c:	f000 f9a4 	bl	80083a8 <_sbrk_r>
 8008060:	4580      	cmp	r8, r0
 8008062:	d13a      	bne.n	80080da <_malloc_r+0xd2>
 8008064:	6821      	ldr	r1, [r4, #0]
 8008066:	3503      	adds	r5, #3
 8008068:	1a6d      	subs	r5, r5, r1
 800806a:	f025 0503 	bic.w	r5, r5, #3
 800806e:	3508      	adds	r5, #8
 8008070:	2d0c      	cmp	r5, #12
 8008072:	bf38      	it	cc
 8008074:	250c      	movcc	r5, #12
 8008076:	4638      	mov	r0, r7
 8008078:	4629      	mov	r1, r5
 800807a:	f7ff ffa5 	bl	8007fc8 <sbrk_aligned>
 800807e:	3001      	adds	r0, #1
 8008080:	d02b      	beq.n	80080da <_malloc_r+0xd2>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	442b      	add	r3, r5
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	e00e      	b.n	80080a8 <_malloc_r+0xa0>
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	1b52      	subs	r2, r2, r5
 800808e:	d41e      	bmi.n	80080ce <_malloc_r+0xc6>
 8008090:	2a0b      	cmp	r2, #11
 8008092:	d916      	bls.n	80080c2 <_malloc_r+0xba>
 8008094:	1961      	adds	r1, r4, r5
 8008096:	42a3      	cmp	r3, r4
 8008098:	6025      	str	r5, [r4, #0]
 800809a:	bf18      	it	ne
 800809c:	6059      	strne	r1, [r3, #4]
 800809e:	6863      	ldr	r3, [r4, #4]
 80080a0:	bf08      	it	eq
 80080a2:	6031      	streq	r1, [r6, #0]
 80080a4:	5162      	str	r2, [r4, r5]
 80080a6:	604b      	str	r3, [r1, #4]
 80080a8:	4638      	mov	r0, r7
 80080aa:	f104 060b 	add.w	r6, r4, #11
 80080ae:	f000 f9ed 	bl	800848c <__malloc_unlock>
 80080b2:	f026 0607 	bic.w	r6, r6, #7
 80080b6:	1d23      	adds	r3, r4, #4
 80080b8:	1af2      	subs	r2, r6, r3
 80080ba:	d0b6      	beq.n	800802a <_malloc_r+0x22>
 80080bc:	1b9b      	subs	r3, r3, r6
 80080be:	50a3      	str	r3, [r4, r2]
 80080c0:	e7b3      	b.n	800802a <_malloc_r+0x22>
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	bf0c      	ite	eq
 80080c8:	6032      	streq	r2, [r6, #0]
 80080ca:	605a      	strne	r2, [r3, #4]
 80080cc:	e7ec      	b.n	80080a8 <_malloc_r+0xa0>
 80080ce:	4623      	mov	r3, r4
 80080d0:	6864      	ldr	r4, [r4, #4]
 80080d2:	e7b2      	b.n	800803a <_malloc_r+0x32>
 80080d4:	4634      	mov	r4, r6
 80080d6:	6876      	ldr	r6, [r6, #4]
 80080d8:	e7b9      	b.n	800804e <_malloc_r+0x46>
 80080da:	230c      	movs	r3, #12
 80080dc:	4638      	mov	r0, r7
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	f000 f9d4 	bl	800848c <__malloc_unlock>
 80080e4:	e7a1      	b.n	800802a <_malloc_r+0x22>
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	e7de      	b.n	80080a8 <_malloc_r+0xa0>
 80080ea:	bf00      	nop
 80080ec:	20000404 	.word	0x20000404

080080f0 <__ssputs_r>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	688e      	ldr	r6, [r1, #8]
 80080f6:	4682      	mov	sl, r0
 80080f8:	429e      	cmp	r6, r3
 80080fa:	460c      	mov	r4, r1
 80080fc:	4690      	mov	r8, r2
 80080fe:	461f      	mov	r7, r3
 8008100:	d838      	bhi.n	8008174 <__ssputs_r+0x84>
 8008102:	898a      	ldrh	r2, [r1, #12]
 8008104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008108:	d032      	beq.n	8008170 <__ssputs_r+0x80>
 800810a:	6825      	ldr	r5, [r4, #0]
 800810c:	6909      	ldr	r1, [r1, #16]
 800810e:	3301      	adds	r3, #1
 8008110:	eba5 0901 	sub.w	r9, r5, r1
 8008114:	6965      	ldr	r5, [r4, #20]
 8008116:	444b      	add	r3, r9
 8008118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800811c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008120:	106d      	asrs	r5, r5, #1
 8008122:	429d      	cmp	r5, r3
 8008124:	bf38      	it	cc
 8008126:	461d      	movcc	r5, r3
 8008128:	0553      	lsls	r3, r2, #21
 800812a:	d531      	bpl.n	8008190 <__ssputs_r+0xa0>
 800812c:	4629      	mov	r1, r5
 800812e:	f7ff ff6b 	bl	8008008 <_malloc_r>
 8008132:	4606      	mov	r6, r0
 8008134:	b950      	cbnz	r0, 800814c <__ssputs_r+0x5c>
 8008136:	230c      	movs	r3, #12
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	f8ca 3000 	str.w	r3, [sl]
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814c:	464a      	mov	r2, r9
 800814e:	6921      	ldr	r1, [r4, #16]
 8008150:	f7ff fb4e 	bl	80077f0 <memcpy>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800815a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	6126      	str	r6, [r4, #16]
 8008162:	444e      	add	r6, r9
 8008164:	6026      	str	r6, [r4, #0]
 8008166:	463e      	mov	r6, r7
 8008168:	6165      	str	r5, [r4, #20]
 800816a:	eba5 0509 	sub.w	r5, r5, r9
 800816e:	60a5      	str	r5, [r4, #8]
 8008170:	42be      	cmp	r6, r7
 8008172:	d900      	bls.n	8008176 <__ssputs_r+0x86>
 8008174:	463e      	mov	r6, r7
 8008176:	4632      	mov	r2, r6
 8008178:	4641      	mov	r1, r8
 800817a:	6820      	ldr	r0, [r4, #0]
 800817c:	f000 f966 	bl	800844c <memmove>
 8008180:	68a3      	ldr	r3, [r4, #8]
 8008182:	2000      	movs	r0, #0
 8008184:	1b9b      	subs	r3, r3, r6
 8008186:	60a3      	str	r3, [r4, #8]
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	4433      	add	r3, r6
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	e7db      	b.n	8008148 <__ssputs_r+0x58>
 8008190:	462a      	mov	r2, r5
 8008192:	f000 f981 	bl	8008498 <_realloc_r>
 8008196:	4606      	mov	r6, r0
 8008198:	2800      	cmp	r0, #0
 800819a:	d1e1      	bne.n	8008160 <__ssputs_r+0x70>
 800819c:	4650      	mov	r0, sl
 800819e:	6921      	ldr	r1, [r4, #16]
 80081a0:	f7ff feca 	bl	8007f38 <_free_r>
 80081a4:	e7c7      	b.n	8008136 <__ssputs_r+0x46>
	...

080081a8 <_svfiprintf_r>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	4698      	mov	r8, r3
 80081ae:	898b      	ldrh	r3, [r1, #12]
 80081b0:	4607      	mov	r7, r0
 80081b2:	061b      	lsls	r3, r3, #24
 80081b4:	460d      	mov	r5, r1
 80081b6:	4614      	mov	r4, r2
 80081b8:	b09d      	sub	sp, #116	; 0x74
 80081ba:	d50e      	bpl.n	80081da <_svfiprintf_r+0x32>
 80081bc:	690b      	ldr	r3, [r1, #16]
 80081be:	b963      	cbnz	r3, 80081da <_svfiprintf_r+0x32>
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	f7ff ff21 	bl	8008008 <_malloc_r>
 80081c6:	6028      	str	r0, [r5, #0]
 80081c8:	6128      	str	r0, [r5, #16]
 80081ca:	b920      	cbnz	r0, 80081d6 <_svfiprintf_r+0x2e>
 80081cc:	230c      	movs	r3, #12
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	e0d1      	b.n	800837a <_svfiprintf_r+0x1d2>
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	616b      	str	r3, [r5, #20]
 80081da:	2300      	movs	r3, #0
 80081dc:	9309      	str	r3, [sp, #36]	; 0x24
 80081de:	2320      	movs	r3, #32
 80081e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081e4:	2330      	movs	r3, #48	; 0x30
 80081e6:	f04f 0901 	mov.w	r9, #1
 80081ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008394 <_svfiprintf_r+0x1ec>
 80081f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081f6:	4623      	mov	r3, r4
 80081f8:	469a      	mov	sl, r3
 80081fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081fe:	b10a      	cbz	r2, 8008204 <_svfiprintf_r+0x5c>
 8008200:	2a25      	cmp	r2, #37	; 0x25
 8008202:	d1f9      	bne.n	80081f8 <_svfiprintf_r+0x50>
 8008204:	ebba 0b04 	subs.w	fp, sl, r4
 8008208:	d00b      	beq.n	8008222 <_svfiprintf_r+0x7a>
 800820a:	465b      	mov	r3, fp
 800820c:	4622      	mov	r2, r4
 800820e:	4629      	mov	r1, r5
 8008210:	4638      	mov	r0, r7
 8008212:	f7ff ff6d 	bl	80080f0 <__ssputs_r>
 8008216:	3001      	adds	r0, #1
 8008218:	f000 80aa 	beq.w	8008370 <_svfiprintf_r+0x1c8>
 800821c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800821e:	445a      	add	r2, fp
 8008220:	9209      	str	r2, [sp, #36]	; 0x24
 8008222:	f89a 3000 	ldrb.w	r3, [sl]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 80a2 	beq.w	8008370 <_svfiprintf_r+0x1c8>
 800822c:	2300      	movs	r3, #0
 800822e:	f04f 32ff 	mov.w	r2, #4294967295
 8008232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008236:	f10a 0a01 	add.w	sl, sl, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	9307      	str	r3, [sp, #28]
 800823e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008242:	931a      	str	r3, [sp, #104]	; 0x68
 8008244:	4654      	mov	r4, sl
 8008246:	2205      	movs	r2, #5
 8008248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824c:	4851      	ldr	r0, [pc, #324]	; (8008394 <_svfiprintf_r+0x1ec>)
 800824e:	f7ff fac1 	bl	80077d4 <memchr>
 8008252:	9a04      	ldr	r2, [sp, #16]
 8008254:	b9d8      	cbnz	r0, 800828e <_svfiprintf_r+0xe6>
 8008256:	06d0      	lsls	r0, r2, #27
 8008258:	bf44      	itt	mi
 800825a:	2320      	movmi	r3, #32
 800825c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008260:	0711      	lsls	r1, r2, #28
 8008262:	bf44      	itt	mi
 8008264:	232b      	movmi	r3, #43	; 0x2b
 8008266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800826a:	f89a 3000 	ldrb.w	r3, [sl]
 800826e:	2b2a      	cmp	r3, #42	; 0x2a
 8008270:	d015      	beq.n	800829e <_svfiprintf_r+0xf6>
 8008272:	4654      	mov	r4, sl
 8008274:	2000      	movs	r0, #0
 8008276:	f04f 0c0a 	mov.w	ip, #10
 800827a:	9a07      	ldr	r2, [sp, #28]
 800827c:	4621      	mov	r1, r4
 800827e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008282:	3b30      	subs	r3, #48	; 0x30
 8008284:	2b09      	cmp	r3, #9
 8008286:	d94e      	bls.n	8008326 <_svfiprintf_r+0x17e>
 8008288:	b1b0      	cbz	r0, 80082b8 <_svfiprintf_r+0x110>
 800828a:	9207      	str	r2, [sp, #28]
 800828c:	e014      	b.n	80082b8 <_svfiprintf_r+0x110>
 800828e:	eba0 0308 	sub.w	r3, r0, r8
 8008292:	fa09 f303 	lsl.w	r3, r9, r3
 8008296:	4313      	orrs	r3, r2
 8008298:	46a2      	mov	sl, r4
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	e7d2      	b.n	8008244 <_svfiprintf_r+0x9c>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	9103      	str	r1, [sp, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfbb      	ittet	lt
 80082aa:	425b      	neglt	r3, r3
 80082ac:	f042 0202 	orrlt.w	r2, r2, #2
 80082b0:	9307      	strge	r3, [sp, #28]
 80082b2:	9307      	strlt	r3, [sp, #28]
 80082b4:	bfb8      	it	lt
 80082b6:	9204      	strlt	r2, [sp, #16]
 80082b8:	7823      	ldrb	r3, [r4, #0]
 80082ba:	2b2e      	cmp	r3, #46	; 0x2e
 80082bc:	d10c      	bne.n	80082d8 <_svfiprintf_r+0x130>
 80082be:	7863      	ldrb	r3, [r4, #1]
 80082c0:	2b2a      	cmp	r3, #42	; 0x2a
 80082c2:	d135      	bne.n	8008330 <_svfiprintf_r+0x188>
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	3402      	adds	r4, #2
 80082c8:	1d1a      	adds	r2, r3, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	9203      	str	r2, [sp, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfb8      	it	lt
 80082d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008398 <_svfiprintf_r+0x1f0>
 80082dc:	2203      	movs	r2, #3
 80082de:	4650      	mov	r0, sl
 80082e0:	7821      	ldrb	r1, [r4, #0]
 80082e2:	f7ff fa77 	bl	80077d4 <memchr>
 80082e6:	b140      	cbz	r0, 80082fa <_svfiprintf_r+0x152>
 80082e8:	2340      	movs	r3, #64	; 0x40
 80082ea:	eba0 000a 	sub.w	r0, r0, sl
 80082ee:	fa03 f000 	lsl.w	r0, r3, r0
 80082f2:	9b04      	ldr	r3, [sp, #16]
 80082f4:	3401      	adds	r4, #1
 80082f6:	4303      	orrs	r3, r0
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fe:	2206      	movs	r2, #6
 8008300:	4826      	ldr	r0, [pc, #152]	; (800839c <_svfiprintf_r+0x1f4>)
 8008302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008306:	f7ff fa65 	bl	80077d4 <memchr>
 800830a:	2800      	cmp	r0, #0
 800830c:	d038      	beq.n	8008380 <_svfiprintf_r+0x1d8>
 800830e:	4b24      	ldr	r3, [pc, #144]	; (80083a0 <_svfiprintf_r+0x1f8>)
 8008310:	bb1b      	cbnz	r3, 800835a <_svfiprintf_r+0x1b2>
 8008312:	9b03      	ldr	r3, [sp, #12]
 8008314:	3307      	adds	r3, #7
 8008316:	f023 0307 	bic.w	r3, r3, #7
 800831a:	3308      	adds	r3, #8
 800831c:	9303      	str	r3, [sp, #12]
 800831e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008320:	4433      	add	r3, r6
 8008322:	9309      	str	r3, [sp, #36]	; 0x24
 8008324:	e767      	b.n	80081f6 <_svfiprintf_r+0x4e>
 8008326:	460c      	mov	r4, r1
 8008328:	2001      	movs	r0, #1
 800832a:	fb0c 3202 	mla	r2, ip, r2, r3
 800832e:	e7a5      	b.n	800827c <_svfiprintf_r+0xd4>
 8008330:	2300      	movs	r3, #0
 8008332:	f04f 0c0a 	mov.w	ip, #10
 8008336:	4619      	mov	r1, r3
 8008338:	3401      	adds	r4, #1
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	4620      	mov	r0, r4
 800833e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008342:	3a30      	subs	r2, #48	; 0x30
 8008344:	2a09      	cmp	r2, #9
 8008346:	d903      	bls.n	8008350 <_svfiprintf_r+0x1a8>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0c5      	beq.n	80082d8 <_svfiprintf_r+0x130>
 800834c:	9105      	str	r1, [sp, #20]
 800834e:	e7c3      	b.n	80082d8 <_svfiprintf_r+0x130>
 8008350:	4604      	mov	r4, r0
 8008352:	2301      	movs	r3, #1
 8008354:	fb0c 2101 	mla	r1, ip, r1, r2
 8008358:	e7f0      	b.n	800833c <_svfiprintf_r+0x194>
 800835a:	ab03      	add	r3, sp, #12
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	462a      	mov	r2, r5
 8008360:	4638      	mov	r0, r7
 8008362:	4b10      	ldr	r3, [pc, #64]	; (80083a4 <_svfiprintf_r+0x1fc>)
 8008364:	a904      	add	r1, sp, #16
 8008366:	f7fd ffb9 	bl	80062dc <_printf_float>
 800836a:	1c42      	adds	r2, r0, #1
 800836c:	4606      	mov	r6, r0
 800836e:	d1d6      	bne.n	800831e <_svfiprintf_r+0x176>
 8008370:	89ab      	ldrh	r3, [r5, #12]
 8008372:	065b      	lsls	r3, r3, #25
 8008374:	f53f af2c 	bmi.w	80081d0 <_svfiprintf_r+0x28>
 8008378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800837a:	b01d      	add	sp, #116	; 0x74
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008380:	ab03      	add	r3, sp, #12
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	462a      	mov	r2, r5
 8008386:	4638      	mov	r0, r7
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <_svfiprintf_r+0x1fc>)
 800838a:	a904      	add	r1, sp, #16
 800838c:	f7fe fa42 	bl	8006814 <_printf_i>
 8008390:	e7eb      	b.n	800836a <_svfiprintf_r+0x1c2>
 8008392:	bf00      	nop
 8008394:	08009244 	.word	0x08009244
 8008398:	0800924a 	.word	0x0800924a
 800839c:	0800924e 	.word	0x0800924e
 80083a0:	080062dd 	.word	0x080062dd
 80083a4:	080080f1 	.word	0x080080f1

080083a8 <_sbrk_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	2300      	movs	r3, #0
 80083ac:	4d05      	ldr	r5, [pc, #20]	; (80083c4 <_sbrk_r+0x1c>)
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7fa f954 	bl	8002660 <_sbrk>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_sbrk_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_sbrk_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	2000040c 	.word	0x2000040c

080083c8 <__assert_func>:
 80083c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ca:	4614      	mov	r4, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <__assert_func+0x2c>)
 80083d0:	4605      	mov	r5, r0
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68d8      	ldr	r0, [r3, #12]
 80083d6:	b14c      	cbz	r4, 80083ec <__assert_func+0x24>
 80083d8:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <__assert_func+0x30>)
 80083da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083de:	9100      	str	r1, [sp, #0]
 80083e0:	462b      	mov	r3, r5
 80083e2:	4906      	ldr	r1, [pc, #24]	; (80083fc <__assert_func+0x34>)
 80083e4:	f000 f80e 	bl	8008404 <fiprintf>
 80083e8:	f000 faaa 	bl	8008940 <abort>
 80083ec:	4b04      	ldr	r3, [pc, #16]	; (8008400 <__assert_func+0x38>)
 80083ee:	461c      	mov	r4, r3
 80083f0:	e7f3      	b.n	80083da <__assert_func+0x12>
 80083f2:	bf00      	nop
 80083f4:	20000040 	.word	0x20000040
 80083f8:	08009255 	.word	0x08009255
 80083fc:	08009262 	.word	0x08009262
 8008400:	08009290 	.word	0x08009290

08008404 <fiprintf>:
 8008404:	b40e      	push	{r1, r2, r3}
 8008406:	b503      	push	{r0, r1, lr}
 8008408:	4601      	mov	r1, r0
 800840a:	ab03      	add	r3, sp, #12
 800840c:	4805      	ldr	r0, [pc, #20]	; (8008424 <fiprintf+0x20>)
 800840e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008412:	6800      	ldr	r0, [r0, #0]
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	f000 f895 	bl	8008544 <_vfiprintf_r>
 800841a:	b002      	add	sp, #8
 800841c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008420:	b003      	add	sp, #12
 8008422:	4770      	bx	lr
 8008424:	20000040 	.word	0x20000040

08008428 <__ascii_mbtowc>:
 8008428:	b082      	sub	sp, #8
 800842a:	b901      	cbnz	r1, 800842e <__ascii_mbtowc+0x6>
 800842c:	a901      	add	r1, sp, #4
 800842e:	b142      	cbz	r2, 8008442 <__ascii_mbtowc+0x1a>
 8008430:	b14b      	cbz	r3, 8008446 <__ascii_mbtowc+0x1e>
 8008432:	7813      	ldrb	r3, [r2, #0]
 8008434:	600b      	str	r3, [r1, #0]
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	1e10      	subs	r0, r2, #0
 800843a:	bf18      	it	ne
 800843c:	2001      	movne	r0, #1
 800843e:	b002      	add	sp, #8
 8008440:	4770      	bx	lr
 8008442:	4610      	mov	r0, r2
 8008444:	e7fb      	b.n	800843e <__ascii_mbtowc+0x16>
 8008446:	f06f 0001 	mvn.w	r0, #1
 800844a:	e7f8      	b.n	800843e <__ascii_mbtowc+0x16>

0800844c <memmove>:
 800844c:	4288      	cmp	r0, r1
 800844e:	b510      	push	{r4, lr}
 8008450:	eb01 0402 	add.w	r4, r1, r2
 8008454:	d902      	bls.n	800845c <memmove+0x10>
 8008456:	4284      	cmp	r4, r0
 8008458:	4623      	mov	r3, r4
 800845a:	d807      	bhi.n	800846c <memmove+0x20>
 800845c:	1e43      	subs	r3, r0, #1
 800845e:	42a1      	cmp	r1, r4
 8008460:	d008      	beq.n	8008474 <memmove+0x28>
 8008462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800846a:	e7f8      	b.n	800845e <memmove+0x12>
 800846c:	4601      	mov	r1, r0
 800846e:	4402      	add	r2, r0
 8008470:	428a      	cmp	r2, r1
 8008472:	d100      	bne.n	8008476 <memmove+0x2a>
 8008474:	bd10      	pop	{r4, pc}
 8008476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800847a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800847e:	e7f7      	b.n	8008470 <memmove+0x24>

08008480 <__malloc_lock>:
 8008480:	4801      	ldr	r0, [pc, #4]	; (8008488 <__malloc_lock+0x8>)
 8008482:	f000 bc19 	b.w	8008cb8 <__retarget_lock_acquire_recursive>
 8008486:	bf00      	nop
 8008488:	20000410 	.word	0x20000410

0800848c <__malloc_unlock>:
 800848c:	4801      	ldr	r0, [pc, #4]	; (8008494 <__malloc_unlock+0x8>)
 800848e:	f000 bc14 	b.w	8008cba <__retarget_lock_release_recursive>
 8008492:	bf00      	nop
 8008494:	20000410 	.word	0x20000410

08008498 <_realloc_r>:
 8008498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849c:	4680      	mov	r8, r0
 800849e:	4614      	mov	r4, r2
 80084a0:	460e      	mov	r6, r1
 80084a2:	b921      	cbnz	r1, 80084ae <_realloc_r+0x16>
 80084a4:	4611      	mov	r1, r2
 80084a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084aa:	f7ff bdad 	b.w	8008008 <_malloc_r>
 80084ae:	b92a      	cbnz	r2, 80084bc <_realloc_r+0x24>
 80084b0:	f7ff fd42 	bl	8007f38 <_free_r>
 80084b4:	4625      	mov	r5, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084bc:	f000 fc64 	bl	8008d88 <_malloc_usable_size_r>
 80084c0:	4284      	cmp	r4, r0
 80084c2:	4607      	mov	r7, r0
 80084c4:	d802      	bhi.n	80084cc <_realloc_r+0x34>
 80084c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084ca:	d812      	bhi.n	80084f2 <_realloc_r+0x5a>
 80084cc:	4621      	mov	r1, r4
 80084ce:	4640      	mov	r0, r8
 80084d0:	f7ff fd9a 	bl	8008008 <_malloc_r>
 80084d4:	4605      	mov	r5, r0
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d0ed      	beq.n	80084b6 <_realloc_r+0x1e>
 80084da:	42bc      	cmp	r4, r7
 80084dc:	4622      	mov	r2, r4
 80084de:	4631      	mov	r1, r6
 80084e0:	bf28      	it	cs
 80084e2:	463a      	movcs	r2, r7
 80084e4:	f7ff f984 	bl	80077f0 <memcpy>
 80084e8:	4631      	mov	r1, r6
 80084ea:	4640      	mov	r0, r8
 80084ec:	f7ff fd24 	bl	8007f38 <_free_r>
 80084f0:	e7e1      	b.n	80084b6 <_realloc_r+0x1e>
 80084f2:	4635      	mov	r5, r6
 80084f4:	e7df      	b.n	80084b6 <_realloc_r+0x1e>

080084f6 <__sfputc_r>:
 80084f6:	6893      	ldr	r3, [r2, #8]
 80084f8:	b410      	push	{r4}
 80084fa:	3b01      	subs	r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	6093      	str	r3, [r2, #8]
 8008500:	da07      	bge.n	8008512 <__sfputc_r+0x1c>
 8008502:	6994      	ldr	r4, [r2, #24]
 8008504:	42a3      	cmp	r3, r4
 8008506:	db01      	blt.n	800850c <__sfputc_r+0x16>
 8008508:	290a      	cmp	r1, #10
 800850a:	d102      	bne.n	8008512 <__sfputc_r+0x1c>
 800850c:	bc10      	pop	{r4}
 800850e:	f000 b949 	b.w	80087a4 <__swbuf_r>
 8008512:	6813      	ldr	r3, [r2, #0]
 8008514:	1c58      	adds	r0, r3, #1
 8008516:	6010      	str	r0, [r2, #0]
 8008518:	7019      	strb	r1, [r3, #0]
 800851a:	4608      	mov	r0, r1
 800851c:	bc10      	pop	{r4}
 800851e:	4770      	bx	lr

08008520 <__sfputs_r>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	4606      	mov	r6, r0
 8008524:	460f      	mov	r7, r1
 8008526:	4614      	mov	r4, r2
 8008528:	18d5      	adds	r5, r2, r3
 800852a:	42ac      	cmp	r4, r5
 800852c:	d101      	bne.n	8008532 <__sfputs_r+0x12>
 800852e:	2000      	movs	r0, #0
 8008530:	e007      	b.n	8008542 <__sfputs_r+0x22>
 8008532:	463a      	mov	r2, r7
 8008534:	4630      	mov	r0, r6
 8008536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853a:	f7ff ffdc 	bl	80084f6 <__sfputc_r>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d1f3      	bne.n	800852a <__sfputs_r+0xa>
 8008542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008544 <_vfiprintf_r>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	460d      	mov	r5, r1
 800854a:	4614      	mov	r4, r2
 800854c:	4698      	mov	r8, r3
 800854e:	4606      	mov	r6, r0
 8008550:	b09d      	sub	sp, #116	; 0x74
 8008552:	b118      	cbz	r0, 800855c <_vfiprintf_r+0x18>
 8008554:	6983      	ldr	r3, [r0, #24]
 8008556:	b90b      	cbnz	r3, 800855c <_vfiprintf_r+0x18>
 8008558:	f000 fb10 	bl	8008b7c <__sinit>
 800855c:	4b89      	ldr	r3, [pc, #548]	; (8008784 <_vfiprintf_r+0x240>)
 800855e:	429d      	cmp	r5, r3
 8008560:	d11b      	bne.n	800859a <_vfiprintf_r+0x56>
 8008562:	6875      	ldr	r5, [r6, #4]
 8008564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008566:	07d9      	lsls	r1, r3, #31
 8008568:	d405      	bmi.n	8008576 <_vfiprintf_r+0x32>
 800856a:	89ab      	ldrh	r3, [r5, #12]
 800856c:	059a      	lsls	r2, r3, #22
 800856e:	d402      	bmi.n	8008576 <_vfiprintf_r+0x32>
 8008570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008572:	f000 fba1 	bl	8008cb8 <__retarget_lock_acquire_recursive>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	071b      	lsls	r3, r3, #28
 800857a:	d501      	bpl.n	8008580 <_vfiprintf_r+0x3c>
 800857c:	692b      	ldr	r3, [r5, #16]
 800857e:	b9eb      	cbnz	r3, 80085bc <_vfiprintf_r+0x78>
 8008580:	4629      	mov	r1, r5
 8008582:	4630      	mov	r0, r6
 8008584:	f000 f96e 	bl	8008864 <__swsetup_r>
 8008588:	b1c0      	cbz	r0, 80085bc <_vfiprintf_r+0x78>
 800858a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800858c:	07dc      	lsls	r4, r3, #31
 800858e:	d50e      	bpl.n	80085ae <_vfiprintf_r+0x6a>
 8008590:	f04f 30ff 	mov.w	r0, #4294967295
 8008594:	b01d      	add	sp, #116	; 0x74
 8008596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859a:	4b7b      	ldr	r3, [pc, #492]	; (8008788 <_vfiprintf_r+0x244>)
 800859c:	429d      	cmp	r5, r3
 800859e:	d101      	bne.n	80085a4 <_vfiprintf_r+0x60>
 80085a0:	68b5      	ldr	r5, [r6, #8]
 80085a2:	e7df      	b.n	8008564 <_vfiprintf_r+0x20>
 80085a4:	4b79      	ldr	r3, [pc, #484]	; (800878c <_vfiprintf_r+0x248>)
 80085a6:	429d      	cmp	r5, r3
 80085a8:	bf08      	it	eq
 80085aa:	68f5      	ldreq	r5, [r6, #12]
 80085ac:	e7da      	b.n	8008564 <_vfiprintf_r+0x20>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	0598      	lsls	r0, r3, #22
 80085b2:	d4ed      	bmi.n	8008590 <_vfiprintf_r+0x4c>
 80085b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b6:	f000 fb80 	bl	8008cba <__retarget_lock_release_recursive>
 80085ba:	e7e9      	b.n	8008590 <_vfiprintf_r+0x4c>
 80085bc:	2300      	movs	r3, #0
 80085be:	9309      	str	r3, [sp, #36]	; 0x24
 80085c0:	2320      	movs	r3, #32
 80085c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085c6:	2330      	movs	r3, #48	; 0x30
 80085c8:	f04f 0901 	mov.w	r9, #1
 80085cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008790 <_vfiprintf_r+0x24c>
 80085d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085d8:	4623      	mov	r3, r4
 80085da:	469a      	mov	sl, r3
 80085dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e0:	b10a      	cbz	r2, 80085e6 <_vfiprintf_r+0xa2>
 80085e2:	2a25      	cmp	r2, #37	; 0x25
 80085e4:	d1f9      	bne.n	80085da <_vfiprintf_r+0x96>
 80085e6:	ebba 0b04 	subs.w	fp, sl, r4
 80085ea:	d00b      	beq.n	8008604 <_vfiprintf_r+0xc0>
 80085ec:	465b      	mov	r3, fp
 80085ee:	4622      	mov	r2, r4
 80085f0:	4629      	mov	r1, r5
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7ff ff94 	bl	8008520 <__sfputs_r>
 80085f8:	3001      	adds	r0, #1
 80085fa:	f000 80aa 	beq.w	8008752 <_vfiprintf_r+0x20e>
 80085fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008600:	445a      	add	r2, fp
 8008602:	9209      	str	r2, [sp, #36]	; 0x24
 8008604:	f89a 3000 	ldrb.w	r3, [sl]
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 80a2 	beq.w	8008752 <_vfiprintf_r+0x20e>
 800860e:	2300      	movs	r3, #0
 8008610:	f04f 32ff 	mov.w	r2, #4294967295
 8008614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008618:	f10a 0a01 	add.w	sl, sl, #1
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008624:	931a      	str	r3, [sp, #104]	; 0x68
 8008626:	4654      	mov	r4, sl
 8008628:	2205      	movs	r2, #5
 800862a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862e:	4858      	ldr	r0, [pc, #352]	; (8008790 <_vfiprintf_r+0x24c>)
 8008630:	f7ff f8d0 	bl	80077d4 <memchr>
 8008634:	9a04      	ldr	r2, [sp, #16]
 8008636:	b9d8      	cbnz	r0, 8008670 <_vfiprintf_r+0x12c>
 8008638:	06d1      	lsls	r1, r2, #27
 800863a:	bf44      	itt	mi
 800863c:	2320      	movmi	r3, #32
 800863e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008642:	0713      	lsls	r3, r2, #28
 8008644:	bf44      	itt	mi
 8008646:	232b      	movmi	r3, #43	; 0x2b
 8008648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800864c:	f89a 3000 	ldrb.w	r3, [sl]
 8008650:	2b2a      	cmp	r3, #42	; 0x2a
 8008652:	d015      	beq.n	8008680 <_vfiprintf_r+0x13c>
 8008654:	4654      	mov	r4, sl
 8008656:	2000      	movs	r0, #0
 8008658:	f04f 0c0a 	mov.w	ip, #10
 800865c:	9a07      	ldr	r2, [sp, #28]
 800865e:	4621      	mov	r1, r4
 8008660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008664:	3b30      	subs	r3, #48	; 0x30
 8008666:	2b09      	cmp	r3, #9
 8008668:	d94e      	bls.n	8008708 <_vfiprintf_r+0x1c4>
 800866a:	b1b0      	cbz	r0, 800869a <_vfiprintf_r+0x156>
 800866c:	9207      	str	r2, [sp, #28]
 800866e:	e014      	b.n	800869a <_vfiprintf_r+0x156>
 8008670:	eba0 0308 	sub.w	r3, r0, r8
 8008674:	fa09 f303 	lsl.w	r3, r9, r3
 8008678:	4313      	orrs	r3, r2
 800867a:	46a2      	mov	sl, r4
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	e7d2      	b.n	8008626 <_vfiprintf_r+0xe2>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	1d19      	adds	r1, r3, #4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	9103      	str	r1, [sp, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	bfbb      	ittet	lt
 800868c:	425b      	neglt	r3, r3
 800868e:	f042 0202 	orrlt.w	r2, r2, #2
 8008692:	9307      	strge	r3, [sp, #28]
 8008694:	9307      	strlt	r3, [sp, #28]
 8008696:	bfb8      	it	lt
 8008698:	9204      	strlt	r2, [sp, #16]
 800869a:	7823      	ldrb	r3, [r4, #0]
 800869c:	2b2e      	cmp	r3, #46	; 0x2e
 800869e:	d10c      	bne.n	80086ba <_vfiprintf_r+0x176>
 80086a0:	7863      	ldrb	r3, [r4, #1]
 80086a2:	2b2a      	cmp	r3, #42	; 0x2a
 80086a4:	d135      	bne.n	8008712 <_vfiprintf_r+0x1ce>
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	3402      	adds	r4, #2
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	9203      	str	r2, [sp, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bfb8      	it	lt
 80086b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80086b8:	9305      	str	r3, [sp, #20]
 80086ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008794 <_vfiprintf_r+0x250>
 80086be:	2203      	movs	r2, #3
 80086c0:	4650      	mov	r0, sl
 80086c2:	7821      	ldrb	r1, [r4, #0]
 80086c4:	f7ff f886 	bl	80077d4 <memchr>
 80086c8:	b140      	cbz	r0, 80086dc <_vfiprintf_r+0x198>
 80086ca:	2340      	movs	r3, #64	; 0x40
 80086cc:	eba0 000a 	sub.w	r0, r0, sl
 80086d0:	fa03 f000 	lsl.w	r0, r3, r0
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	3401      	adds	r4, #1
 80086d8:	4303      	orrs	r3, r0
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e0:	2206      	movs	r2, #6
 80086e2:	482d      	ldr	r0, [pc, #180]	; (8008798 <_vfiprintf_r+0x254>)
 80086e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086e8:	f7ff f874 	bl	80077d4 <memchr>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d03f      	beq.n	8008770 <_vfiprintf_r+0x22c>
 80086f0:	4b2a      	ldr	r3, [pc, #168]	; (800879c <_vfiprintf_r+0x258>)
 80086f2:	bb1b      	cbnz	r3, 800873c <_vfiprintf_r+0x1f8>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	3307      	adds	r3, #7
 80086f8:	f023 0307 	bic.w	r3, r3, #7
 80086fc:	3308      	adds	r3, #8
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008702:	443b      	add	r3, r7
 8008704:	9309      	str	r3, [sp, #36]	; 0x24
 8008706:	e767      	b.n	80085d8 <_vfiprintf_r+0x94>
 8008708:	460c      	mov	r4, r1
 800870a:	2001      	movs	r0, #1
 800870c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008710:	e7a5      	b.n	800865e <_vfiprintf_r+0x11a>
 8008712:	2300      	movs	r3, #0
 8008714:	f04f 0c0a 	mov.w	ip, #10
 8008718:	4619      	mov	r1, r3
 800871a:	3401      	adds	r4, #1
 800871c:	9305      	str	r3, [sp, #20]
 800871e:	4620      	mov	r0, r4
 8008720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008724:	3a30      	subs	r2, #48	; 0x30
 8008726:	2a09      	cmp	r2, #9
 8008728:	d903      	bls.n	8008732 <_vfiprintf_r+0x1ee>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0c5      	beq.n	80086ba <_vfiprintf_r+0x176>
 800872e:	9105      	str	r1, [sp, #20]
 8008730:	e7c3      	b.n	80086ba <_vfiprintf_r+0x176>
 8008732:	4604      	mov	r4, r0
 8008734:	2301      	movs	r3, #1
 8008736:	fb0c 2101 	mla	r1, ip, r1, r2
 800873a:	e7f0      	b.n	800871e <_vfiprintf_r+0x1da>
 800873c:	ab03      	add	r3, sp, #12
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	462a      	mov	r2, r5
 8008742:	4630      	mov	r0, r6
 8008744:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <_vfiprintf_r+0x25c>)
 8008746:	a904      	add	r1, sp, #16
 8008748:	f7fd fdc8 	bl	80062dc <_printf_float>
 800874c:	4607      	mov	r7, r0
 800874e:	1c78      	adds	r0, r7, #1
 8008750:	d1d6      	bne.n	8008700 <_vfiprintf_r+0x1bc>
 8008752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008754:	07d9      	lsls	r1, r3, #31
 8008756:	d405      	bmi.n	8008764 <_vfiprintf_r+0x220>
 8008758:	89ab      	ldrh	r3, [r5, #12]
 800875a:	059a      	lsls	r2, r3, #22
 800875c:	d402      	bmi.n	8008764 <_vfiprintf_r+0x220>
 800875e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008760:	f000 faab 	bl	8008cba <__retarget_lock_release_recursive>
 8008764:	89ab      	ldrh	r3, [r5, #12]
 8008766:	065b      	lsls	r3, r3, #25
 8008768:	f53f af12 	bmi.w	8008590 <_vfiprintf_r+0x4c>
 800876c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800876e:	e711      	b.n	8008594 <_vfiprintf_r+0x50>
 8008770:	ab03      	add	r3, sp, #12
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	462a      	mov	r2, r5
 8008776:	4630      	mov	r0, r6
 8008778:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <_vfiprintf_r+0x25c>)
 800877a:	a904      	add	r1, sp, #16
 800877c:	f7fe f84a 	bl	8006814 <_printf_i>
 8008780:	e7e4      	b.n	800874c <_vfiprintf_r+0x208>
 8008782:	bf00      	nop
 8008784:	080093bc 	.word	0x080093bc
 8008788:	080093dc 	.word	0x080093dc
 800878c:	0800939c 	.word	0x0800939c
 8008790:	08009244 	.word	0x08009244
 8008794:	0800924a 	.word	0x0800924a
 8008798:	0800924e 	.word	0x0800924e
 800879c:	080062dd 	.word	0x080062dd
 80087a0:	08008521 	.word	0x08008521

080087a4 <__swbuf_r>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	460e      	mov	r6, r1
 80087a8:	4614      	mov	r4, r2
 80087aa:	4605      	mov	r5, r0
 80087ac:	b118      	cbz	r0, 80087b6 <__swbuf_r+0x12>
 80087ae:	6983      	ldr	r3, [r0, #24]
 80087b0:	b90b      	cbnz	r3, 80087b6 <__swbuf_r+0x12>
 80087b2:	f000 f9e3 	bl	8008b7c <__sinit>
 80087b6:	4b21      	ldr	r3, [pc, #132]	; (800883c <__swbuf_r+0x98>)
 80087b8:	429c      	cmp	r4, r3
 80087ba:	d12b      	bne.n	8008814 <__swbuf_r+0x70>
 80087bc:	686c      	ldr	r4, [r5, #4]
 80087be:	69a3      	ldr	r3, [r4, #24]
 80087c0:	60a3      	str	r3, [r4, #8]
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	071a      	lsls	r2, r3, #28
 80087c6:	d52f      	bpl.n	8008828 <__swbuf_r+0x84>
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	b36b      	cbz	r3, 8008828 <__swbuf_r+0x84>
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	b2f6      	uxtb	r6, r6
 80087d2:	1ac0      	subs	r0, r0, r3
 80087d4:	6963      	ldr	r3, [r4, #20]
 80087d6:	4637      	mov	r7, r6
 80087d8:	4283      	cmp	r3, r0
 80087da:	dc04      	bgt.n	80087e6 <__swbuf_r+0x42>
 80087dc:	4621      	mov	r1, r4
 80087de:	4628      	mov	r0, r5
 80087e0:	f000 f938 	bl	8008a54 <_fflush_r>
 80087e4:	bb30      	cbnz	r0, 8008834 <__swbuf_r+0x90>
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	3001      	adds	r0, #1
 80087ea:	3b01      	subs	r3, #1
 80087ec:	60a3      	str	r3, [r4, #8]
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	6022      	str	r2, [r4, #0]
 80087f4:	701e      	strb	r6, [r3, #0]
 80087f6:	6963      	ldr	r3, [r4, #20]
 80087f8:	4283      	cmp	r3, r0
 80087fa:	d004      	beq.n	8008806 <__swbuf_r+0x62>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	07db      	lsls	r3, r3, #31
 8008800:	d506      	bpl.n	8008810 <__swbuf_r+0x6c>
 8008802:	2e0a      	cmp	r6, #10
 8008804:	d104      	bne.n	8008810 <__swbuf_r+0x6c>
 8008806:	4621      	mov	r1, r4
 8008808:	4628      	mov	r0, r5
 800880a:	f000 f923 	bl	8008a54 <_fflush_r>
 800880e:	b988      	cbnz	r0, 8008834 <__swbuf_r+0x90>
 8008810:	4638      	mov	r0, r7
 8008812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <__swbuf_r+0x9c>)
 8008816:	429c      	cmp	r4, r3
 8008818:	d101      	bne.n	800881e <__swbuf_r+0x7a>
 800881a:	68ac      	ldr	r4, [r5, #8]
 800881c:	e7cf      	b.n	80087be <__swbuf_r+0x1a>
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <__swbuf_r+0xa0>)
 8008820:	429c      	cmp	r4, r3
 8008822:	bf08      	it	eq
 8008824:	68ec      	ldreq	r4, [r5, #12]
 8008826:	e7ca      	b.n	80087be <__swbuf_r+0x1a>
 8008828:	4621      	mov	r1, r4
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f81a 	bl	8008864 <__swsetup_r>
 8008830:	2800      	cmp	r0, #0
 8008832:	d0cb      	beq.n	80087cc <__swbuf_r+0x28>
 8008834:	f04f 37ff 	mov.w	r7, #4294967295
 8008838:	e7ea      	b.n	8008810 <__swbuf_r+0x6c>
 800883a:	bf00      	nop
 800883c:	080093bc 	.word	0x080093bc
 8008840:	080093dc 	.word	0x080093dc
 8008844:	0800939c 	.word	0x0800939c

08008848 <__ascii_wctomb>:
 8008848:	4603      	mov	r3, r0
 800884a:	4608      	mov	r0, r1
 800884c:	b141      	cbz	r1, 8008860 <__ascii_wctomb+0x18>
 800884e:	2aff      	cmp	r2, #255	; 0xff
 8008850:	d904      	bls.n	800885c <__ascii_wctomb+0x14>
 8008852:	228a      	movs	r2, #138	; 0x8a
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	4770      	bx	lr
 800885c:	2001      	movs	r0, #1
 800885e:	700a      	strb	r2, [r1, #0]
 8008860:	4770      	bx	lr
	...

08008864 <__swsetup_r>:
 8008864:	4b32      	ldr	r3, [pc, #200]	; (8008930 <__swsetup_r+0xcc>)
 8008866:	b570      	push	{r4, r5, r6, lr}
 8008868:	681d      	ldr	r5, [r3, #0]
 800886a:	4606      	mov	r6, r0
 800886c:	460c      	mov	r4, r1
 800886e:	b125      	cbz	r5, 800887a <__swsetup_r+0x16>
 8008870:	69ab      	ldr	r3, [r5, #24]
 8008872:	b913      	cbnz	r3, 800887a <__swsetup_r+0x16>
 8008874:	4628      	mov	r0, r5
 8008876:	f000 f981 	bl	8008b7c <__sinit>
 800887a:	4b2e      	ldr	r3, [pc, #184]	; (8008934 <__swsetup_r+0xd0>)
 800887c:	429c      	cmp	r4, r3
 800887e:	d10f      	bne.n	80088a0 <__swsetup_r+0x3c>
 8008880:	686c      	ldr	r4, [r5, #4]
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008888:	0719      	lsls	r1, r3, #28
 800888a:	d42c      	bmi.n	80088e6 <__swsetup_r+0x82>
 800888c:	06dd      	lsls	r5, r3, #27
 800888e:	d411      	bmi.n	80088b4 <__swsetup_r+0x50>
 8008890:	2309      	movs	r3, #9
 8008892:	6033      	str	r3, [r6, #0]
 8008894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	81a3      	strh	r3, [r4, #12]
 800889e:	e03e      	b.n	800891e <__swsetup_r+0xba>
 80088a0:	4b25      	ldr	r3, [pc, #148]	; (8008938 <__swsetup_r+0xd4>)
 80088a2:	429c      	cmp	r4, r3
 80088a4:	d101      	bne.n	80088aa <__swsetup_r+0x46>
 80088a6:	68ac      	ldr	r4, [r5, #8]
 80088a8:	e7eb      	b.n	8008882 <__swsetup_r+0x1e>
 80088aa:	4b24      	ldr	r3, [pc, #144]	; (800893c <__swsetup_r+0xd8>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	bf08      	it	eq
 80088b0:	68ec      	ldreq	r4, [r5, #12]
 80088b2:	e7e6      	b.n	8008882 <__swsetup_r+0x1e>
 80088b4:	0758      	lsls	r0, r3, #29
 80088b6:	d512      	bpl.n	80088de <__swsetup_r+0x7a>
 80088b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ba:	b141      	cbz	r1, 80088ce <__swsetup_r+0x6a>
 80088bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c0:	4299      	cmp	r1, r3
 80088c2:	d002      	beq.n	80088ca <__swsetup_r+0x66>
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7ff fb37 	bl	8007f38 <_free_r>
 80088ca:	2300      	movs	r3, #0
 80088cc:	6363      	str	r3, [r4, #52]	; 0x34
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088d4:	81a3      	strh	r3, [r4, #12]
 80088d6:	2300      	movs	r3, #0
 80088d8:	6063      	str	r3, [r4, #4]
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	f043 0308 	orr.w	r3, r3, #8
 80088e4:	81a3      	strh	r3, [r4, #12]
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	b94b      	cbnz	r3, 80088fe <__swsetup_r+0x9a>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f4:	d003      	beq.n	80088fe <__swsetup_r+0x9a>
 80088f6:	4621      	mov	r1, r4
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 fa05 	bl	8008d08 <__smakebuf_r>
 80088fe:	89a0      	ldrh	r0, [r4, #12]
 8008900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008904:	f010 0301 	ands.w	r3, r0, #1
 8008908:	d00a      	beq.n	8008920 <__swsetup_r+0xbc>
 800890a:	2300      	movs	r3, #0
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	6963      	ldr	r3, [r4, #20]
 8008910:	425b      	negs	r3, r3
 8008912:	61a3      	str	r3, [r4, #24]
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	b943      	cbnz	r3, 800892a <__swsetup_r+0xc6>
 8008918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800891c:	d1ba      	bne.n	8008894 <__swsetup_r+0x30>
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	0781      	lsls	r1, r0, #30
 8008922:	bf58      	it	pl
 8008924:	6963      	ldrpl	r3, [r4, #20]
 8008926:	60a3      	str	r3, [r4, #8]
 8008928:	e7f4      	b.n	8008914 <__swsetup_r+0xb0>
 800892a:	2000      	movs	r0, #0
 800892c:	e7f7      	b.n	800891e <__swsetup_r+0xba>
 800892e:	bf00      	nop
 8008930:	20000040 	.word	0x20000040
 8008934:	080093bc 	.word	0x080093bc
 8008938:	080093dc 	.word	0x080093dc
 800893c:	0800939c 	.word	0x0800939c

08008940 <abort>:
 8008940:	2006      	movs	r0, #6
 8008942:	b508      	push	{r3, lr}
 8008944:	f000 fa50 	bl	8008de8 <raise>
 8008948:	2001      	movs	r0, #1
 800894a:	f7f9 fe16 	bl	800257a <_exit>
	...

08008950 <__sflush_r>:
 8008950:	898a      	ldrh	r2, [r1, #12]
 8008952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008954:	4605      	mov	r5, r0
 8008956:	0710      	lsls	r0, r2, #28
 8008958:	460c      	mov	r4, r1
 800895a:	d457      	bmi.n	8008a0c <__sflush_r+0xbc>
 800895c:	684b      	ldr	r3, [r1, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	dc04      	bgt.n	800896c <__sflush_r+0x1c>
 8008962:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc01      	bgt.n	800896c <__sflush_r+0x1c>
 8008968:	2000      	movs	r0, #0
 800896a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800896c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800896e:	2e00      	cmp	r6, #0
 8008970:	d0fa      	beq.n	8008968 <__sflush_r+0x18>
 8008972:	2300      	movs	r3, #0
 8008974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008978:	682f      	ldr	r7, [r5, #0]
 800897a:	602b      	str	r3, [r5, #0]
 800897c:	d032      	beq.n	80089e4 <__sflush_r+0x94>
 800897e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	075a      	lsls	r2, r3, #29
 8008984:	d505      	bpl.n	8008992 <__sflush_r+0x42>
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	1ac0      	subs	r0, r0, r3
 800898a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800898c:	b10b      	cbz	r3, 8008992 <__sflush_r+0x42>
 800898e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008990:	1ac0      	subs	r0, r0, r3
 8008992:	2300      	movs	r3, #0
 8008994:	4602      	mov	r2, r0
 8008996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008998:	4628      	mov	r0, r5
 800899a:	6a21      	ldr	r1, [r4, #32]
 800899c:	47b0      	blx	r6
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	d106      	bne.n	80089b2 <__sflush_r+0x62>
 80089a4:	6829      	ldr	r1, [r5, #0]
 80089a6:	291d      	cmp	r1, #29
 80089a8:	d82c      	bhi.n	8008a04 <__sflush_r+0xb4>
 80089aa:	4a29      	ldr	r2, [pc, #164]	; (8008a50 <__sflush_r+0x100>)
 80089ac:	40ca      	lsrs	r2, r1
 80089ae:	07d6      	lsls	r6, r2, #31
 80089b0:	d528      	bpl.n	8008a04 <__sflush_r+0xb4>
 80089b2:	2200      	movs	r2, #0
 80089b4:	6062      	str	r2, [r4, #4]
 80089b6:	6922      	ldr	r2, [r4, #16]
 80089b8:	04d9      	lsls	r1, r3, #19
 80089ba:	6022      	str	r2, [r4, #0]
 80089bc:	d504      	bpl.n	80089c8 <__sflush_r+0x78>
 80089be:	1c42      	adds	r2, r0, #1
 80089c0:	d101      	bne.n	80089c6 <__sflush_r+0x76>
 80089c2:	682b      	ldr	r3, [r5, #0]
 80089c4:	b903      	cbnz	r3, 80089c8 <__sflush_r+0x78>
 80089c6:	6560      	str	r0, [r4, #84]	; 0x54
 80089c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ca:	602f      	str	r7, [r5, #0]
 80089cc:	2900      	cmp	r1, #0
 80089ce:	d0cb      	beq.n	8008968 <__sflush_r+0x18>
 80089d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089d4:	4299      	cmp	r1, r3
 80089d6:	d002      	beq.n	80089de <__sflush_r+0x8e>
 80089d8:	4628      	mov	r0, r5
 80089da:	f7ff faad 	bl	8007f38 <_free_r>
 80089de:	2000      	movs	r0, #0
 80089e0:	6360      	str	r0, [r4, #52]	; 0x34
 80089e2:	e7c2      	b.n	800896a <__sflush_r+0x1a>
 80089e4:	6a21      	ldr	r1, [r4, #32]
 80089e6:	2301      	movs	r3, #1
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b0      	blx	r6
 80089ec:	1c41      	adds	r1, r0, #1
 80089ee:	d1c7      	bne.n	8008980 <__sflush_r+0x30>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0c4      	beq.n	8008980 <__sflush_r+0x30>
 80089f6:	2b1d      	cmp	r3, #29
 80089f8:	d001      	beq.n	80089fe <__sflush_r+0xae>
 80089fa:	2b16      	cmp	r3, #22
 80089fc:	d101      	bne.n	8008a02 <__sflush_r+0xb2>
 80089fe:	602f      	str	r7, [r5, #0]
 8008a00:	e7b2      	b.n	8008968 <__sflush_r+0x18>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	e7ae      	b.n	800896a <__sflush_r+0x1a>
 8008a0c:	690f      	ldr	r7, [r1, #16]
 8008a0e:	2f00      	cmp	r7, #0
 8008a10:	d0aa      	beq.n	8008968 <__sflush_r+0x18>
 8008a12:	0793      	lsls	r3, r2, #30
 8008a14:	bf18      	it	ne
 8008a16:	2300      	movne	r3, #0
 8008a18:	680e      	ldr	r6, [r1, #0]
 8008a1a:	bf08      	it	eq
 8008a1c:	694b      	ldreq	r3, [r1, #20]
 8008a1e:	1bf6      	subs	r6, r6, r7
 8008a20:	600f      	str	r7, [r1, #0]
 8008a22:	608b      	str	r3, [r1, #8]
 8008a24:	2e00      	cmp	r6, #0
 8008a26:	dd9f      	ble.n	8008968 <__sflush_r+0x18>
 8008a28:	4633      	mov	r3, r6
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	6a21      	ldr	r1, [r4, #32]
 8008a30:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008a34:	47e0      	blx	ip
 8008a36:	2800      	cmp	r0, #0
 8008a38:	dc06      	bgt.n	8008a48 <__sflush_r+0xf8>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	e790      	b.n	800896a <__sflush_r+0x1a>
 8008a48:	4407      	add	r7, r0
 8008a4a:	1a36      	subs	r6, r6, r0
 8008a4c:	e7ea      	b.n	8008a24 <__sflush_r+0xd4>
 8008a4e:	bf00      	nop
 8008a50:	20400001 	.word	0x20400001

08008a54 <_fflush_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	690b      	ldr	r3, [r1, #16]
 8008a58:	4605      	mov	r5, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	b913      	cbnz	r3, 8008a64 <_fflush_r+0x10>
 8008a5e:	2500      	movs	r5, #0
 8008a60:	4628      	mov	r0, r5
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	b118      	cbz	r0, 8008a6e <_fflush_r+0x1a>
 8008a66:	6983      	ldr	r3, [r0, #24]
 8008a68:	b90b      	cbnz	r3, 8008a6e <_fflush_r+0x1a>
 8008a6a:	f000 f887 	bl	8008b7c <__sinit>
 8008a6e:	4b14      	ldr	r3, [pc, #80]	; (8008ac0 <_fflush_r+0x6c>)
 8008a70:	429c      	cmp	r4, r3
 8008a72:	d11b      	bne.n	8008aac <_fflush_r+0x58>
 8008a74:	686c      	ldr	r4, [r5, #4]
 8008a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0ef      	beq.n	8008a5e <_fflush_r+0xa>
 8008a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a80:	07d0      	lsls	r0, r2, #31
 8008a82:	d404      	bmi.n	8008a8e <_fflush_r+0x3a>
 8008a84:	0599      	lsls	r1, r3, #22
 8008a86:	d402      	bmi.n	8008a8e <_fflush_r+0x3a>
 8008a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a8a:	f000 f915 	bl	8008cb8 <__retarget_lock_acquire_recursive>
 8008a8e:	4628      	mov	r0, r5
 8008a90:	4621      	mov	r1, r4
 8008a92:	f7ff ff5d 	bl	8008950 <__sflush_r>
 8008a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a98:	4605      	mov	r5, r0
 8008a9a:	07da      	lsls	r2, r3, #31
 8008a9c:	d4e0      	bmi.n	8008a60 <_fflush_r+0xc>
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	059b      	lsls	r3, r3, #22
 8008aa2:	d4dd      	bmi.n	8008a60 <_fflush_r+0xc>
 8008aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aa6:	f000 f908 	bl	8008cba <__retarget_lock_release_recursive>
 8008aaa:	e7d9      	b.n	8008a60 <_fflush_r+0xc>
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <_fflush_r+0x70>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d101      	bne.n	8008ab6 <_fflush_r+0x62>
 8008ab2:	68ac      	ldr	r4, [r5, #8]
 8008ab4:	e7df      	b.n	8008a76 <_fflush_r+0x22>
 8008ab6:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <_fflush_r+0x74>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	bf08      	it	eq
 8008abc:	68ec      	ldreq	r4, [r5, #12]
 8008abe:	e7da      	b.n	8008a76 <_fflush_r+0x22>
 8008ac0:	080093bc 	.word	0x080093bc
 8008ac4:	080093dc 	.word	0x080093dc
 8008ac8:	0800939c 	.word	0x0800939c

08008acc <std>:
 8008acc:	2300      	movs	r3, #0
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ada:	6083      	str	r3, [r0, #8]
 8008adc:	8181      	strh	r1, [r0, #12]
 8008ade:	6643      	str	r3, [r0, #100]	; 0x64
 8008ae0:	81c2      	strh	r2, [r0, #14]
 8008ae2:	6183      	str	r3, [r0, #24]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	305c      	adds	r0, #92	; 0x5c
 8008aea:	f7fd fb51 	bl	8006190 <memset>
 8008aee:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <std+0x38>)
 8008af0:	6224      	str	r4, [r4, #32]
 8008af2:	6263      	str	r3, [r4, #36]	; 0x24
 8008af4:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <std+0x3c>)
 8008af6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008af8:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <std+0x40>)
 8008afa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008afc:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <std+0x44>)
 8008afe:	6323      	str	r3, [r4, #48]	; 0x30
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	bf00      	nop
 8008b04:	08008e21 	.word	0x08008e21
 8008b08:	08008e43 	.word	0x08008e43
 8008b0c:	08008e7b 	.word	0x08008e7b
 8008b10:	08008e9f 	.word	0x08008e9f

08008b14 <_cleanup_r>:
 8008b14:	4901      	ldr	r1, [pc, #4]	; (8008b1c <_cleanup_r+0x8>)
 8008b16:	f000 b8af 	b.w	8008c78 <_fwalk_reent>
 8008b1a:	bf00      	nop
 8008b1c:	08008a55 	.word	0x08008a55

08008b20 <__sfmoreglue>:
 8008b20:	2268      	movs	r2, #104	; 0x68
 8008b22:	b570      	push	{r4, r5, r6, lr}
 8008b24:	1e4d      	subs	r5, r1, #1
 8008b26:	4355      	muls	r5, r2
 8008b28:	460e      	mov	r6, r1
 8008b2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b2e:	f7ff fa6b 	bl	8008008 <_malloc_r>
 8008b32:	4604      	mov	r4, r0
 8008b34:	b140      	cbz	r0, 8008b48 <__sfmoreglue+0x28>
 8008b36:	2100      	movs	r1, #0
 8008b38:	e9c0 1600 	strd	r1, r6, [r0]
 8008b3c:	300c      	adds	r0, #12
 8008b3e:	60a0      	str	r0, [r4, #8]
 8008b40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b44:	f7fd fb24 	bl	8006190 <memset>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}

08008b4c <__sfp_lock_acquire>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	; (8008b54 <__sfp_lock_acquire+0x8>)
 8008b4e:	f000 b8b3 	b.w	8008cb8 <__retarget_lock_acquire_recursive>
 8008b52:	bf00      	nop
 8008b54:	20000411 	.word	0x20000411

08008b58 <__sfp_lock_release>:
 8008b58:	4801      	ldr	r0, [pc, #4]	; (8008b60 <__sfp_lock_release+0x8>)
 8008b5a:	f000 b8ae 	b.w	8008cba <__retarget_lock_release_recursive>
 8008b5e:	bf00      	nop
 8008b60:	20000411 	.word	0x20000411

08008b64 <__sinit_lock_acquire>:
 8008b64:	4801      	ldr	r0, [pc, #4]	; (8008b6c <__sinit_lock_acquire+0x8>)
 8008b66:	f000 b8a7 	b.w	8008cb8 <__retarget_lock_acquire_recursive>
 8008b6a:	bf00      	nop
 8008b6c:	20000412 	.word	0x20000412

08008b70 <__sinit_lock_release>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__sinit_lock_release+0x8>)
 8008b72:	f000 b8a2 	b.w	8008cba <__retarget_lock_release_recursive>
 8008b76:	bf00      	nop
 8008b78:	20000412 	.word	0x20000412

08008b7c <__sinit>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	4604      	mov	r4, r0
 8008b80:	f7ff fff0 	bl	8008b64 <__sinit_lock_acquire>
 8008b84:	69a3      	ldr	r3, [r4, #24]
 8008b86:	b11b      	cbz	r3, 8008b90 <__sinit+0x14>
 8008b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b8c:	f7ff bff0 	b.w	8008b70 <__sinit_lock_release>
 8008b90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b94:	6523      	str	r3, [r4, #80]	; 0x50
 8008b96:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <__sinit+0x68>)
 8008b98:	4a13      	ldr	r2, [pc, #76]	; (8008be8 <__sinit+0x6c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b9e:	42a3      	cmp	r3, r4
 8008ba0:	bf08      	it	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	bf08      	it	eq
 8008ba8:	61a3      	streq	r3, [r4, #24]
 8008baa:	f000 f81f 	bl	8008bec <__sfp>
 8008bae:	6060      	str	r0, [r4, #4]
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 f81b 	bl	8008bec <__sfp>
 8008bb6:	60a0      	str	r0, [r4, #8]
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 f817 	bl	8008bec <__sfp>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2104      	movs	r1, #4
 8008bc2:	60e0      	str	r0, [r4, #12]
 8008bc4:	6860      	ldr	r0, [r4, #4]
 8008bc6:	f7ff ff81 	bl	8008acc <std>
 8008bca:	2201      	movs	r2, #1
 8008bcc:	2109      	movs	r1, #9
 8008bce:	68a0      	ldr	r0, [r4, #8]
 8008bd0:	f7ff ff7c 	bl	8008acc <std>
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	2112      	movs	r1, #18
 8008bd8:	68e0      	ldr	r0, [r4, #12]
 8008bda:	f7ff ff77 	bl	8008acc <std>
 8008bde:	2301      	movs	r3, #1
 8008be0:	61a3      	str	r3, [r4, #24]
 8008be2:	e7d1      	b.n	8008b88 <__sinit+0xc>
 8008be4:	08009020 	.word	0x08009020
 8008be8:	08008b15 	.word	0x08008b15

08008bec <__sfp>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	4607      	mov	r7, r0
 8008bf0:	f7ff ffac 	bl	8008b4c <__sfp_lock_acquire>
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	; (8008c70 <__sfp+0x84>)
 8008bf6:	681e      	ldr	r6, [r3, #0]
 8008bf8:	69b3      	ldr	r3, [r6, #24]
 8008bfa:	b913      	cbnz	r3, 8008c02 <__sfp+0x16>
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7ff ffbd 	bl	8008b7c <__sinit>
 8008c02:	3648      	adds	r6, #72	; 0x48
 8008c04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	d503      	bpl.n	8008c14 <__sfp+0x28>
 8008c0c:	6833      	ldr	r3, [r6, #0]
 8008c0e:	b30b      	cbz	r3, 8008c54 <__sfp+0x68>
 8008c10:	6836      	ldr	r6, [r6, #0]
 8008c12:	e7f7      	b.n	8008c04 <__sfp+0x18>
 8008c14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c18:	b9d5      	cbnz	r5, 8008c50 <__sfp+0x64>
 8008c1a:	4b16      	ldr	r3, [pc, #88]	; (8008c74 <__sfp+0x88>)
 8008c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c20:	60e3      	str	r3, [r4, #12]
 8008c22:	6665      	str	r5, [r4, #100]	; 0x64
 8008c24:	f000 f847 	bl	8008cb6 <__retarget_lock_init_recursive>
 8008c28:	f7ff ff96 	bl	8008b58 <__sfp_lock_release>
 8008c2c:	2208      	movs	r2, #8
 8008c2e:	4629      	mov	r1, r5
 8008c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c38:	6025      	str	r5, [r4, #0]
 8008c3a:	61a5      	str	r5, [r4, #24]
 8008c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c40:	f7fd faa6 	bl	8006190 <memset>
 8008c44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c50:	3468      	adds	r4, #104	; 0x68
 8008c52:	e7d9      	b.n	8008c08 <__sfp+0x1c>
 8008c54:	2104      	movs	r1, #4
 8008c56:	4638      	mov	r0, r7
 8008c58:	f7ff ff62 	bl	8008b20 <__sfmoreglue>
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	6030      	str	r0, [r6, #0]
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d1d5      	bne.n	8008c10 <__sfp+0x24>
 8008c64:	f7ff ff78 	bl	8008b58 <__sfp_lock_release>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	e7ee      	b.n	8008c4c <__sfp+0x60>
 8008c6e:	bf00      	nop
 8008c70:	08009020 	.word	0x08009020
 8008c74:	ffff0001 	.word	0xffff0001

08008c78 <_fwalk_reent>:
 8008c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	4688      	mov	r8, r1
 8008c80:	2700      	movs	r7, #0
 8008c82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c8a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c8e:	d505      	bpl.n	8008c9c <_fwalk_reent+0x24>
 8008c90:	6824      	ldr	r4, [r4, #0]
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	d1f7      	bne.n	8008c86 <_fwalk_reent+0xe>
 8008c96:	4638      	mov	r0, r7
 8008c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c9c:	89ab      	ldrh	r3, [r5, #12]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d907      	bls.n	8008cb2 <_fwalk_reent+0x3a>
 8008ca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	d003      	beq.n	8008cb2 <_fwalk_reent+0x3a>
 8008caa:	4629      	mov	r1, r5
 8008cac:	4630      	mov	r0, r6
 8008cae:	47c0      	blx	r8
 8008cb0:	4307      	orrs	r7, r0
 8008cb2:	3568      	adds	r5, #104	; 0x68
 8008cb4:	e7e9      	b.n	8008c8a <_fwalk_reent+0x12>

08008cb6 <__retarget_lock_init_recursive>:
 8008cb6:	4770      	bx	lr

08008cb8 <__retarget_lock_acquire_recursive>:
 8008cb8:	4770      	bx	lr

08008cba <__retarget_lock_release_recursive>:
 8008cba:	4770      	bx	lr

08008cbc <__swhatbuf_r>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	460e      	mov	r6, r1
 8008cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc4:	4614      	mov	r4, r2
 8008cc6:	2900      	cmp	r1, #0
 8008cc8:	461d      	mov	r5, r3
 8008cca:	b096      	sub	sp, #88	; 0x58
 8008ccc:	da08      	bge.n	8008ce0 <__swhatbuf_r+0x24>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cd4:	602a      	str	r2, [r5, #0]
 8008cd6:	061a      	lsls	r2, r3, #24
 8008cd8:	d410      	bmi.n	8008cfc <__swhatbuf_r+0x40>
 8008cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cde:	e00e      	b.n	8008cfe <__swhatbuf_r+0x42>
 8008ce0:	466a      	mov	r2, sp
 8008ce2:	f000 f903 	bl	8008eec <_fstat_r>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	dbf1      	blt.n	8008cce <__swhatbuf_r+0x12>
 8008cea:	9a01      	ldr	r2, [sp, #4]
 8008cec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cf4:	425a      	negs	r2, r3
 8008cf6:	415a      	adcs	r2, r3
 8008cf8:	602a      	str	r2, [r5, #0]
 8008cfa:	e7ee      	b.n	8008cda <__swhatbuf_r+0x1e>
 8008cfc:	2340      	movs	r3, #64	; 0x40
 8008cfe:	2000      	movs	r0, #0
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	b016      	add	sp, #88	; 0x58
 8008d04:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d08 <__smakebuf_r>:
 8008d08:	898b      	ldrh	r3, [r1, #12]
 8008d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d0c:	079d      	lsls	r5, r3, #30
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	d507      	bpl.n	8008d24 <__smakebuf_r+0x1c>
 8008d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	6163      	str	r3, [r4, #20]
 8008d20:	b002      	add	sp, #8
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	466a      	mov	r2, sp
 8008d26:	ab01      	add	r3, sp, #4
 8008d28:	f7ff ffc8 	bl	8008cbc <__swhatbuf_r>
 8008d2c:	9900      	ldr	r1, [sp, #0]
 8008d2e:	4605      	mov	r5, r0
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7ff f969 	bl	8008008 <_malloc_r>
 8008d36:	b948      	cbnz	r0, 8008d4c <__smakebuf_r+0x44>
 8008d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d3c:	059a      	lsls	r2, r3, #22
 8008d3e:	d4ef      	bmi.n	8008d20 <__smakebuf_r+0x18>
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	f043 0302 	orr.w	r3, r3, #2
 8008d48:	81a3      	strh	r3, [r4, #12]
 8008d4a:	e7e3      	b.n	8008d14 <__smakebuf_r+0xc>
 8008d4c:	4b0d      	ldr	r3, [pc, #52]	; (8008d84 <__smakebuf_r+0x7c>)
 8008d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	6020      	str	r0, [r4, #0]
 8008d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	9b00      	ldr	r3, [sp, #0]
 8008d5c:	6120      	str	r0, [r4, #16]
 8008d5e:	6163      	str	r3, [r4, #20]
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	b15b      	cbz	r3, 8008d7c <__smakebuf_r+0x74>
 8008d64:	4630      	mov	r0, r6
 8008d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d6a:	f000 f8d1 	bl	8008f10 <_isatty_r>
 8008d6e:	b128      	cbz	r0, 8008d7c <__smakebuf_r+0x74>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f023 0303 	bic.w	r3, r3, #3
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	89a0      	ldrh	r0, [r4, #12]
 8008d7e:	4305      	orrs	r5, r0
 8008d80:	81a5      	strh	r5, [r4, #12]
 8008d82:	e7cd      	b.n	8008d20 <__smakebuf_r+0x18>
 8008d84:	08008b15 	.word	0x08008b15

08008d88 <_malloc_usable_size_r>:
 8008d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8c:	1f18      	subs	r0, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfbc      	itt	lt
 8008d92:	580b      	ldrlt	r3, [r1, r0]
 8008d94:	18c0      	addlt	r0, r0, r3
 8008d96:	4770      	bx	lr

08008d98 <_raise_r>:
 8008d98:	291f      	cmp	r1, #31
 8008d9a:	b538      	push	{r3, r4, r5, lr}
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	d904      	bls.n	8008dac <_raise_r+0x14>
 8008da2:	2316      	movs	r3, #22
 8008da4:	6003      	str	r3, [r0, #0]
 8008da6:	f04f 30ff 	mov.w	r0, #4294967295
 8008daa:	bd38      	pop	{r3, r4, r5, pc}
 8008dac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dae:	b112      	cbz	r2, 8008db6 <_raise_r+0x1e>
 8008db0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008db4:	b94b      	cbnz	r3, 8008dca <_raise_r+0x32>
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 f830 	bl	8008e1c <_getpid_r>
 8008dbc:	462a      	mov	r2, r5
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dc6:	f000 b817 	b.w	8008df8 <_kill_r>
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d00a      	beq.n	8008de4 <_raise_r+0x4c>
 8008dce:	1c59      	adds	r1, r3, #1
 8008dd0:	d103      	bne.n	8008dda <_raise_r+0x42>
 8008dd2:	2316      	movs	r3, #22
 8008dd4:	6003      	str	r3, [r0, #0]
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	e7e7      	b.n	8008daa <_raise_r+0x12>
 8008dda:	2400      	movs	r4, #0
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008de2:	4798      	blx	r3
 8008de4:	2000      	movs	r0, #0
 8008de6:	e7e0      	b.n	8008daa <_raise_r+0x12>

08008de8 <raise>:
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <raise+0xc>)
 8008dea:	4601      	mov	r1, r0
 8008dec:	6818      	ldr	r0, [r3, #0]
 8008dee:	f7ff bfd3 	b.w	8008d98 <_raise_r>
 8008df2:	bf00      	nop
 8008df4:	20000040 	.word	0x20000040

08008df8 <_kill_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4d06      	ldr	r5, [pc, #24]	; (8008e18 <_kill_r+0x20>)
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	602b      	str	r3, [r5, #0]
 8008e06:	f7f9 fba8 	bl	800255a <_kill>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	d102      	bne.n	8008e14 <_kill_r+0x1c>
 8008e0e:	682b      	ldr	r3, [r5, #0]
 8008e10:	b103      	cbz	r3, 8008e14 <_kill_r+0x1c>
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	bf00      	nop
 8008e18:	2000040c 	.word	0x2000040c

08008e1c <_getpid_r>:
 8008e1c:	f7f9 bb96 	b.w	800254c <_getpid>

08008e20 <__sread>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	460c      	mov	r4, r1
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	f000 f894 	bl	8008f54 <_read_r>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	bfab      	itete	ge
 8008e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e32:	89a3      	ldrhlt	r3, [r4, #12]
 8008e34:	181b      	addge	r3, r3, r0
 8008e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e3a:	bfac      	ite	ge
 8008e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e3e:	81a3      	strhlt	r3, [r4, #12]
 8008e40:	bd10      	pop	{r4, pc}

08008e42 <__swrite>:
 8008e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e46:	461f      	mov	r7, r3
 8008e48:	898b      	ldrh	r3, [r1, #12]
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	05db      	lsls	r3, r3, #23
 8008e4e:	460c      	mov	r4, r1
 8008e50:	4616      	mov	r6, r2
 8008e52:	d505      	bpl.n	8008e60 <__swrite+0x1e>
 8008e54:	2302      	movs	r3, #2
 8008e56:	2200      	movs	r2, #0
 8008e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5c:	f000 f868 	bl	8008f30 <_lseek_r>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	4632      	mov	r2, r6
 8008e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e76:	f000 b817 	b.w	8008ea8 <_write_r>

08008e7a <__sseek>:
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e82:	f000 f855 	bl	8008f30 <_lseek_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	bf15      	itete	ne
 8008e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e96:	81a3      	strheq	r3, [r4, #12]
 8008e98:	bf18      	it	ne
 8008e9a:	81a3      	strhne	r3, [r4, #12]
 8008e9c:	bd10      	pop	{r4, pc}

08008e9e <__sclose>:
 8008e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea2:	f000 b813 	b.w	8008ecc <_close_r>
	...

08008ea8 <_write_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	4611      	mov	r1, r2
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4d05      	ldr	r5, [pc, #20]	; (8008ec8 <_write_r+0x20>)
 8008eb4:	602a      	str	r2, [r5, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7f9 fb86 	bl	80025c8 <_write>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_write_r+0x1e>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_write_r+0x1e>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	2000040c 	.word	0x2000040c

08008ecc <_close_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4d05      	ldr	r5, [pc, #20]	; (8008ee8 <_close_r+0x1c>)
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	602b      	str	r3, [r5, #0]
 8008ed8:	f7f9 fb92 	bl	8002600 <_close>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_close_r+0x1a>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_close_r+0x1a>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	2000040c 	.word	0x2000040c

08008eec <_fstat_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	2300      	movs	r3, #0
 8008ef0:	4d06      	ldr	r5, [pc, #24]	; (8008f0c <_fstat_r+0x20>)
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	f7f9 fb8c 	bl	8002616 <_fstat>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	d102      	bne.n	8008f08 <_fstat_r+0x1c>
 8008f02:	682b      	ldr	r3, [r5, #0]
 8008f04:	b103      	cbz	r3, 8008f08 <_fstat_r+0x1c>
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	bd38      	pop	{r3, r4, r5, pc}
 8008f0a:	bf00      	nop
 8008f0c:	2000040c 	.word	0x2000040c

08008f10 <_isatty_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	2300      	movs	r3, #0
 8008f14:	4d05      	ldr	r5, [pc, #20]	; (8008f2c <_isatty_r+0x1c>)
 8008f16:	4604      	mov	r4, r0
 8008f18:	4608      	mov	r0, r1
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	f7f9 fb8a 	bl	8002634 <_isatty>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_isatty_r+0x1a>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_isatty_r+0x1a>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	2000040c 	.word	0x2000040c

08008f30 <_lseek_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4604      	mov	r4, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	4611      	mov	r1, r2
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4d05      	ldr	r5, [pc, #20]	; (8008f50 <_lseek_r+0x20>)
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f7f9 fb82 	bl	8002648 <_lseek>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_lseek_r+0x1e>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_lseek_r+0x1e>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	2000040c 	.word	0x2000040c

08008f54 <_read_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4d05      	ldr	r5, [pc, #20]	; (8008f74 <_read_r+0x20>)
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f7f9 fb13 	bl	800258e <_read>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_read_r+0x1e>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_read_r+0x1e>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	2000040c 	.word	0x2000040c

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
